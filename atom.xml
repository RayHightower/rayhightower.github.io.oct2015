<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RayHightower.com]]></title>
  <link href="http://RayHightower.com/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-12-14T12:17:10-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[High Performance Computing at ACM]]></title>
    <link href="http://RayHightower.com/blog/2013/12/12/high-performance-computing-at-acm/"/>
    <updated>2013-12-12T22:22:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/12/12/high-performance-computing-at-acm</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/cray-1.jpg' width='' height='' alt='Cray-1 at the Swiss Federal Institute of Technology.' title='Cray-1 at the Swiss Federal Institute of Technology.'><span class='caption-text'>Cray-1 at the Swiss Federal Institute of Technology.</span></span></p>

<blockquote><p>Anyone can build a fast CPU. The trick is to build a fast system.
&nbsp;<br/>
~ Seymour Cray</p></blockquote>

<p>The Chicago chapter of the Association for Computing Machinery (<a href="http://www.chicagoacm.org/">Chicago ACM</a>) hosted a lecture titled <em>Supercomputing and You</em> yesterday evening. The talk was delivered by <a href="http://www.linkedin.com/in/sharankalwani">Sharan Kalwani</a> of <a href="http://www.fnal.gov/">Fermilab</a>. Kalwani&rsquo;s background blends mechanical engineering and computer science with decades of high performance computing experience.</p>

<h3>10x => High Performance Computing</h3>

<p>Kalwani began his talk by drawing a distinction between <em>supercomputing</em> and <em>high performance computing (HPC)</em>. Supercomputing is the buzzword that everyone knows, but the word implies that the designers are focused only on improving CPU performance. Such narrow focus could cause us to ignore important subsystems. For example, if engineers focus strictly on CPU performance, applications that are CPU-bound will quickly encounter I/O bottlenecks. High performance computing takes the entire system into account: CPU, I/O, cache, memory&hellip; anything that can influence performance.</p>

<!--more-->


<p>This article will use the terms <em>supercomputing</em> and <em>high performance computing</em> interchangably because we are discussing the field in general. In an engineering document, the distinction would be more important.</p>

<p>By definition, supercomputers perform at least ten times faster than the current state-of-the art. The definition is a moving target. The processor in today&rsquo;s smartphone would have been considered a high performance computer a decade ago.</p>

<h3>The First Supercomputer</h3>

<p><a href="http://www.cray.com/">Seymour Cray</a> is regarded as the father of the supercomputer. Cray cobbled together the first supercomputer using off-the-shelf components of the day and his unique ideas about computer architecture.</p>

<p>For example, Cray observed that the speed of an electrical signal was one bottleneck in computer performance. Electrical signals travel at the speed of light. Light can travel roughly one foot in one nanosecond.  Therefore, Cray decided that all internal cables in his new system would be less than a foot in length. No input would need to wait more than a nanosecond for a signal.</p>

<p>The 1972-era Cray supercomputer ran at a clock speed of 80MHz. It used a 64-bit word size. As a point of comparison, a 1972-era business mainframe ran at 4MHz with a 16-bit word size.</p>

<h3>Supercomputers&hellip; So What?</h3>

<p>Why do we need to spend time and money on high performance computers?  How does the general public benefit?</p>

<p>HPC enables us to solve problems that elude typical computers. For example:</p>

<ul>
<li><em>Auto safety testing</em>. Kalwani spent several years using HPC to run simulated crash tests for General Motors. A physical crash test, one in which the car is destroyed, costs $500k per car. The same test can be run in a simulator for $5k. Engineers still need to test a physical car at the end of the testing cycle, but the number of cars destroyed is drastically reduced. The business advantage of HPC-simulated tests is clear.</li>
<li><em>Nuclear testing</em>. It is very expensive (measured both in dollars and in human lives) to test a nuclear power plant. Fortunately, scientists know enough about nuclear behavior to create realistic simulations. Testing via simulation helps to manage costs and reduce accidents.</li>
<li><em>Weather forecasting</em>. The first supercomputers needed three days to predict the weather for <em>tomorrow</em>. What good is a 2-day-old weather forecast? A good forecast can save lives by telling people to evacute before a life-threatening natural disaster. Today&rsquo;s supercomputers can produce accurate weather forecasts while the reader still has time to take action.</li>
<li><em>Bioinformatics</em>. When scientists can reliably simulate drug behavior before live human testing, medical treatments can be improved and lives can be saved.</li>
<li><em>Energy exploration</em>. As long as people depend on fossil fuels, new sources need to be discovered in a timely and cost-effective way.  Supercomputers can process seismic data quickly and with sufficient granularity to tell prospectors where to drill.</li>
</ul>


<p>The bottom line: High performance computers deliver a return on investment that far outweighs their cost.</p>

<h3>Trickle Down Technology</h3>

<p>Many of the advances that we enjoy on today&rsquo;s laptops were invented by HPC architects. Kalwani shared one example: Cray invented the solid state disk (SSD) when mechanical disk drives proved to be a bottleneck. Can you imagine what an SSD must have cost in 1982 when it was invented? Today, SSDs are standard equipment on many laptops.</p>

<h3>Who Has the Fastest Supercomputer?</h3>

<p><a href="http://top500.org/">Top500.org</a> lists the fastest supercomputers on the planet, ordered by number of floating point operations per second (FLOPS). The race to be the fastest is highly competitive, so check the list for the latest champion.</p>

<p>There are those who believe that the Top 500 list is missing a few names. Some governments or companies might not want to publicize their HPC skills.</p>

<h3>Speed vs. Power</h3>

<p>Supercomputers gulp electricity. Rule of thumb: One megawatt of electricity used over the course of one year costs $1 million. The fastest supercomputer in the world uses 17 megawatts of electricity, so its owners have an annual electric bill of $17 million dollars.</p>

<p><a href="http://green500.org">The Green 500</a> list recognizes the most energy efficient supercomputers in the world.</p>

<h3>The Fourth Paradigm</h3>

<p>Kalwani closed the historical section of his talk with a discussion of <a href="http://research.microsoft.com/en-us/collaboration/fourthparadigm/">The Fourth Paradigm</a> of discovery. The concept comes from a collection of essays published by Microsoft Press. As of this writing, a free PDF of the book is available from <a href="http://research.microsoft.com/en-us/collaboration/fourthparadigm/">Microsoft Research</a>.</p>

<p>The book&rsquo;s introduction posits that there have been four paradigms of human scientific discovery:</p>

<ul>
<li><em>Empirical</em>. Started a thousand years ago. Science was all about describing natural phenomena.</li>
<li><em>Theoretical</em>. Started a few hundred years ago. Scientific understanding is achieved via models and generalizations.</li>
<li><em>Computational</em>. Started a few decades ago. Scientists seek understanding by simulating complex phenomena using computer models.</li>
<li><em>Data Exploration (eScience)</em>. Starting now. Scientists now have the technology to capture and store huge quantities of data, inexpensively and indefinitely. Software will &ldquo;look&rdquo; for trends in the data using statistical models. The software will identify trends in the data, and point them out for further investigation.</li>
</ul>


<p>One example of the Fourth Paradigm in action: Recent discoveries of sub-atomic particles were initiated by eScience. Software running on high performance computers identified trends, and the scientists followed up with deeper investigation. Discoveries followed after that.</p>

<p>Businesses have led the way in extracting trends from mountains of data. This path offered limited results for scientists because computers were too slow to handle scientific data in a timely fashion. Partial differential equations eat many CPU cycles!</p>

<p>High performance computing opens up a new universe of data insight for scientists and engineers.</p>

<h3>The Future of HPC</h3>

<p>Kalwani ended the talk by looking into his crystal ball and telling us about the future of HPC. A few trends on the horizon:</p>

<ul>
<li>Power consumption issues will dominate discussions. High performance computers are terribly inefficient. Either we need to find a free, unlimited supply of energy (unlikely) or we must design supercomputers that gulp less power.</li>
<li>GPGPUs. General purpose graphics processing units are already used for non-graphics applications, like Bitcoin mining. As more applications are discovered for the devices, faster GPGPUs will follow.</li>
<li>ARM. Advanced Risc Machine processors use less power and their performance continues to increase. Could ARM hold the key to power reduction in high performance computing?</li>
<li>Rex Parallella. Fresh from last month&rsquo;s <a href="http://sc13.supercomputing.org/">Supercomputing Conference</a>: <a href="http://www.rexcomputing.com/">Rex Computing</a> is using <a href="http://www.parallella.org/">Parallella</a> boards to build low-energy high performance computing clusters.</li>
<li>Quantum computing. Kalwani ran out of time as he was covering this item, but he shared enough to spark my interest. He explained quantum computing by using an analogy: Quantum computing is to digital computing as digital computing is to the abacus. The degree of advancement is that dramatic. <a href="http://www.dwavesys.com/">D-Wave</a> is one company exploring this area.</li>
</ul>


<h3>Conclusion</h3>

<p>Thank you Sharan Kalwani for presenting, and thank you <a href="http://www.chicagoacm.org/">Chicago ACM</a> for hosting.</p>

<h3>Acknowledgements</h3>

<p>The photo at the top of the article shows a Cray-1, the first supercomputer, on display at the <a href="http://www.epfl.ch/">Swiss Federal Institute of Technology (EPFL)</a> in Lausanne.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew, Ruby, and Git]]></title>
    <link href="http://RayHightower.com/blog/2013/12/06/homebrew-ruby-and-git/"/>
    <updated>2013-12-06T17:30:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/12/06/homebrew-ruby-and-git</id>
    <content type="html"><![CDATA[<p>I encountered some interesting behavior between <a href="http://brew.sh/">Homebrew</a> and Ruby this afternoon. I can describe what happened, but I don&rsquo;t yet understand why. Perhaps another member of the dev community can shed some light.</p>

<h3>Upgrading to Git 1.8.5</h3>

<p>Earlier today I learned that Git 1.8.5 was available. So I decided to upgrade. Since I use Homebrew for package management, it was time for <code>$ brew doctor</code> and <code>$ brew update</code> as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>Error: Homebrew doesn<span class="s1">&#39;t know what compiler versions ship with your version</span>
</span><span class='line'><span class="s1">of Xcode (5.0.2). Please `brew update` and if that doesn&#39;</span>t <span class="nb">help</span>, file
</span><span class='line'>an issue with the output of <span class="sb">`</span>brew --config<span class="sb">`</span>:
</span><span class='line'>  https://github.com/mxcl/homebrew/issues
</span><span class='line'>
</span><span class='line'>Thanks!
</span><span class='line'>Warning: Your Homebrew is outdated.
</span><span class='line'>You haven<span class="err">&#39;</span>t updated <span class="k">for </span>at least 24 hours, this is a long <span class="nb">time </span>in brewland!
</span><span class='line'>To update Homebrew, run <span class="sb">`</span>brew update<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$ brew doctor</code> has spoken. Time to update Homebrew.</p>

<!--more-->


<h3>Homebrew First. Git Later.</h3>

<p>Updating Homebrew is as simple as <code>$ brew update</code>, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew update
</span><span class='line'>Warning: Could not tap homebrew/dupes/ant over mxcl/master/ant
</span><span class='line'>Warning: Could not tap homebrew/dupes/cvs over mxcl/master/cvs
</span><span class='line'>Error: undefined method <span class="sb">`</span>to_sym<span class="s1">&#39; for nil:NilClass</span>
</span><span class='line'><span class="s1">Please report this bug:</span>
</span><span class='line'><span class="s1">    https://github.com/mxcl/homebrew/wiki/troubleshooting</span>
</span><span class='line'><span class="s1">/usr/local/Library/Homebrew/cmd/update.rb:123:in `report&#39;</span>
</span><span class='line'>/usr/local/Library/Homebrew/cmd/update.rb:121:in <span class="sb">`</span>each_line<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/usr/local/Library/Homebrew/cmd/update.rb:121:in `report&#39;</span>
</span><span class='line'>/usr/local/Library/Homebrew/cmd/update.rb:35:in <span class="sb">`</span>update<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/usr/local/Library/brew.rb:95:in `send&#39;</span>
</span><span class='line'>/usr/local/Library/brew.rb:95
</span><span class='line'>
</span><span class='line'>~/Code/Ruby/apps<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$ brew update</code> choked. Further, Homebrew said that I should report a bug. But something smelled fishy. I decided to try running Homebrew under Ruby 2.0.0 instead of Ruby 1.9.3, the default on my system. Running <a href="http://RayHightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a> makes bouncing between Ruby versions a snap.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>rvm use 2.0.0
</span></code></pre></td></tr></table></div></figure>


<p>That did the trick. <code>$ brew update</code> worked fine, and <code>$ brew doctor</code>
confirmed it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from 69a83176 to 691c72bf.
</span><span class='line'>
</span><span class='line'>…
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>brew doctor
</span><span class='line'>Your system is ready to brew.
</span></code></pre></td></tr></table></div></figure>


<h3>Back to Git</h3>

<p>Now that the yak is well-shaved, we&rsquo;re ready to upgrade Git.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew upgrade <span class="nv">git</span>
</span><span class='line'><span class="o">==</span>&gt; Upgrading 1 outdated package, with result:
</span><span class='line'>git 1.8.5.1
</span><span class='line'><span class="o">==</span>&gt; Upgrading <span class="nv">git</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/git-1.8.5.1.mountain_lion.bottle.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Pouring git-1.8.5.1.mountain_lion.bottle.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>The OS X keychain credential helper has been installed to:
</span><span class='line'>  /usr/local/bin/git-credential-osxkeychain
</span><span class='line'>
</span><span class='line'>The <span class="s1">&#39;contrib&#39;</span> directory has been installed to:
</span><span class='line'>  /usr/local/share/git-core/contrib
</span><span class='line'>
</span><span class='line'>Bash completion has been installed to:
</span><span class='line'>  /usr/local/etc/bash_completion.d
</span><span class='line'>
</span><span class='line'>zsh completion has been installed to:
</span><span class='line'>  /usr/local/share/zsh/site-functions
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>  /usr/local/Cellar/git/1.8.5.1: 1333 files, 30M
</span></code></pre></td></tr></table></div></figure>


<p>Mission accomplished. Git has been upgraded to 1.8.5.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>git --version
</span><span class='line'>git version 1.8.5.1
</span><span class='line'>
</span><span class='line'>~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Why This Matters</h3>

<p>I&rsquo;m posting this article as a note to my future self. Error messages sometimes lie. They don&rsquo;t mean to lie, but an error messsage can only give you its best guess based on what it <em>thinks</em> is happening on your system. It&rsquo;s up to the developer to sniff out the rest of the clues.</p>

<p>After decades in this industry, I&rsquo;m still learning this lesson :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon's Guerrilla Marketing]]></title>
    <link href="http://RayHightower.com/blog/2013/12/02/amazon-guerrilla-marketing/"/>
    <updated>2013-12-02T20:03:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/12/02/amazon-guerrilla-marketing</id>
    <content type="html"><![CDATA[<p>Last night&rsquo;s episode of 60 Minutes featured an interview with Jeff Bezos, CEO of Amazon. The timing was perfect for Amazon. Black Friday was a few days ago. Cyber Monday is today. Online retailers want to be top-of-mind when people are inclined to spend money.</p>

<h3>Amazon&rsquo;s Surprise: Drones</h3>

<p>Bezos unveiled a surprise for interviewer Charlie Rose: <a href="http://www.amazon.com/b?ref_=tsm_1_tw_s_amzn_mx3eqp&amp;node=8037720011">Amazon Prime Air</a>, a service that will deliver most Amazon products in thirty minutes or less using a fleet of octocopter drones.</p>

<!--more-->


<p><span class='caption-wrapper'><img class='caption' src='http://RayHightower.com/images/amazon-prime-air-drone.jpg' width='' height='' alt='Amazon Prime Air. Octocopter drone ready for take-off.' title='Amazon Prime Air. Octocopter drone ready for take-off.'><span class='caption-text'>Amazon Prime Air. Octocopter drone ready for take-off.</span></span></p>

<h3>Guerrilla Marketing</h3>

<p><a href="http://www.gmarketing.com/">Jay Conrad Levinson</a>, author of <em>Guerrilla Marketing</em>, would applaud this move by Amazon. Amazon Prime Air is two years away at the earliest. The flying drones require Federal Aviation Administration (FAA) approval, and that takes time. By unveiling the drones now, before approval, Amazon reaps several benefits:</p>

<ul>
<li>Buzz. Everybody is talking about Amazon on Cyber Monday.</li>
<li>Political influence. Some of the people feeling the buzz are FAA officials.</li>
<li>Continued top-of-mind awareness. Long after Cyber Monday, the excitement of the drone idea will carry on.</li>
</ul>


<p>Congrats to the Amazon team for a well-executed Guerrilla Marketing move.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specialized Knowledge and the Courage to Execute]]></title>
    <link href="http://RayHightower.com/blog/2013/11/30/specialized-knowledge-and-the-courage-to-execute/"/>
    <updated>2013-11-30T10:35:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/30/specialized-knowledge-and-the-courage-to-execute</id>
    <content type="html"><![CDATA[<p>Teenagers are a tough audience. If you have ever spoken to a youth group, you know the challenge: Speak about something important without putting the youth to sleep. Tall order.</p>

<h3>Three Stories</h3>

<p>Boy Scout <a href="http://troop534.org">Troop 534 &ldquo;Hey!&rdquo;</a> asked me to speak at the Troop’s annual reunion breakfast this year.  I approached them with three stories centered around the theme of <em>Specialized Knowledge and the Courage to Execute</em>. What a boring title! But the three stories appealed to the group. Here’s a summary of the first story:</p>

<blockquote><p>A tractor maker takes drastic action when when Enzo Ferrari (creator of the Ferrari sports car) pisses him off.</p></blockquote>

<!--more-->


<p>Here&rsquo;s the 11-minute video:</p>

<center><iframe width="560" height="315" src="http://RayHightower.com//www.youtube.com/embed/tWdFhEI6JiM?rel=0" frameborder="0" allowfullscreen></iframe></center>


<h3>Gratitude</h3>

<p>This event was a big deal for me because I grew up in Troop 534 &ldquo;Hey!&rdquo;, I currently serve as one of the adult leaders, and the breakfast organizers normally invite an outsider to speak. Why listen to a speaker who you see all the time?</p>

<p>I took the speaking invitation as an opportunity to assemble some new material. Thank you scouts, parents, and leaders for having me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awesome_print_motion for RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/11/25/awesome-print-motion-for-rubymotion/"/>
    <updated>2013-11-25T15:08:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/25/awesome-print-motion-for-rubymotion</id>
    <content type="html"><![CDATA[<h3>The Problem</h3>

<p>Let&rsquo;s say we&rsquo;re building a version of Atari&rsquo;s <a href="http://RayHightower.com/blog/2013/02/26/atari-pong-rubymotion-objective-c/">Pong in RubyMotion</a>. We&rsquo;re debugging an issue with the paddles; they don&rsquo;t line up the way we want them to. Time to examine the playing field via the RubyMotion console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pong-rm <span class="nv">$ </span>rake
</span></code></pre></td></tr></table></div></figure>


<p>Mouse over the playing field and <code>Command-click</code> to grab the entire playing field object in the RubyMotion console. Confirm that you grabbed the object by typing <code>self</code> at the console prompt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0, [[0.0, 0.0], ...)&gt; self</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0, [[0.0, 0.0], [480.0, 320.0]]), child of UIView(#c876920)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, to see what objects are on the playing field, use
<code>self.subviews</code> to show the subviews array of the current object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0, [[0.0, 0.0], ...)&gt; self.subviews</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d82430, [[357.0, 175.0], [50.0, 50.0]]), child of</span>
</span><span class='line'><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0), PaddleView(#9d82580, [[410.0, 190.0], [20.0, 100.0]]),</span>
</span><span class='line'><span class="n">child</span> <span class="n">of</span> <span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0), PaddleView(#9d82970, [[10.0, 190.0], [20.0,</span>
</span><span class='line'><span class="mi">100</span><span class="o">.</span><span class="mi">0</span><span class="o">]]</span><span class="p">),</span> <span class="n">child</span> <span class="n">of</span> <span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0), ScoreLabel(#9d82a80, [[110.0, 9.0],</span>
</span><span class='line'><span class="o">[</span><span class="mi">20</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">42</span><span class="o">.</span><span class="mi">0</span><span class="o">]]</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">),</span> <span class="n">child</span> <span class="n">of</span> <span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0),</span>
</span><span class='line'><span class="no">ScoreLabel</span><span class="p">(</span><span class="c1">#9d83c90, [[350.0, 9.0], [20.0, 42.0]], text: &quot;0&quot;), child of</span>
</span><span class='line'><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0)]</span>
</span><span class='line'><span class="p">(</span><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0, [[0.0, 0.0], ...)&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This blob of text is difficult for the human brain to parse. Now, let&rsquo;s try it with the <code>awesome_print_motion</code> gem.</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0, [[0.0, 0.0], ...)&gt; ap(self.subviews)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="no">UIView</span><span class="p">(</span><span class="c1">#9d82430, [[308.0, 118.0], [50.0, 50.0]]), child of UIView(#9d820c0),</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="no">PaddleView</span><span class="p">(</span><span class="c1">#9d82580, [[410.0, 190.0], [20.0, 100.0]]), child of UIView(#9d820c0),</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="no">PaddleView</span><span class="p">(</span><span class="c1">#9d82970, [[10.0, 190.0], [20.0, 100.0]]), child of UIView(#9d820c0),</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="no">ScoreLabel</span><span class="p">(</span><span class="c1">#9d82a80, [[110.0, 9.0], [39.0, 42.0]], text: &quot;61&quot;), child of UIView(#9d820c0),</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="no">ScoreLabel</span><span class="p">(</span><span class="c1">#9d83c90, [[350.0, 9.0], [20.0, 42.0]], text: &quot;0&quot;), child of UIView(#9d820c0)</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="p">(</span><span class="no">UIView</span><span class="p">(</span><span class="c1">#9d820c0, [[0.0, 0.0], ...)&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much easier to read. The structure of the <code>subviews</code> array is clear. Each element of the array has an easy-to-read index. Debugging time is reduced.</p>

<h3>How to Install awesome_print_motion</h3>

<p>RubyMotion uses bundler. So we start by refering to <code>awesome_print_motion</code> in our gemfile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;awesome_print_motion&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the app&rsquo;s <code>Rakefile</code>, there are two possible ways to proceed. The preferred way is to use the following lines to tell the app to require every gem mentioned in Bundler&rsquo;s Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The older way is to manually add a <code>require</code> statement to the Rakefile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ap&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I prefer the newer way because it automatically
requires all of the gems mentioned in the <code>Gemfile</code>. The odds of a
typo-induced error are reduced.</p>

<h3>How to Use awesome_print_motion</h3>

<p>To use the new gem, start the app and explore away. Any time you want to
run output through the <code>awesome_print_motion</code> gem, send the code as a
parameter to the <code>ap</code> method like so&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">ap</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">subviews</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and the output will be easier to read.</p>

<h3>Acknowledgements</h3>

<p>Thank you <a href="http://www.dvorkin.net/">Michael Dvorkin</a> for adding RubyMotion support to your <a href="http://rubygems.org/gems/awesome_print">awesome_print</a> gem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion to Build Something Useful]]></title>
    <link href="http://RayHightower.com/blog/2013/11/23/using-rubymotion-to-build-something-useful/"/>
    <updated>2013-11-23T14:11:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/23/using-rubymotion-to-build-something-useful</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Chicago-RubyMotion/">Chicago RubyMotion User Group</a> held its inaugural meeting this week. Thank you <a href="http://twitter.com/dastels">Dave Astels</a> for organizing the group and for asking me to present. Thanks also to <a href="http://devbootcamp.com">Dev Bootcamp</a> for hosting the event.</p>

<p>Slides are embedded here:</p>

<center><script async class="speakerdeck-embed" data-id="f0c21e7036e10131765f62eb06398856" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<!--more-->


<h3>Doing RubyMotion in Chicago? Be There!</h3>

<p>If you&rsquo;re using RubyMotion and you&rsquo;re located in the Chicago area, check out the <a href="http://www.meetup.com/Chicago-RubyMotion/">Chicago RubyMotion</a> group. The group attracts devs who are running into the same challenges as you. Devs who work with other devs tend to learn more over time.</p>

<p>See you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X and RubyMotion, Finishing Up]]></title>
    <link href="http://RayHightower.com/blog/2013/11/11/os-x-and-rubymotion-finishing-up/"/>
    <updated>2013-11-11T19:03:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/11/os-x-and-rubymotion-finishing-up</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/show-package-contents.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
There is something I neglected to cover in a previous blog post, <a href="http://RayHightower.com/blog/2013/11/01/building-an-os-x-app-with-rubymotion/">Building an OS X App With RubyMotion</a>. Once you&rsquo;ve written the OS X app, where do you find the executable, and how do you add it to the <code>Applications</code> folder on the Mac?</p>

<p>Long-time Mac enthusiasts may already know how to do this. The information is included here for completeness.</p>

<h3>Find, Drag, and Drop</h3>

<p>First thing to note: A Mac app named [random-app].app is actually a directory, even though it appears to be a file when viewed in the <code>Applications</code> folder. If you&rsquo;re curious, right-click on any app in the <code>Applications</code> folder and choose <code>Show Package Contents</code> from the speed menu.</p>

<!--more-->


<p>After compilation, RubyMotion puts all of the executables in the app&rsquo;s <code>build/</code> directory. Using Finder, drag the folder named <code>[your-app-name].app</code> into the <code>Applications</code> folder.</p>

<p>Or, if you prefer the command line…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="o">[</span>root-directory-of-your-app<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>cp build/MacOSX-10.8-Development/<span class="o">[</span>your-app-name<span class="o">]</span>.app /Applications
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&rsquo;t really matter whether we copy the file or move it.  RubyMotion creates a new one with every build, when we type <code>rake</code>.</p>

<h3>Launch at Login</h3>

<p>I want the EjectDisks utility to be always available, so it would be good to have it launch automatically at login. That behavior is managed in the <code>Users and Groups</code> preference pane, shown below:</p>

<p><span class='caption-wrapper'><img class='caption' src='http://RayHightower.com/images/launch-at-login.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<p>Click the <code>+</code> sign, navigate to the app you want to launch at login time (in this case, EjectDisks) and select it. Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Portable Hack for Parallella]]></title>
    <link href="http://RayHightower.com/blog/2013/11/10/a-portable-hack-for-parallella/"/>
    <updated>2013-11-10T23:05:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/10/a-portable-hack-for-parallella</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper left'><img class='caption' src='http://RayHightower.com/images/parallella-portable.png' width='' height='' alt='Portability for Parallella-sized devices.' title='Portability for Parallella-sized devices.'><span class='caption-text'>Portability for Parallella-sized devices.</span></span>
<a href="http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">Beaglebone Black</a>, <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, and <a href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a> are three small, powerful Linux-based computers. But in order to make these devices truly portable, we need a way to carry a monitor and keyboard along. This article describes one hack that works.</p>

<h3>Inspiration in a Suitcase</h3>

<p>The HP 5036 Microprocessor Lab gave me my first exposure to assembler language. I was eighteen, working my first software internship, and loving every minute of it. When I devised ways to complete my <em>regular work</em> faster than management expected, I had some time on my hands. So I spent time learning assembler with the HP 5036.</p>

<!--more-->


<p><span class='caption-wrapper'><img class='caption' src='http://RayHightower.com/images/hp-5036.png' width='' height='' alt='HP 5036 Microprocessor Lab' title='HP 5036 Microprocessor Lab'><span class='caption-text'>HP 5036 Microprocessor Lab</span></span></p>

<p>The entire 5036 fits in a suitcase&hellip; how cool is that! Here&rsquo;s how the 5036 works:</p>

<ol>
<li>Start by writing assembler-level code by hand on paper.</li>
<li>Grab the reference book for the microprocessor running on the
board, Intel 8080.</li>
<li>For each assembler-level command, find the corresponding 2-digit
hexidecimal operation code.</li>
<li>Key the op code into the 5036 by hand.</li>
<li>Run the program.</li>
</ol>


<p>Working with the 5036 was addictive in a positive way. In a subsequent job, where I wrote assembler to drive hardware devices, I was ready.</p>

<h3>Portability Needed</h3>

<p>Fast forward a few decades. We now have the Raspberry Pi, BeagleBone Black, and Parallella. Wonderful devices with one flaw in common: No portability. That&rsquo;s when I had a flashback to my days with the 5036.</p>

<p>I bought a $35 technician box from Home Depot and I ripped out the insides. Micro Center had 720p LCD monitors on sale for $90, so I bought one of those. I didn&rsquo;t want to spend the extra bucks for a 1080p LCD because you never know how something like this might work out! Finally, I topped everything off with a $25 keyboard/trackpad combo from Amazon.  The result appears in the photo at the top of this article. Special thanks to Ericka [last name unknown] from Home Depot who gave me tons of ideas on how to securely fasten the monitor to the case.</p>

<h3>Why?</h3>

<p>Why did I spend the time and money to assemble this kit? It&rsquo;s all about learning. Devs learn more when we interact with other devs &ndash; people who are learning some of the same things that we&rsquo;re wrestling with. And sometimes the things we need to learn are too new for books.</p>

<p>By carrying my Raspberry Pi, BeagleBone Black, and Parallella with me in a portable unit, I can share my experiences with other devs and learn more in the process. Everybody wins when that happens.</p>

<h3>Thanks SCNA!</h3>

<p>The organizers of <a href="http://scna.softwarecraftsmanship.org/">Software Craftsmanship North America (SCNA)</a> gave me the opportunity to present this story as a lightning talk at the conference. Slides are here:</p>

<center><script async class="speakerdeck-embed" data-id="b3558fd02cac0131cfc62a9baba32394" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>Thank you SCNA! As I shared with the other devs at SCNA, I will gladly post my mistakes and <em>gotchas</em> here for people who want to build a unit like this. Let&rsquo;s build!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an OS X App With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/11/01/building-an-os-x-app-with-rubymotion/"/>
    <updated>2013-11-01T00:15:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/11/01/building-an-os-x-app-with-rubymotion</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/time-machine-backup-disks.png' width='' height='' alt='Redundancy rocks.' title='Redundancy rocks.'><span class='caption-text'>Redundancy rocks.</span></span>
<a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>&rsquo;s OS X support enabled me to solve a small problem yesterday.  Here&rsquo;s the story.</p>

<h3>Background on Backup</h3>

<p>No matter how much money we spend on computers, the data we create is worth more. The best data protection employs several levels of redundancy.</p>

<p>My backup system starts with Apple&rsquo;s <a href="http://www.apple.com/findouthow/mac/#timemachinebasics">Time Machine</a>, which handles first level backups painlessly in the background. Time machine is even more effective when multiple disks are used. I like to combine that with online solutions. Redundancy is a good thing.</p>

<p>USB-attached drives work great with Time Machine. I found that Time Machine was inconsistent over WiFi, and when it failed, troubleshooting took too much time. That was a few years ago and things have probably improved since then. I&rsquo;ve never had to troubleshoot a USB-attached Time Machine drive. USB just works. Except when it doesn&rsquo;t. And that&rsquo;s where RubyMotion proved helpful.</p>

<!--more-->


<h3>Disconnecting USB in a Hurry</h3>

<p>My only problem with USB-attached drives comes when I need to leave my desk in a hurry. You may have seen this message before:</p>

<p><span class='caption-wrapper'><img class='caption' src='http://RayHightower.com/images/disk-not-ejected-properly.png' width='' height='' alt='In a hurry to eject?' title='In a hurry to eject?'><span class='caption-text'>In a hurry to eject?</span></span></p>

<p>All three of my USB drives are attached through a single USB hub. Yanking the cable while running for a meeting is… bad! Forgetting to eject even one of the USB drives is also bad.</p>

<p>I solved the problem about a year ago by writing a command line tool that ejects all three drives with one double-click of an icon. Yesterday I deciced to improve my command line tool with RubyMotion.</p>

<h3>Ejecting in a Hurry</h3>

<p><code>EjectDisks</code> is a simple OS X program written with the RubyMotion toolchain for Mac OS X. It uses the <code>osx-status-bar-app-template</code> gem created by <a href="https://github.com/kickcode/osx-status-bar-app-template">Elliott Draper</a>. Here&rsquo;s a 10-second demo.</p>

<center><iframe name="eject-disks-osx" src="http://RayHightower.com//player.vimeo.com/video/78349497" width="560" height="315" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<h3>The Code</h3>

<p>The latest version of the EjectDisk code is on <a href="https://github.com/RayHightower/EjectDisks">GitHub</a>. The <code>app_delegate.rb</code> file appears below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:status_menu</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">(</span><span class="n">notification</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@app_name</span> <span class="o">=</span> <span class="no">NSBundle</span><span class="o">.</span><span class="n">mainBundle</span><span class="o">.</span><span class="n">infoDictionary</span><span class="o">[</span><span class="s1">&#39;CFBundleDisplayName&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@status_menu</span> <span class="o">=</span> <span class="no">NSMenu</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@status_item</span> <span class="o">=</span> <span class="no">NSStatusBar</span><span class="o">.</span><span class="n">systemStatusBar</span><span class="o">.</span><span class="n">statusItemWithLength</span><span class="p">(</span><span class="no">NSVariableStatusItemLength</span><span class="p">)</span><span class="o">.</span><span class="n">init</span>
</span><span class='line'>    <span class="vi">@status_item</span><span class="o">.</span><span class="n">setMenu</span><span class="p">(</span><span class="vi">@status_menu</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_item</span><span class="o">.</span><span class="n">setHighlightMode</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_item</span><span class="o">.</span><span class="n">setTitle</span><span class="p">(</span><span class="vi">@app_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;About </span><span class="si">#{</span><span class="vi">@app_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s1">&#39;orderFrontStandardAboutPanel:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;Custom Action&quot;</span><span class="p">,</span> <span class="s1">&#39;pressAction&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;Eject Three Disks&quot;</span><span class="p">,</span> <span class="s1">&#39;ejectThreeDisks&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;Say Something&quot;</span><span class="p">,</span> <span class="s1">&#39;sayDroid&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;Sing&quot;</span><span class="p">,</span> <span class="s1">&#39;singSomething&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;Greetings&quot;</span><span class="p">,</span> <span class="s1">&#39;greetings&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@status_menu</span><span class="o">.</span><span class="n">addItem</span> <span class="n">createMenuItem</span><span class="p">(</span><span class="s2">&quot;Quit&quot;</span><span class="p">,</span> <span class="s1">&#39;terminate:&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">createMenuItem</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
</span><span class='line'>    <span class="no">NSMenuItem</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">initWithTitle</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="n">action</span><span class="p">,</span> <span class="ss">keyEquivalent</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pressAction</span>
</span><span class='line'>    <span class="n">alert</span> <span class="o">=</span> <span class="no">NSAlert</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">init</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">setMessageText</span> <span class="s2">&quot;Action triggered from status bar menu&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">addButtonWithTitle</span> <span class="s2">&quot;OK&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">runModal</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sayDroid</span>
</span><span class='line'>    <span class="sx">%x(say -v cello droid)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">singSomething</span>
</span><span class='line'>    <span class="sx">%x(say -v cello da da da da da da da da da da da da da da da da da da da da da da da da da da)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greetings</span>
</span><span class='line'>    <span class="sx">%x(say -v cello Greetings to the members of Chippewa Valley Code Camp &amp;)</span>
</span><span class='line'>    <span class="n">alert</span> <span class="o">=</span> <span class="no">NSAlert</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">init</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">setMessageText</span> <span class="s2">&quot;Greetings to the members of Chippewa Valley Code Camp!&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">addButtonWithTitle</span> <span class="s2">&quot;OK&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">runModal</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ejectThreeDisks</span>
</span><span class='line'>    <span class="n">alert</span> <span class="o">=</span> <span class="no">NSAlert</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">init</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="sx">%x(/usr/sbin/diskutil eject SiiGBlack)</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">+=</span> <span class="sx">%x(/usr/sbin/diskutil eject Ultra3TB)</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">+=</span> <span class="sx">%x(/usr/sbin/diskutil eject WDSilver)</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">setMessageText</span> <span class="n">response</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">addButtonWithTitle</span> <span class="s2">&quot;OK&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">runModal</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Next Steps</h3>

<p>Not everything in the EjectDisks tool is business-related. Do we really need to include a greeting to the members of the <a href="http://chippewavalleycodecamp.com/">Chippewa Valley Code Camp</a>?  Yes, we do!</p>

<p>On the serious side, the app should handle disk ejection as a background process. It&rsquo;s not good to tie up the system for a simple task. Look for a forked process in a future version of the app.</p>

<p><em>Update: This article should have included instructions on how to run the executable on any Mac OS X system without having RubyMotion installed. The omission is corrected in a later blog post, <a href="http://RayHightower.com/blog/2013/11/11/os-x-and-rubymotion-finishing-up/">OS X and RubyMotion, Finishing Up</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[:TOhtml - Using Vim Code Snippets in Keynote Presentations]]></title>
    <link href="http://RayHightower.com/blog/2013/10/31/tohtml-using-vim-code-snippets-in-keynote-presentations/"/>
    <updated>2013-10-31T16:13:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/10/31/tohtml-using-vim-code-snippets-in-keynote-presentations</id>
    <content type="html"><![CDATA[<p>While finishing my presentation for the upcoming <a href="http://chippewavalleycodecamp.com/">Chippewa Valley Code Camp</a>, I decided to add some blocks of code to my slides. I forgot the name of the tool I used for my last slide deck, and it took several minutes of Google-fu to find it.</p>

<p>Google led me back to <code>:TOhtml</code>. Whew! I&rsquo;m documenting <code>:TOhtml</code> here to avoid wasting time with a future search.</p>

<!--more-->


<h3>Start With a Block of Code</h3>

<p>Fire up Vim and drop the block of code you want to convert into a new Vim buffer. In this example, I&rsquo;ve created a sample <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> OS X app, and I want to show the contents of the Rakefile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;/Library/RubyMotion/lib&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;motion/project/template/osx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Use `rake config&#39; to see complete project settings.</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;EjectDisks&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">info_plist</span><span class="o">[</span><span class="s1">&#39;LSUIElement&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, visually select the lines you want to convert. You can do this with shift-V, or with the (gasp!) mouse. Or if you want to convert the entire file, enter <code>:TOhtml</code> in the command area. Vim will convert the highlighted text into HTML in a new buffer. Here&rsquo;s the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>~/Code/Ruby/RubyMotion/EjectDisks/Rakefile.html<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;Generator&quot;</span> <span class="na">content=</span><span class="s">&quot;Vim/7.4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;plugin-version&quot;</span> <span class="na">content=</span><span class="s">&quot;vim7.4_v1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;syntax&quot;</span> <span class="na">content=</span><span class="s">&quot;ruby&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;settings&quot;</span> <span class="na">content=</span><span class="s">&quot;number_lines,use_css,no_foldcolumn,expand_tabs,line_ids,prevent_copy=&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;colorscheme&quot;</span> <span class="na">content=</span><span class="s">&quot;darkspectrum&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="nt">--</span>
</span><span class='line'><span class="nt">pre</span> <span class="p">{</span> <span class="k">font-family</span><span class="o">:</span> <span class="k">monospace</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#2a2a2a</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span> <span class="k">font-family</span><span class="o">:</span> <span class="k">monospace</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span> <span class="m">#efefef</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#2a2a2a</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="o">*</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.String</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#fce94f</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.Statement</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#ffffff</span><span class="p">;</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.PreProc</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#ffffff</span><span class="p">;</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.LineNr</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#535353</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#202020</span><span class="p">;</span> <span class="k">padding-bottom</span><span class="o">:</span> <span class="m">1px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.Comment</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#8a8a8a</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.Type</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#8ae234</span><span class="p">;</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.Special</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#e9b96e</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.Identifier</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#729fcf</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.Constant</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="m">#ef5939</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">--</span><span class="o">&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* function to open any folds containing a jumped-to line before jumping to it */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">JumpToLine</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lineNum</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">lineNum</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">lineNum</span> <span class="o">=</span> <span class="nx">lineNum</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* strip off &#39;#&#39; */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">lineNum</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;L&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">lineNum</span> <span class="o">=</span> <span class="s1">&#39;L&#39;</span><span class="o">+</span><span class="nx">lineNum</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">lineElem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">lineNum</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/* Always jump to new location even if the line was hidden inside a fold, or</span>
</span><span class='line'><span class="cm">   * we corrected the raw number to a line ID.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">lineElem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">lineElem</span><span class="p">.</span><span class="nx">scrollIntoView</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;onhashchange&#39;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">onhashchange</span> <span class="o">=</span> <span class="nx">JumpToLine</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">--&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">&#39;JumpToLine();&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;pre</span> <span class="na">id=</span><span class="s">&#39;vimCodeElement&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L1&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 1 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Comment&quot;</span><span class="nt">&gt;</span># -*- coding: utf-8 -*-<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L2&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 2 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Identifier&quot;</span><span class="nt">&gt;</span>$:<span class="nt">&lt;/span&gt;</span>.unshift(<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;quot;</span><span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>/Library/RubyMotion/lib<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;quot;</span><span class="nt">&lt;/span&gt;</span>)
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L3&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 3 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;PreProc&quot;</span><span class="nt">&gt;</span>require<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>motion/project/template/osx<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L4&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 4 <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L5&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 5 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Statement&quot;</span><span class="nt">&gt;</span>begin<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L6&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 6 <span class="nt">&lt;/span&gt;</span>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;PreProc&quot;</span><span class="nt">&gt;</span>require<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>bundler<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L7&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 7 <span class="nt">&lt;/span&gt;</span>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>Bundler<span class="nt">&lt;/span&gt;</span>.require
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L8&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 8 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Statement&quot;</span><span class="nt">&gt;</span>rescue<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>LoadError<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L9&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span> 9 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Statement&quot;</span><span class="nt">&gt;</span>end<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L10&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span>10 <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L11&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span>11 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>Motion<span class="nt">&lt;/span&gt;</span>::<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>Project<span class="nt">&lt;/span&gt;</span>::<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>App<span class="nt">&lt;/span&gt;</span>.<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Statement&quot;</span><span class="nt">&gt;</span>setup<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Statement&quot;</span><span class="nt">&gt;</span>do<span class="nt">&lt;/span&gt;</span> |<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Identifier&quot;</span><span class="nt">&gt;</span>app<span class="nt">&lt;/span&gt;</span>|
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L12&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span>12 <span class="nt">&lt;/span&gt;</span>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Comment&quot;</span><span class="nt">&gt;</span># Use `rake config&#39; to see complete project settings.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L13&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span>13 <span class="nt">&lt;/span&gt;</span>  app.name = <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>EjectDisks<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L14&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span>14 <span class="nt">&lt;/span&gt;</span>  app.info_plist[<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;String&quot;</span><span class="nt">&gt;</span>LSUIElement<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Special&quot;</span><span class="nt">&gt;</span>&#39;<span class="nt">&lt;/span&gt;</span>] = <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;Constant&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;L15&quot;</span> <span class="na">class=</span><span class="s">&quot;LineNr&quot;</span><span class="nt">&gt;</span>15 <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;Statement&quot;</span><span class="nt">&gt;</span>end<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/pre&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'><span class="c">&lt;!-- vim: set foldmethod=manual : --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the new buffer as <code>~/Desktop/convertedstuff.html</code> or any other file name that you choose. In this case, I chose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>:w ~/Desktop/convertedrakefile.html
</span></code></pre></td></tr></table></div></figure>


<p>Open the converted file in a web browser.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='http://RayHightower.com/images/rakefile-browser.png' width='' height='' alt='Rakefile in Chrome.' title='Rakefile in Chrome.'><span class='caption-text'>Rakefile in Chrome.</span></span></p>

<p>Copy and paste the text from the browser into Keynote.</p>

<h3>Washed Out Code?</h3>

<p>If the code looks washed out when you paste it into Keynote, you have a few alternatives:</p>

<ul>
<li>Start with a different theme in Vim at the beginning, or</li>
<li>Darken/lighten the background in Keynote by using the Keynote inspector.</li>
</ul>


<h3>The Finished Slide</h3>

<p>Here&rsquo;s what the finished product looks like. All the clarity of syntax-highlighted text. You can even adjust font size at will using the Keynote inspector. All set for the presentation.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='http://RayHightower.com/images/osxfinished.png' width='' height='' alt='The final snippet, in Keynote.' title='The final snippet, in Keynote.'><span class='caption-text'>The final snippet, in Keynote.</span></span></p>

<h3>Easier Way?</h3>

<p>Can this process be simplified? If you know the answer, feel free to mention it in the comments below. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Youth Program Recap]]></title>
    <link href="http://RayHightower.com/blog/2013/10/30/youth-program-recap-windycityrails-2013/"/>
    <updated>2013-10-30T17:22:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/10/30/youth-program-recap-windycityrails-2013</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/arduino-youth-program.png' width='' height='' alt='Arduino' title='Arduino'><span class='caption-text'>Arduino</span></span>
Planet Earth is facing a shortage of people who make things. People like scientists, software developers, architects, and  engineers. People who use their brains and hands to make greatness happen.</p>

<p>To increase the world&rsquo;s supply of problem solvers, the organizers of <a href="http://windycityrails.org">WindyCityRails</a> partnered with a group of energetic college students, the founders of <a href="http://hackthemonkey.com">Monkey Bars</a>. The result: Together, we launched the first WindyCityRails Youth Program featuring the Arduino microcontroller.</p>

<!--more-->


<h3>Video Summary</h3>

<p>Here&rsquo;s the launch video:</p>

<center><iframe src="http://RayHightower.com//player.vimeo.com/video/74022351" width="500" height="281" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<h3>Results</h3>

<p>The youth who participated in the program were engaged and enthusiastic. The Monkey Bars team introduced the youth to the Arduino micro-controller and related hardware.</p>

<p>At the end of the program, parents arrived to take their kids home, and the kids were reluctant to leave! They were absorbed in their Arduino projects. Even better, friendships formed between the youth participants.</p>

<p>It&rsquo;s exciting to think about the new companies that may have been launched that day!</p>

<h3>Next Year</h3>

<p>Planning for next year&rsquo;s WindyCityRails, including the Youth Program, is currently underway. If there are things you&rsquo;d like to see in next year&rsquo;s program, feel free to <a href="http://windycityrails.org/contact">contact the WindyCityRails organizers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Can Build Things]]></title>
    <link href="http://RayHightower.com/blog/2013/09/02/you-can-build-things/"/>
    <updated>2013-09-02T20:24:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/09/02/you-can-build-things</id>
    <content type="html"><![CDATA[<p>From a video interview with Steve Jobs:</p>

<blockquote><p>When you grow up you tend to get told that the world is the way it is, and your life is just to live your life inside the world. Try not to bash into the walls too much. Try to have a nice family life. Have fun. Save a little money.</p>

<p>That&rsquo;s a very limited life. Life can be much broader once you discover one simple fact.<!--more--></p>

<p>Everything around you that you call life was made up by people who are no smarter than you. And you can change it. You can influence it. You can build other things that other people can use.</p>

<p>Once you learn that, you&rsquo;ll never be the same again.</p></blockquote>

<p>Check out the video:</p>

<center><iframe width="560" height="315" src="http://RayHightower.com//www.youtube.com/embed/GHAJhosbWiM?rel=0" frameborder="0" allowfullscreen></iframe></center>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Madison Ruby 2013]]></title>
    <link href="http://RayHightower.com/blog/2013/08/25/madison-ruby-2013/"/>
    <updated>2013-08-25T01:14:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/08/25/madison-ruby-2013</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/madison-ruby.png' width='' height='' alt='Madison Ruby 2011 T-Shirt Design by Mike Rohde' title='Madison Ruby 2011 T-Shirt Design by Mike Rohde'><span class='caption-text'>Madison Ruby 2011 T-Shirt Design by Mike Rohde</span></span>
<a href="http://madisonruby.com">Madison Ruby</a> 2013 was held this weekend. The conference attracts smart, intellectually curious people who are thirsty to learn more.</p>

<p>By the way, Madison Ruby was a lot of fun, too!</p>

<h3>Speakers: Impressive and Accessible</h3>

<p>First, lets cover the obvious high points so we can focus on those things that make Madison Ruby unique. Organizers <a href="https://twitter.com/jremsikjr">Jim</a> &amp; <a href="https://twitter.com/JenRemsik">Jen Remsik</a> have solidified their reputation for choosing engaging, well-prepared speakers. The Remsik network of speakers includes accomplished developers from around the world. Many are published authors. Some, like <a href="http://madisoncircusspace.com/">Danielle Lee</a> and <a href="https://twitter.com/marteeeen">Martin Atkins</a>, excel in fields outside of software development.</p>

<!--more-->


<p>What the presenters have in common: All are high achievers. All are inspiring. All take time to stick around after their time on stage to interact with attendees. That kind of interaction makes the Madison Ruby community work.</p>

<h3>Community in Madison</h3>

<p>Madison Ruby is unique in the way it brings the local community into the event. Local business and community leaders speak at the conference. The local leaders are enthusiastic about Madison and they engage attendees. One year, a farmer shared her experience growing up in a cheese-producing family business. This year, a biomedical engineering graduate of the University of Wisconsin encouraged the audience to build our creative muscles by having fun. She drove the point home with a hula-hoop demonstration, followed with a <a href="http://madisoncircusspace.com/classes/german-wheel/">German Wheel</a> performance by a colleague.</p>

<p>People from other worlds speaking at a software conference&hellip; it works.</p>

<h3>Meal Time</h3>

<p>Lunch was served by the entire Madison restaurant community. Gift certificates were supplied by Engine Yard, and the certificates were redeemable for meals at local restaurants.  What a wonderful way to put serendipity to work! Attendees who just met formed clusters of lunch parties on a whim. The conversations were rich.</p>

<h3>After-Hours Gatherings</h3>

<p>Thursday night&rsquo;s gathering, <a href="http://hypeharvest.com/">Hype Harvest</a>, had elements of a party but it was so much more. Hype Harvest was held on the roof of the Madison Museum of Modern Art, and it served multiple purposes. First, to raise funds for Nairobi Dev School, founded by <a href="http://www.cnn.com/2013/07/17/tech/teenager-hacker-school-africa-google">Martha Chumo</a>, a 19-year-old software developer in Nairobi, Kenya. Second, to give everyone a taste of the presenters to come. Third, to let the attendees gather, renew old friendships, and begin new ones.</p>

<p>Friday night&rsquo;s party was held at <a href="http://bendyworks.com">Bendyworks</a>. An outdoor concert ran concurrently in the middle of the street next to the office. Bendyworks guests had the best seats around because the second floor office sits right above the musical stage.</p>

<h3>Madison Ruby and My Brother</h3>

<p>As an organizer of WindyCityRails, my relationship with Madison Ruby reminds me of my relationship with my brother, <a href="http://motoringventures.com">Edward Hightower</a>, while we were growing up. Edward and I are one year apart, and we competed aggressively in every way: On the swim team, in the <a href="http://troop534.org">Boy Scouts</a>, in academics&hellip; you name it. Through the competition, we learned to love and respect each other. My brother Edward is one of my closest friends. That doesn&rsquo;t always happen with family!</p>

<p>Madison Ruby competes with WindyCityRails. At the same time, I enjoy the trip to Madison because I get so much from the experience. Congratulations to the Madison Ruby organizer team for running a great event three years in a row. I plan to return next year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Age vs. Ability]]></title>
    <link href="http://RayHightower.com/blog/2013/08/05/age-vs-ability/"/>
    <updated>2013-08-05T06:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/08/05/age-vs-ability</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/Benjamin-Franklin.jpg' width='' height='' alt='Benjamin Franklin: Statesman & Scientist' title='Benjamin Franklin: Statesman & Scientist'><span class='caption-text'>Benjamin Franklin: Statesman &amp; Scientist</span></span>
Age has little to do with ability. Every profession has examples of people who achieve goals even though others consider them <em>too young</em> or <em>too old</em>. People who excel in the face of stereotypes are exciting to watch.</p>

<p><em>The Wall Street Journal</em> listed some examples in a 1980s-era ad for United Technologies Corporation.</p>

<!--more-->


<blockquote><p>It&rsquo;s what you do &ndash; not when you do it.</p>

<ul>
<li>Ted Williams, at age 42, slammed a home run in his last official at bat.</li>
<li>Mickey Mantle, age 20, hit 23 home runs in his first full year in the major leagues.</li>
<li>Golda Meir was 71 when she became Prime Minister of Israel.</li>
<li>William Pitt II was 24 when he became Prime Minister of Great Britain.</li>
<li>George Bernard Shaw was 94 when one of his plays was first produced.</li>
<li>Mozart was just seven when his first composition was published.</li>
<li>Now, how about this? Benjamin Franklin was a newspaper columnist at 16, a framer of The United States Constitution at 81, and a scientist throughout his life.</li>
</ul>


<p>You&rsquo;re never too young or too old if you&rsquo;ve got talent. Let&rsquo;s recognize that age has little to do with ability.</p></blockquote>

<p>Now&hellip; let&rsquo;s get back to work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why We Need STEM]]></title>
    <link href="http://RayHightower.com/blog/2013/07/29/why-we-need-stem/"/>
    <updated>2013-07-29T00:22:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/29/why-we-need-stem</id>
    <content type="html"><![CDATA[<p><a href="http://ignitechi.org">Ignite Chicago</a> is an evening of 5-minute talks presented by speakers who want to inspire others. Each speaker is allowed twenty slides, and the slides advance automatically every fifteen seconds. The Ignite organizers asked me to present <em>Why We Need STEM</em> at <a href="http://1871.com">1871</a>. I&rsquo;ll post the video when it becomes available. For now, check out the slides&hellip;</p>

<!-- more -->


<center><script async class="speakerdeck-embed" data-id="4c328420da3d01301487425a5f060967" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>Thank you Ignite Chicago organizers (<a href="http://www.goteampete.com">Pete Aiello</a> and <a href="http://clairelew.com">Claire Lew</a>) for the invitation and for hosting a great event.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Petascale Tools Workshop 2013]]></title>
    <link href="http://RayHightower.com/blog/2013/07/19/petascale-tools-workshop-2013/"/>
    <updated>2013-07-19T02:12:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/19/petascale-tools-workshop-2013</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.paradyn.org/CSCADS2013/index.html">Petascale Tools Workshop</a> is for computer scientists who create tools that enable apps to run efficiently on the world&rsquo;s fastest supercomputers. Supercomputer performance is measured in petaflops: 10<sup><sup>15</sup></sup> floating point operations per second. That&rsquo;s blazing speed, thousands of times faster than the fastest MacBook Pro.</p>

<!--more-->


<p><a href="http://WisdomGroup.com">WisdomGroup</a> was invited to attend the workshop because we have a client client, <a href="http://www.wisdomgroup.com/case-studies/texas-am-university/">Texas A &amp; M University</a>, operating in the high performance computing (HPC) space. As the only non-PhD in the room, I was given a chance to exercise Pat Metheny&rsquo;s <a href="http://RayHightower.com/blog/2013/07/17/pat-metheny-be-the-worst/">be-the-worst</a> philosophy in the extreme. The result: I learned things that will help WisdomGroup to deliver better solutions for our clients, especially the TAMU team.</p>

<h3>One Megawatt = $1,000,000.00</h3>

<p>As with other disciplines of engineering, supercomputer design is all about managing trade-offs. If you increase the clock speed, how will that affect your electrical bill? If you increase the size of the cache, how much more will you spend on hardware?</p>

<p>Every Petascale Workshop presenter highlighted the toughest constraint: The cost of electrical power. High performance computers gulp electricity. The wattage numbers were all very abstract to me until one presenter layed out a direct one-to-one correspondence between electricity and money. <em>One megawatt of power used over the course of a year costs one million dollars.</em></p>

<p>Express a constraint in terms of money, and the abstractions melt away.</p>

<p>The debate between the scientists was vigorous yet respectful. After hearing the 1-to-1 rule of thumb, one audience member remarked, &ldquo;I know how to genererate a megawatt for only $865,000.&rdquo; He then outlined his solution, a combination of coal, fossil fuels, and natural gas that would achieve the reduction. The more important point: Electricity is expensive.</p>

<h3>Re-Framing the Power Problem</h3>

<p>There is another way to look at the power problem. Consider it from the perspective of performance, not power. Here&rsquo;s how one presenter put it: No matter where we build a supercomputer, we will only have a limited amount of power. Let&rsquo;s look at the maximum available power as a constraint and go from there.</p>

<p>Rubyists are familiar with the saying &#34;<a href="http://gettingreal.37signals.com/ch03_Embrace_Constraints.php">constraints are liberating</a>&#34;, popularized by 37signals. Since power limitations are real constraints, our next step is to figure out how to extract the best results allowed within the constraints.</p>

<h3>Top Five</h3>

<p>Supercomputer scientists are as competitive as olympic athletes. As of June 2013, the five fastest machines in the world are:</p>

<center>
<table class="table table-condensed">
    <thead>
    <tr>
        <th width="50">Rank</th>
        <th width="75">Site</th>
        <th width="100" style="text-align: right;">Cores</th>
        <th width="75" style="text-align: right;">Rmax (PF/s)</th>
        <th width="75" style="text-align: right;">Power (MW)</th>
    </tr>
    </thead>

    <tr class="sublist odd">
        <td><span class="badge">1</span></td>
        <td>China</td>
        <td style="text-align: right;">3,120,000</td>
        <td style="text-align: right;">33.9</td>
        <td style="text-align: right;">17.8</td>
    </tr>

    <tr class="sublist even">
        <td><span class="badge">2</span></td>
        <td>USA</td>
        <td style="text-align: right;">560,640</td>
        <td style="text-align: right;">17.5</td>
        <td style="text-align: right;">8.2</td>
    </tr>

    <tr class="sublist odd">
        <td><span class="badge">3</span></td>
        <td>USA</td>
        <td style="text-align: right;">1,572,864</td>
        <td style="text-align: right;">17.2</td>
        <td style="text-align: right;">7.9</td>
    </tr>

    <tr class="sublist even">
        <td><span class="badge">4</span></td>
        <td>Japan</td>
        <td style="text-align: right;">705,024</td>
        <td style="text-align: right;">10.5</td>
        <td style="text-align: right;">12.6</td>
    </tr>

    <tr class="sublist odd">
        <td><span class="badge">5</span></td>
        <td>USA</td>
        <td style="text-align: right;">786,432</td>
        <td style="text-align: right;">8.6</td>
        <td style="text-align: right;">3.9</td>
    </tr>
</table>
</center>


<p>&nbsp;<br/>
Scientists determine Rmax by running the <a href="http://en.wikipedia.org/wiki/LINPACK_benchmarks">LINPACK</a> benchmark. <a href="http://top500.org">Top500.org</a> has more information about the fastest
machines.</p>

<h3>Digging Deeper</h3>

<p>Some of the biggest performance gains can be realized through more efficient software. Most supercomputers run some distribution of Linux. Some teams of researchers focus on ways to optimize the Linux kernel for supercomputing.</p>

<p>Optimization is not a one-size-fits all process. The scientists need to consder the type of applications being run, percentage of time spent on I/O, efficiency of algorithms, and so on. Each potential optimization choice is like a node on an ever expanding tree. The choices are endless, and the seasoned expert will know where to focus for the best results.</p>

<p>In the Ruby world, we might use tools like <a href="http://newrelic.com">New Relic</a> or <a href="http://codeclimate.com">Code Climate</a> to identify hot spots in our code, places where re-factoring can reduce CPU utilization or improve I/O. HPC tools tend to be highly customizable because the users are intimately familar with their own hardware. During a lunch conversation, one team of scientists shared how they suspected a defect in hardware counters used to measure the behavior of a supercomputer under study. The instincts of the scientists proved correct, and the errant counters were replaced.</p>

<h3>Conclusion</h3>

<p>When smart people challenge each other to grow, great things happen. The scientists at the Petascale Tools Workshop were clearly helping each other to grow. The next few years in supercomputing will be exciting!</p>

<h3>Acknowledgements</h3>

<p>I am grateful to the organizers of the Petascale Tools Workshop for hosting the event, and to the TAMU team for extending the invitation. Thank you both!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pat Metheny: Be the Worst]]></title>
    <link href="http://RayHightower.com/blog/2013/07/17/pat-metheny-be-the-worst/"/>
    <updated>2013-07-17T07:58:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/17/pat-metheny-be-the-worst</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/PatMethenyGroup.jpg" width="400" height="400"
align="right" alt="Pat Metheny: Be the Worst" title="Pat Metheny: Be the Worst" >
Pat Metheny encourages musicians to &ldquo;be the worst&rdquo; in whatever band they choose to join. Of course, he does not mean to play poorly.</p>

<p>Rather, he encourages us to surround ourselves with the best musicians we can find so that we can learn from them. The concept is explored further in the book <a href="http://RayHightower.com/blog/2013/02/17/apprenticeship-patterns-by-dave-h-hoover-and-adewale-oshineye/">Apprenticeship Patterns</a> by Dave Hoover and Ade Oshineye.</p>

<p>I was reminded to be-the-worst while attending a conference this week, an event where I was surrounded by computer scientists with much more experience than me. I learned a lot his week. I will share details in a future post.</p>

<p>In the meantime, I invite you to join me in a Pat Metheny learning exercise of your choice. Be the worst!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM Saves the Day for Octopress]]></title>
    <link href="http://RayHightower.com/blog/2013/07/15/rvm-saves-the-day-for-octopress/"/>
    <updated>2013-07-15T14:29:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/15/rvm-saves-the-day-for-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org">Octopress</a> is a lean blogging engine that happens to power <a href="http://rayhightower.com">RayHightower.com</a>. Earlier today, after a quick update to the blog, I encountered the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'>/Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/bundler-1.2.4/lib/bundler/rubygems_integration.rb:187:in <span class="sb">`</span>stub_source_index170<span class="s1">&#39;: uninitialized constant Gem::SourceIndex (NameError)</span>
</span><span class='line'><span class="s1">     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/bundler-1.2.4/lib/bundler/rubygems_integration.rb:353:in `stub_rubygems&#39;</span>
</span><span class='line'>     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/bundler-1.2.4/lib/bundler/rubygems_integration.rb:250:in <span class="sb">`</span>replace_entrypoints<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/bundler-1.2.4/lib/bundler/runtime.rb:14:in `setup&#39;</span>
</span><span class='line'>     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/bundler-1.2.4/lib/bundler.rb:116:in <span class="sb">`</span>setup<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/rubygems-bundler-1.1.0/lib/rubygems-bundler/noexec.rb:77:in `setup&#39;</span>
</span><span class='line'>     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@global/gems/rubygems-bundler-1.1.0/lib/rubygems-bundler/noexec.rb:89:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     from /Users/rth/.rvm/rubies/ruby-1.9.3-p448/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:116:in `require&#39;</span>
</span><span class='line'>     from /Users/rth/.rvm/rubies/ruby-1.9.3-p448/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:116:in <span class="sb">`</span>rescue in require<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">     from /Users/rth/.rvm/rubies/ruby-1.9.3-p448/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:122:in `require&#39;</span>
</span><span class='line'>     from /Users/rth/.rvm/gems/ruby-1.9.3-p448@octopress/bin/ruby_noexec_wrapper:9:in <span class="sb">`</span>&lt;main&gt;<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not good. What happened?</p>

<!--more-->


<h3>The Problem</h3>

<p>From the error message, it appeared that my current version of Bundler was incompatible with Octopress. Googling for the error message (a favorite trick) was unhelpful. Had to try a different line of attack.</p>

<h3>The Solution: Roll Back</h3>

<p>Fortunately, I use <a href="http://rayhightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a>. Currently installed versions of Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   jruby-1.7.3 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>   macruby-0.12 <span class="o">[</span> i686 <span class="o">]</span>
</span><span class='line'>   ruby-1.8.7-p334 <span class="o">[</span> i686 <span class="o">]</span>
</span><span class='line'>   ruby-1.9.2-p290 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>   ruby-1.9.3-p448 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'><span class="o">=</span>* ruby-2.0.0-p247 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>$ rake deploy</code> last worked with Ruby 1.9.2 on my machine, I decided to roll back to that point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm use ruby-1.9.2-p290
</span></code></pre></td></tr></table></div></figure>


<p>Next, I built another <code>octopress</code> gemset to work with this version of Ruby, pointed to the gemset, and used Bundler to add the necessary gems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm gemset create octopress
</span><span class='line'><span class="nv">$ </span>rvm gemset use octopress
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>And now <code>$ rake generate</code> works as required.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="c">## Generating Site with Jekyll</span>
</span><span class='line'>identical <span class="nb">source</span>/stylesheets/screen.css
</span><span class='line'>Configuration from /Users/rth/Code/Ruby/apps/rayhightower/_config.yml
</span><span class='line'>Building site: <span class="nb">source</span> -&gt; public
</span><span class='line'>Successfully generated site: <span class="nb">source</span> -&gt; public
</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<h3>RVM Saves the Day</h3>

<p>Once again, RVM lets me recover quickly by shifting to an earlier version of Ruby. What&rsquo;s the root cause of the problem? I don&rsquo;t know at this point. But for now, the blog is up &amp; running!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Successful Companies Are Built Around Communities]]></title>
    <link href="http://RayHightower.com/blog/2013/07/09/successful-companies-are-built-around-communities/"/>
    <updated>2013-07-09T23:52:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/09/successful-companies-are-built-around-communities</id>
    <content type="html"><![CDATA[<p><a href="http://www.sethgodin.com">Seth Godin</a> is on a mission. Technology enables us to form communities that stretch beyond traditional boundaries like age and social status. Godin is convinced that revolutions within and between communities will yield huge opportunities for those who have the courage to take action. Don’t waste the revolution!</p>

<p>I had the opportunity to hear Godin speak at a Chicago area event some time ago. This post was inspired by the presentation.</p>

<!--more-->


<h3>Recognizing Change</h3>

<p>Humans rarely recognize change when we’re in the middle of it. We’re too busy living! One example from Chicago history: The advent of the skyscraper. On the surface, a skyscraper is just a tall building… big deal. However, in hindsight we can see that the skyscraper (and the Chicago school of architecture) in the late 1880s led to the expansion of cities. Cities became magnets for <a href="http://en.wikipedia.org/wiki/Knowledge_worker">knowledge workers</a>. As cities grew to accommodate more people, political power shifted away from farms and toward urban areas. Professional service firms, companies that exist to make other companies better, blossomed &amp; grew. We continue to feel the effects of this trend today, over a century later.</p>

<p>Godin believes that we are now dealing with another catalyst of change, one that is even more powerful than the skyscraper: the community. Communities are growing in size and power. Companies that know how to leverage communities are thriving.</p>

<h3>Threadless is Not About T-Shirts</h3>

<p>Fast forward to the early 21st century where we find a Chicago-area company called Threadless. If you sell a product that is easily copied, how do you differentiate yourself from the competition? By selling something that goes beyond the easily cloned product. <a href="http://threadless.com/">Threadless</a> has created a community around T-shirt sales. When building the company, the founders of Threadless looked at available technology and asked themselves, “What do people really want?” Their answers:</p>

<ul>
<li>To be famous.</li>
<li>To be recognized.</li>
<li>To be talked about.</li>
</ul>


<p>So they built the company to fulfill these basic human needs. If you’re an artist, submit a design. If enough people vote for your design, it gets printed on a shirt. And while you’re looking around the Threadless site, you’re welcome to buy any of the other designs for about $20 each.</p>

<p>While other t-shirt companies are trying to undercut each other on price, Threadless gives customers what they really want, customers gladly pay a premium, and everybody wins.</p>

<p><img src="http://RayHightower.com/images/rails_logo.jpg" width="200" height="285" align="right" title="Ruby on Rails Logo" alt="Ruby on Rails Logo"></p>

<h3>We Don’t Pay for Software. We Pay for Results</h3>

<p>Godin cites <a href="http://37signals.com">37signals</a> as an example of a company that nutures a community of software developers by giving away software for free. 37signals extracted the <a href="http://rubyonrails.org">Ruby on Rails</a> web framework from their Basecamp project management tool. Rather than charge for Rails, the company makes it available to the open source community at no charge. 37signals benefits because the people who use Rails, software developers, end up trying, buying and recommending the paid products to their colleagues. This results in an upward spiral in revenue for the company. To top it off, 37signals benefits from the open source community in ways that are not easily measured in dollars.</p>

<p>WisdomGroup is grateful to the entire Ruby on Rails community, including 37signals. We express our gratitude through <a href="http://chicagoruby.org">ChicagoRuby</a> and <a href="http://windycityrails.org">WindyCityRails</a>. Contributing to the open source community has enabled us to develop wonderful relationships with contractors, clients, advisors… all sorts of people who have helped us to grow &amp; prosper. User groups and conferences enable the software community to come together – creating something far beyond the grasp of an individual genius.</p>

<h3>The Bottom Line</h3>

<p>Seth Godin’s point: Our most successful companies are built around communities. Companies that know how to build &amp; nurture communities will thrive &amp; grow. Companies stuck in the old paradigm (massive advertising on a massive scale) might survive, but they will be easily eclipsed by companies that understand the value of strong communities. The revolution is here, and Seth Godin urges all of us not to waste it.</p>

<p><em>Note: An earlier version of this article was published at <a href="http://wisdomgroup.com">WisdomGroup.com</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FeeddlerPro for RSS]]></title>
    <link href="http://RayHightower.com/blog/2013/07/04/feeddlerpro-for-rss/"/>
    <updated>2013-07-04T15:07:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/07/04/feeddlerpro-for-rss</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/FeeddlerPro-accounts.png" width="300" height="258"
align="right" alt="FeeddlerPro Accounts" title="FeeddlerPro Accounts">
Yes, the name appears misspelled. But <a href="https://itunes.apple.com/us/app/feeddler-rss-reader-pro/id365710282?mt=8">FeeddlerPro</a> is my choice for RSS on iPhone and iPad. Feeddler has long been my favorite RSS reader. The developer&rsquo;s decision to add support for services beyond Google Reader (Bazqux Reader, FeedHQ, and The OldReader) sealed the decision for me.</p>

<h3>Second Choice</h3>

<p><a href="http://RayHightower.com/blog/2013/06/21/replacing-google-reader-with-feed-wrangler/">Feed Wrangler</a> was a close second. I like Feed Wrangler&rsquo;s minimalist approach to RSS. However, the app is missing a few features that FeeddlerPro already has baked in.</p>

<!--more-->


<h3>Server-Side Synchronization</h3>

<p>Of course, an RSS client is nothing without the server-side to keep everything synchronized. I chose <a href="http://theoldreader.com">The Old Reader</a> because it syncs between iPhone, iPad, and web without extra fluff.</p>

<p>Other RSS providers probably offer the same level of service. Fortunately, Feeddler makes it easy to switch between RSS services seamlessly.</p>

<p>Google Reader is history, but RSS marches on.</p>
]]></content>
  </entry>
  
</feed>
