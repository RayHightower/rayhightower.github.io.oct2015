<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RayHightower.com]]></title>
  <link href="http://RayHightower.com/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-05-30T17:11:42-07:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading to Git 2.0]]></title>
    <link href="http://RayHightower.com/blog/2014/05/30/upgrading-to-git-2-dot-0/"/>
    <updated>2014-05-30T11:33:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/05/30/upgrading-to-git-2-dot-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://RayHightower.com/images/git-200.png">
Developers of Git are making a serious effort to improve intuitiveness for first-time users. Of course, all users benefit from intuitive tools. When our tools <em>just work</em>, we spend less time sifting through documentation and more time solving problems for our customers.</p>

<!--more-->


<h3>How to Upgrade</h3>

<p>If you‚Äôre on Mac OS X, make sure you‚Äôre using <a href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>. It‚Äôs the easiest way to install and manage Unix libraries on the Mac.</p>

<p>It‚Äôs usually a good idea to check your current version before upgrading.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 1.9.2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, make sure that Homebrew is current.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>
</span><span class='line'>Warning: Your Homebrew is outdated.
</span><span class='line'>You haven<span class="err">&#39;</span>t updated <span class="k">for </span>at least 24 hours, this is a long <span class="nb">time </span>in brewland!
</span><span class='line'>To update Homebrew, run <span class="sb">`</span>brew update<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>My Homebrew was outdated, so I used <code>brew update</code> to grab the new packages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from b46160b8 to afff2b23.
</span><span class='line'><span class="o">==</span>&gt; New Formulae
</span><span class='line'>aces_container                    git-number                      picolisp
</span><span class='line'>apache-spark                    homebrew/versions/mongodb24       probatron4j
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, use Homebrew to upgrade Git.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew upgrade <span class="nv">git</span>
</span><span class='line'><span class="o">==</span>&gt; Upgrading 1 outdated package, with result:
</span><span class='line'>git 2.0.0
</span><span class='line'><span class="o">==</span>&gt; Upgrading <span class="nv">git</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/git-2.0.0.mavericks.bottle.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Pouring git-2.0.0.mavericks.bottle.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>The OS X keychain credential helper has been installed to:
</span><span class='line'>  /usr/local/bin/git-credential-osxkeychain
</span><span class='line'>
</span><span class='line'>The <span class="s1">&#39;contrib&#39;</span> directory has been installed to:
</span><span class='line'>  /usr/local/share/git-core/contrib
</span><span class='line'>
</span><span class='line'>Bash completion has been installed to:
</span><span class='line'>  /usr/local/etc/bash_completion.d
</span><span class='line'>
</span><span class='line'>zsh completion has been installed to:
</span><span class='line'>  /usr/local/share/zsh/site-functions
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>üç∫  /usr/local/Cellar/git/2.0.0: 1324 files, 31M
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Finished. Let&rsquo;s check the Git version to confirm that the upgrade went properly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 2.0.0
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Future articles will examine the this latest version of Git in detail. For now, enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Environment of Respect, 3rd Iteration]]></title>
    <link href="http://RayHightower.com/blog/2014/05/28/an-environment-of-respect-3rd-iteration/"/>
    <updated>2014-05-28T06:42:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/05/28/an-environment-of-respect-3rd-iteration</id>
    <content type="html"><![CDATA[<p>Last week, <a href="https://twitter.com/bantik">Coraline Ehmke</a> and <a href="https://twitter.com/feministy">Liz Abinante</a> met with three members of the WindyCityRails organizer team: <a href="https://twitter.com/zolk">Kevin Zolkiewicz</a>, <a href="https://twitter.com/themccreefiles">Alonda McCree</a>, and me. Good dialog. End result: The updated <a href="http://www.windycityrails.org/code-of-conduct/">WindyCityRails Code of Conduct</a>.</p>

<!--more-->


<p>Harassment is a serious issue, and a 140-character tweet will not do the discussion justice. Therefore, the ChicagoRuby organizers have created multiple communication channels for this issue:</p>

<ul>
<li>Email: <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x63;&#111;&#x64;&#101;&#x6f;&#x66;&#x63;&#111;&#110;&#x64;&#x75;&#99;&#116;&#x40;&#x63;&#x68;&#105;&#x63;&#97;&#x67;&#111;&#114;&#x75;&#98;&#121;&#x2e;&#111;&#114;&#x67;">&#99;&#111;&#100;&#101;&#x6f;&#102;&#x63;&#111;&#x6e;&#x64;&#117;&#99;&#116;&#64;&#x63;&#104;&#x69;&#99;&#97;&#x67;&#111;&#x72;&#x75;&#98;&#121;&#x2e;&#111;&#114;&#103;</a></li>
<li>Any of the contact names listed on the current code of conduct</li>
<li>Phone number listed on the code of conduct</li>
</ul>


<p>If you have concerns in this area, please feel free to use one of the channels. The contact list may change as responsibilities shift within ChicagoRuby. However, there will always be multiple people available to address harassment concerns.</p>

<p>Thank you Coraline and Liz for your work in making this happen. And thank you <a href="https://twitter.com/lostghost">Ken Walters</a> of <a href="http://twitter.com/bradsdeals">Brad‚Äôs Deals</a> for facilitating the meeting.</p>

<p>Now, let‚Äôs go write some code!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Dotfiles]]></title>
    <link href="http://RayHightower.com/blog/2014/04/15/managing-dotfiles/"/>
    <updated>2014-04-15T17:13:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/04/15/managing-dotfiles</id>
    <content type="html"><![CDATA[<p>Dotfiles, the configuration files used by Unix-like machines, can become disorganized over time. Entropy rules! This article describes my recent attempt to bring order to dotfile chaos. The steps can be summarized as follows:</p>

<ul>
<li>Move the non-private dotfiles (dotfiles that will be viewed by others on Github) into a directory called <code>~/.dotfiles</code>.</li>
<li>From the <code>home</code> directory, create a symbolic link to each dotfile in the <code>~/.dotfiles</code> directory.</li>
<li>Use Git to manage the <code>~/.dotfiles</code> directory, and share it on GitHub.</li>
</ul>


<p>Dotfiles are normally hidden when you try to view them in the Mac OS X Finder. To view them from the command prompt, use <code>$ ls -al</code>.</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/.dotfiles<span class="o">[</span>master<span class="o">]</span><span class="nv">$ </span>ls -al
</span><span class='line'>total 40
</span><span class='line'>drwxr-xr-x   8 rth  staff   272 Apr 14 01:44 .
</span><span class='line'>drwxr-xr-x+ 71 rth  staff  2414 Apr 14 02:12 ..
</span><span class='line'>-rwxr-xr-x   1 rth  staff  3455 Apr 13 16:01 .bash_profile
</span><span class='line'>drwxr-xr-x  14 rth  staff   476 Apr 14 02:25 .git
</span><span class='line'>-rw-r--r--   1 rth  staff  1649 Apr 13 16:44 .gitk
</span><span class='line'>-rw-r--r--   1 rth  staff  1760 Apr 13 16:10 .irbrc
</span><span class='line'>-rw-r--r--   1 rth  staff   118 Aug 22  2013 .zprofile
</span><span class='line'>-rw-r--r--   1 rth  staff   375 Apr 14 01:44 README.mdown
</span><span class='line'>
</span><span class='line'>~/.dotfiles<span class="o">[</span>master<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/RayHightower/.dotfiles/blob/master/.bash_profile">.bash_profile</a> in this example has grown to include aliases, path specifications, and a script that shows the current Git branch as part of the command prompt. The file also contains two aliases useful for showing or hiding dotfiles in the Finder: <code>showdots</code> and <code>hidedots</code>.</p>

<h3>Putting Dotfiles in One Directory</h3>

<p>Dotfiles are normally created in the user&rsquo;s home directory. For organization purposes, I moved my non-private dotfiles into a directory called <code>.dotfiles</code>, listed above. Unix makes this easy. First, move to the home directory and create <code>~/.dotfiles</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>mkdir .dotfiles
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Dotfiles can sometimes include private information. If you don&rsquo;t want to share information in a particular dotfile, don&rsquo;t put it on GitHub!</em></p>

<p>In this example, we&rsquo;ll only move one file, <code>.bash_profile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span><span class="nb">cd</span> .dotfiles/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mv ../.bash_profile .
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Symbolic Links</h3>

<p>Symbolic links ensure that executables can find our dotfiles as needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ln -s ~/.dotfiles/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -al
</span><span class='line'>total 8
</span><span class='line'>drwxr-xr-x   3 rth  staff   102 Apr 14 19:48 .
</span><span class='line'>drwxr-xr-x+ 73 rth  staff  2482 Apr 14 19:47 ..
</span><span class='line'>lrwxr-xr-x   1 rth  staff    34 Apr 14 19:48 .bash_profile -&gt; /Users/rth/.dotfiles/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, we created a symbolic link called <code>.bash_profile</code> to the real <code>~/.dotfiles/.bash_profile</code> located in the <code>.dotfiles</code> directory. That way, any program that&rsquo;s looking for the <code>.bash_profile</code> file in the home directory will find what it needs, even though the file is somewhere else.</p>

<h3>Why Use Git to Manage Dotfiles?</h3>

<p>Git is a great tool for managing files that change over time. Dotfiles can change as we install new software or tweak our development environment. If we make a mistake, or if an installation script makes a mistake, we can use Git to roll back in history to a pre-mistake version of the dotfile.</p>

<h3>Don&rsquo;t Make All Dotfiles Public</h3>

<p>There are some dotfiles that you don&rsquo;t want to share publicly. For example, <code>.bash_history</code> contains all of the commands that have been executed in the shell. Do you really want the world that you sometimes <code>$ ssh myuserid@[embarassingdomainname].com</code>? Probably not. If you think that a dotfile might contain personal or confidential information, no need to broadcast it.</p>

<h3>Learning More About Dotfiles</h3>

<p>Most of my dotfiles, like <code>.bash_profile</code>, don&rsquo;t contain anything private. In fact, most of what I know about dotfiles has come from other developers via books, user groups, blogs, and spelunking through GitHub. Dotfile collections by <a href="https://github.com/hashrocket/dotmatrix">Hashrocket</a> and <a href="https://github.com/thoughtbot/dotfiles">Thoughtbot</a> are  especially good. My <code>~/.dotfiles</code> directory is available for public viewing on <a href="https://github.com/RayHightower/.dotfiles">GitHub</a>.</p>

<p>If you&rsquo;re doing something especially cool with your dotfiles, let&rsquo;s hear about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion and Memoization]]></title>
    <link href="http://RayHightower.com/blog/2014/04/12/recursion-and-memoization/"/>
    <updated>2014-04-12T10:48:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/04/12/recursion-and-memoization</id>
    <content type="html"><![CDATA[<blockquote><p>To iterate is human, to recurse divine.
&nbsp;<br/>
~ L. Peter Deutsch</p></blockquote>

<p>Recursion is available in many high-level languages, including Ruby. Recursive solutions can be joyfully elegant. At the same time, the pursuit of elegance can lead to unexpected performance pitfalls.</p>

<p>Fortunately, we can use optimization techniques to address performance problems before they occur. Memoization is one technique in our arsenal.</p>

<!--more-->


<h3>Before Memoization</h3>

<p>Memoization was designed to solve a particular kind of problem. Consider a method called <code>fibo(n)</code> that calculates the <em>nth</em> number of the <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci</a> sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Calculate the nth Fibonacci number, f(n).</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fibo</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Display the Fibonacci sequence.</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;fibo(</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">) = </span><span class="si">#{</span><span class="n">fibo</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example runs, but performance slows down as <em>n</em> gets larger. Why? Because this method re-calculates all preceeding Fibonacci numbers every time it calculates a new <code>fibo(n)</code>. When we calculate Fibonacci numbers manually, we know better. Humans are smart enough to refer to earlier work. But the <code>fibo(n)</code> method does not manage time very well.</p>

<p>Is it possible for the <code>fibo(n)</code> method to remember the results of earlier calculations so that it can avoid doing work that is already done? Yes, through <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>.</p>

<h3>Memoization</h3>

<p>Memoization means recording the results of earlier calculations so that we don&rsquo;t have to repeat the calculations later. If our code depends on the results of earlier calculations, and if the same calculations are performed over-and-over again, then it makes sense to store interim results (jot results down on a &lsquo;memo&rsquo; = memoization) so that we can avoid repeating the math.</p>

<p>The Fibonacci example can be improved through memoization as follows.</p>

<ul>
<li>Create a place to store temporary results.</li>
<li>Before performing a calculation, find out if the calculation has
already been done. If so, use the stored result.</li>
<li>If this is our first time calculating a particular <code>fibo(n)</code>, store
the results for future use.</li>
</ul>


<p>Here&rsquo;s how memoization is implemented in the Fibonacci example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Fibonacci numbers WITH memoization.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Initialize the memoization array.</span>
</span><span class='line'><span class="vi">@scratchpad</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vi">@max_fibo_size</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@max_fibo_size</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:notcalculated</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Calculate the nth Fibonacci number, f(n).</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fibo</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="vi">@max_fibo_size</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;n must be </span><span class="si">#{</span><span class="vi">@max_fibo_size</span><span class="si">}</span><span class="s2"> or less.&quot;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">!=</span> <span class="ss">:notcalculated</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Display the Fibonacci sequence.</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">50</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;fibo(</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">) = </span><span class="si">#{</span><span class="n">fibo</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Walking through the code&hellip; First we create a memoization array, a place to store the pre-calculated values. In this example, <code>@scratchpad[]</code> serves as our memoization array.</p>

<p>The <code>fibo(n)</code> method is similar to the one in the earlier example, with a few subtle differences. First, we need to determine whether we&rsquo;ve already calculated a particular value. Since we initialized all elements of the <code>@scratchpad</code> array with the <code>:notcalculated</code> symbol, it&rsquo;s easy to figure out where work needs to be done. If a Fibonacci number <code>fibo(n)</code> has already been calculated, we return the value stored at <code>@scratchpad[n]</code>. Otherwise, we calculate the new <code>fibo(n)</code> and store that value at <code>@scratchpad[n]</code> for later use.</p>

<h3>Performance Comparison</h3>

<p>The performance of the two programs is compared in this 1-minute video.</p>

<center><iframe src="http://RayHightower.com//player.vimeo.com/video/91841948" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<p>As the video shows, memoization is a performance booster.</p>

<h3>Sample Code</h3>

<p>Sample code related to this article can be found on <a href="https://github.com/RayHightower/fibonacci">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When in Doubt, Rake Clean]]></title>
    <link href="http://RayHightower.com/blog/2014/04/10/when-in-doubt-rake-clean/"/>
    <updated>2014-04-10T15:53:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/04/10/when-in-doubt-rake-clean</id>
    <content type="html"><![CDATA[<p>Earlier today, I upgraded from RubyMotion <code>v 2.24</code> to <code>v 2.26</code>. Immediately after the upgrade, I attempted to run a RubyMotion app that I‚Äôm working on. The result?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake
</span><span class='line'>
</span><span class='line'>     Build ./build/iPhoneSimulator-7.1-Development
</span><span class='line'>   Compile ./app/app_delegate.rb
</span><span class='line'>   Compile ./app/views/score_label.rb
</span><span class='line'>   Compile ./app/views/paddle_view.rb
</span><span class='line'>      Link ./build/iPhoneSimulator-7.1-Development/pong-rm4.app/pong-rm4
</span><span class='line'>Undefined symbols <span class="k">for </span>architecture i386:
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>clang: error: linker <span class="nb">command </span>failed with <span class="nb">exit </span>code 1 <span class="o">(</span>use -v to see invocation<span class="o">)</span>
</span><span class='line'>rake aborted!
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>What happened? It just ran a few minutes ago, right before the upgrade! Was RubyMotion broken? Was it time to reach out to the Twitterverse or Stack Overflow for assistance?</p>

<p>Not yet.</p>

<!--more-->


<h3>Cooler Heads</h3>

<p>Every time RubyMotion build an app, it stores the results in the <code>./build</code> directory. Since I had just done an upgrade, it was possible that remnants from a <code>v 2.24</code> build were interfering with my new <code>v 2.26</code> build. The solution?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake clean
</span><span class='line'>
</span><span class='line'>    Delete ./build
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>And now the app runs fine. Crisis averted. Back to work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Open Source?]]></title>
    <link href="http://RayHightower.com/blog/2014/04/05/why-open-source/"/>
    <updated>2014-04-05T00:40:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/04/05/why-open-source</id>
    <content type="html"><![CDATA[<p>As members of the open source community, we have internalized the benefits of open source. Sometimes, knowing a topic so well can hinder us from explaining it to people who need to understand our work: Clients, customers, and employers. They need to understand us because they pay us. Understanding helps to build trust.</p>

<p>The topic <a href="http://RayHightower.com/blog/2014/02/22/what-is-open-source/">What is Open Source</a> is covered in earlier post by that title. This presentation covers some of the &ldquo;whys&rdquo; of open source in terms that matter to the people we serve: Clients, customers, and employers.</p>

<!--more-->


<center><script async class="speakerdeck-embed" data-id="e20291c09eb00131918d4a0f4a2b8270" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>This presentation was delivered at the <a href="http://flourishconf.com/">Flourish 2014</a> conference at the University of Illinois at Chicago. I am grateful to the Flourish organizers and to UIC for inviting me to speak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flourish Open Source Conference at UIC]]></title>
    <link href="http://RayHightower.com/blog/2014/03/31/flourish-open-source-conference-at-uic/"/>
    <updated>2014-03-31T23:42:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/03/31/flourish-open-source-conference-at-uic</id>
    <content type="html"><![CDATA[<p><a href="http://flourishconf.com">Flourish</a> is an open source conference to be held at the University of Illinois at Chicago on Saturday, April 5, 2014. The conference is run by university students and tickets are free.</p>

<p>Why go to Flourish? Because&hellip;</p>

<!--more-->


<ul>
<li>You like open source.</li>
<li>You want to know more about open source.</li>
<li>You want to meet people who are passionate about open source.</li>
<li>All (or some combination) of the above.</li>
</ul>


<h3>Not Just Software</h3>

<p>Linux may be the best known open source project, but open source is not just about software. At Flourish 2009 a speaker mentioned a funny little circuit board called ‚ÄúArduino‚Äù during one of the presentations. I turned to my neighbor in the audience, and I asked ‚ÄúWhat‚Äôs an Arduino?‚Äù</p>

<p>My neighbor pulled an Arduino out of his backpack and showed it to me. Wow. Open source extends to hardware, too! Since then, the Arduino has become part of the <a href="http://www.windycityrails.org/youth/">WindyCityRails Youth Program</a>. Beyond microcontrollers, single-board Linux machines like the <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspeberry Pi</a>, <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>, and <a href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a> have joined the open source hardware ranks.</p>

<h3>See You There</h3>

<p>Thank you, Flourish organizers, for inviting me to speak this year. UIC is where I first learned about open source, Linux, and the web. My appreciation for UIC extends beyond my CS degree.</p>

<p>Great things happen when like-minded people come together to exchange ideas. I look forward to seeing you at Flourish 2014!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How .gitignore Works]]></title>
    <link href="http://RayHightower.com/blog/2014/03/25/how-gitignore-works/"/>
    <updated>2014-03-25T18:20:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/03/25/how-gitignore-works</id>
    <content type="html"><![CDATA[<p>Earlier today I ran into a Git issue within a RubyMotion project. I added a directory to the project&rsquo;s <code>.gitignore</code> file, but Git seemed to ignore my ignore. Expressed more clearly, Git continued to track a directory that I explicitly told it to ignore.</p>

<p>What?</p>

<p>Either there was a bug in Git, or my understanding of <code>.gitignore</code> was incomplete. It was time for me to dig in and learn more about <code>.gitignore</code>.</p>

<!--more-->


<h3>What I Learned About .gitignore</h3>

<p>The root cause of my problem: Once Git has begun tracking a file or directory, adding it to <code>.gitignore</code> changes nothing. Git will continue to track the file unless we explicitly tell Git to stop tracking the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm --cached <span class="o">[</span>filename<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, if you want to stop tracking an entire directory (like me in this case)&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm -r --cached <span class="o">[</span>directoryname<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-r</code> flag will tell Git to stop tracking all of the sub-directories and files within <code>directoryname</code>, recursively.</p>

<p>Git was behaving exactly as designed.</p>

<h3>Penalty</h3>

<p>I should have known this a long time ago. My penalty: A public admission :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaConf Chicago Recap]]></title>
    <link href="http://RayHightower.com/blog/2014/03/10/cocoaconf-chicago-recap/"/>
    <updated>2014-03-10T11:46:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/03/10/cocoaconf-chicago-recap</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/cocoaconf-2014.jpg' width='' height='' alt='Cool stuff from CocoaConf.' title='Cool stuff from CocoaConf.'><span class='caption-text'>Cool stuff from CocoaConf.</span></span></p>

<blockquote><p>One purpose of a conference is to help you to spot trends while there&rsquo;s still time to reap the benefits of being an early adopter.
&nbsp;<br/>
~Brian Marick at <a href="http://scna.softwarecraftsmanship.org/">SCNA 2013</a></p></blockquote>

<p>Early adopters on Apple&rsquo;s Mac OS X and iOS platforms flock to <a href="http://cocoaconf.com/">CocoaConf</a>, a multi-city conference for developers. Tickets are slightly easier to get than <a href="http://en.wikipedia.org/wiki/Wwdc">WWDC</a>; CocoaConf consistently sells out.</p>

<p>CocoaConf&rsquo;s presenters are practicing developers, actively building real software every day. They come to CocoaConf to share their experiences in a wonderful upward-spiral of technical learning. Here are a few highlights from the latest CocoaConf, held March 7-8 near Chicago.</p>

<!--more-->


<h3>Customers Will Pay for Services</h3>

<p><a href="https://twitter.com/justin">Justin Williams</a> kicked things off with a keynote titled <em>10 Things I Think I Think</em>. Williams recently acquired <a href="http://glassboard.com/">Glassboard</a>, so his developer skills are blended with the insights of a business owner. His list of ten included one approach to making money from mobile apps: Forget about selling a million copies in the App Store. Instead, create a service, charge a monthly fee for the service, and give the app away for free so customers can engage with the service. Engaged customers will continue to pay the monthly fee. When customers are served well, they will pay.</p>

<h3>Effective iOS 7 Networking</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/afnetworking-charles.png' width='' height='' alt='Charles shows network connections.' title='Charles shows network connections.'><span class='caption-text'>Charles shows network connections.</span></span>
Customer-focused mobile apps usually communicate with other software via the web. <a href="http://twitter.com/subdigital">Ben Scheirman</a> shared his experiences in building iOS apps that communicate with web services. Several questions are raised when we build apps like this, namely:</p>

<ul>
<li>How do we include communication capabilities without sacrificing performance?</li>
<li>If the mobile app requests information from a web service, and the service is unavailable (or slow) how do we avoid frustrating the user?</li>
</ul>


<p><code>NSURLSession</code>, introduced with iOS 7, lets us upload and download in the background. Users are kept happy because the app continues to function in the foreground. Scheirman&rsquo;s <a href="https://speakerdeck.com/subdigital/effective-network-programming-in-ios-7">slides</a> and <a href="https://github.com/subdigital/mods-2013">sample code</a> give more details.</p>

<p>It is also interesting to note what tools the presenters use in their
daily work. Scheirman uses <a href="http://www.charlesproxy.com/">Charles</a>
to monitor network traffic between machines, and to track down hiccups.</p>

<h3>Xcode Walkabout</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/xcode-git-commit.png' width='' height='' alt='Showing Git commit messages in Xcode.' title='Showing Git commit messages in Xcode.'><span class='caption-text'>Showing Git commit messages in Xcode.</span></span>
Most of my iOS time is spent with <a href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/">Vim</a> and <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. I use Xcode mainly to learn things that I can apply to RubyMotion. Still, <a href="http://twitter.com/savinola">Laura Savino</a>&rsquo;s exploration of Xcode proved valuable.</p>

<p>Like many developers on the Apple platforms, Savino has a love/hate relationship with Xcode. She almost titled her talk &ldquo;stupid little buttons that don&rsquo;t even look like buttons.&rdquo; Savino summarized several years of Xcode immersion and pair programming into 60 minutes of little-known tips and tricks. For example, Xcode plays nicely with Git (you can even show commit messages within the IDE). And it&rsquo;s possible to use Vim key bindings while editing files.</p>

<h3>Sprite Kit</h3>

<p><a href="http://twitter.com/kognate">Josh Smith</a>&rsquo;s Sprite Kit presentation was full of gotcha-eliminating information. For example, the coordinate systems for Sprite Kit and UIKit are inverted. I&rsquo;m sure this is documented somewhere, but I didn&rsquo;t know about it! The bottom line with Sprite Kit: We can add animation to our apps without doing all of the fundamental work. Saves time.</p>

<p>Slides and code are posted in a single <a href="https://github.com/kognate/presentations">repo on GitHub</a>. Worth looking at.</p>

<h3>Parallel Computing with OpenCL</h3>

<p>The parallel computing talk by <a href="http://twitter.com/hyperjeff">Jeff Biggus</a> was the most mind-blowing session of CocoaConf, for me. The presentation was exciting because it tied our current set of tools (like <a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">GCD</a>) with high performance computing work currently underway at universities and at corporations like NVidia. When theory blends with application, great things can be achieved.</p>

<p>Biggus shared some of the work of <a href="https://www.khronos.org/opencl/">OpenCL</a>, a standard designed for cross-platform parallel computing. We care about parallel computing because&hellip;</p>

<ul>
<li>Moore&rsquo;s Law has just about run its course.</li>
<li>Engineers have packed transistors about as tightly as they can on silicon.</li>
</ul>


<p>Unless we can figure out how to <a href="http://en.wikipedia.org/wiki/Montgomery_Scott">rewrite the laws of physics</a>, the next advances in computing performance will come from making processors work together without stepping on each other&rsquo;s toes.</p>

<h3>The Klein Family</h3>

<p>2014 marks CocoaConf&rsquo;s third year in the Chicago area. The conference is run by Dave and Debbie Klein and their 14 children. <a href="http://cocoaconf.com/family">About The Family Behind CocoaConf</a> gives details.</p>

<p>Thank you, Klein family, for another great CocoaConf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing MacVim on OS X Mavericks]]></title>
    <link href="http://RayHightower.com/blog/2014/03/04/fixing-macvim-on-osx-mavericks/"/>
    <updated>2014-03-04T14:48:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/03/04/fixing-macvim-on-osx-mavericks</id>
    <content type="html"><![CDATA[<p>Experience told me to delay upgrading to OS X Mavericks for as long as possible because the upgrade would likely break my dev environment. Sure enough, the upgrade broke <a href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/">MacVim</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>which mvim
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;nix <code>which</code> command returned a null response when asked about MacVim. Not cool, Mavericks!</p>

<!--more-->


<p>Fortunately, I‚Äôm running <a href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>. After the standard <code>brew doctor</code> and <code>brew update</code>, the following resolved the MacVim problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew uninstall macvim
</span><span class='line'>Uninstalling /usr/local/Cellar/macvim/7.4-70...
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>followed by‚Ä¶</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew install <span class="nv">macvim</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/b4winckler/macvim/archive/snapshot-72.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; ./configure --with-features<span class="o">=</span>huge --enable-multibyte --with-macarchs<span class="o">=</span>x86_64 --enable-perlinterp --enable-rubyinterp --enable-tcli
</span><span class='line'><span class="o">==</span>&gt; <span class="nv">make</span>
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>.app bundles were installed.
</span><span class='line'>Run <span class="sb">`</span>brew linkapps<span class="sb">`</span> to symlink these to /Applications.
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>üç∫  /usr/local/Cellar/macvim/7.4-72: 1799 files, 28M, built in 37 seconds
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>And now‚Ä¶</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>which mvim
</span><span class='line'>/usr/local/bin/mvim
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Whew. Homebrew saves the day again!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Open Source?]]></title>
    <link href="http://RayHightower.com/blog/2014/02/22/what-is-open-source/"/>
    <updated>2014-02-22T16:41:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/02/22/what-is-open-source</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/linux-penguin.png' width='' height='' alt='The Linux penguin.' title='The Linux penguin.'><span class='caption-text'>The Linux penguin.</span></span>
Entrepreneurs, especially those outside of software development, may find this article useful.</p>

<h3>When Performance Matters</h3>

<p>Over seventy percent of the web servers on the planet run Linux, the open source operating system. Google, Facebook, and Amazon all run Linux. They bet their companies on this decision every day.</p>

<p>Given that thousands of successful companies have bet their livelihood on open source, an observer might ask these questions:</p>

<ul>
<li>What is open source?</li>
<li>Why should one care about open source?</li>
<li>How can a company profit from software that is given away for free?</li>
</ul>


<!--more-->


<h3>Source Code, Executable Code</h3>

<p>First, a few definitions. Source code is a human-modifiable form of software. It‚Äôs software as written by programmers. Source code must be translated into executable code (either compiled or interpreted) before a computer can run it.</p>

<p>Water is a useful metaphor for this discussion. Water can exist in three different states (steam, liquid, and ice) without changing its chemical properties. It‚Äôs still water. Likewise, software can exist as source code or executable code ‚Äì it‚Äôs still software. We use water in one of its three states depending on whether we want to wash a car (liquid), cool a drink (ice), or clean a carpet (steam).</p>

<p>In the world of software, executable code is difficult for humans to read, but easily executed by computers. Source code is easily read and modified by humans, but computers cannot execute it. Source code must be compiled or interpreted before a computer can execute it.</p>

<h3>One Way Translation</h3>

<p>Translating source code into executable code is a one-way street. Once a programmer has compiled source code into executable code, it is virtually impossible to convert it back into source code. You might think of a compiler as a blender that chops the food into a form easily digestible by the computer. After it‚Äôs chopped, the food never returns to its original form.</p>

<p>That‚Äôs why programmers always keep a copy of the source code handy. It might be necessary to make changes (fix bugs) and re-compile.</p>

<p>Trade secrets that are hidden in executable code can be easily read in source code. So developers go to great lengths to protect their source code, except in the open source community.</p>

<h3>Closed Source Tradition</h3>

<p>Most of today‚Äôs business software is closed source. Two examples: Microsoft Office and Apple iWork. Both Microsoft and Apple consider the source code for their respective office suites to be highly confidential. You will never (legally) download the source code for a closed source product. Security is so tight at Microsoft, for example, that engineers are only allowed to view that portion of the source code that is relevant to their current project.</p>

<p>Contrast that against open source software. Open source products make the source code freely available for viewing, comments, and modification by the software community at large.</p>

<h3>Open Source Chaos?</h3>

<p>But doesn&rsquo;t such openness lead to chaos? Intuitively, you would think so, but it doesn&rsquo;t. The culture of the open source community has its own rules of conduct that most members willingly follow. Rules are enforced by the community in ways that developers respond to.</p>

<p>It is difficult to imagine an apparently chaotic system that produces robust software. How counter-intuitive! But a long list of successful open source projects (available through your favorite search engine) shows that the method works. Eric S. Raymond explores open source cultural norms in his book <a href="http://www.amazon.com/Cathedral-Bazaar-Musings-Accidental-Revolutionary-ebook/dp/B0026OR3LM">The Cathedral and the Bazaar</a>.</p>

<h3>The Banking Metaphor</h3>

<p>Some makers of security software believe that hiding their source code will prevent malcontents from finding vulnerabilities and exploiting them. Their reasoning is like that of a bank owner who keeps the building blueprints secret so thieves don‚Äôt know how to drill the safe from next door.</p>

<p>Other security experts disagree. They want many people (including malcontents) to view the code so that vulnerabilities can be discovered and patched early. Their philosophy could be summed up in a statement by the creator of Linux:</p>

<blockquote><p>Given enough eyeballs, all bugs are shallow.
<br/>&nbsp;
~Linus Torvalds</p></blockquote>

<p>In other words, when thousands of developers are working on the same project they are likely to be widely dispersed across the code. Wide coverage means that a given bug is more likely to be discovered by at least one developer.</p>

<p>In our banking metaphor, the open source company would be like a bank owner who wants many people to review the blueprints, find the weak spots, and fix security holes before the bank gets robbed.</p>

<h3>It‚Äôs Not All-or-Nothing</h3>

<p>Choosing an open or closed source strategy is not an all-or-nothing decision. Google, the busiest search engine on the web, has bet the company on open source software. And yet their most strategic software, the secret mathematical engine that drives their search results, remains closed. So how does a company decide what to open and what to close?</p>

<p>Open source works when the upside of sharing outweighs the downside of exposed code. In the Google example, using and contributing to Linux gives Google a very stable operating platform at a relatively low cost. In effect they are leveraging the time and talent of thousands of developers around the world, while those developers are also leveraging Google‚Äôs expertise.</p>

<p>It doesn&rsquo;t matter that Google&rsquo;s competitors also benefit from that same stable Linux platform because Google differentiates itself through advanced search technology. By leveraging the community for assistance with the platform (Linux, Apache, and other tools), Google frees up engineering time and talent to focus on their secret sauce: Search methodology and mathematics.</p>

<h3>If Your Business Isn‚Äôt Software</h3>

<p>So&hellip; If you don&rsquo;t run a software company, how can you benefit from open source?</p>

<p>There‚Äôs always a chance that open source won‚Äôt work for your company. Maybe you run an enterprise that doesn‚Äôt benefit from the web. In that case, your current software options may suit you just fine.</p>

<p>Of course, you may have already benefited from open source. There is at least a 70% chance that your company‚Äôs web site runs on Linux. If that‚Äôs the case, then rest assured that you‚Äôre running on a very stable and robust platform.</p>

<h3>Think Big, Start Small for ROI</h3>

<p>If you really want to see ROI from open source, encourage your technical team (software developers, network support, etc.) to explore open source tools. Chances are that they‚Äôve already experimented with open source and they‚Äôre waiting for an opportunity to do an official company project.</p>

<p>Start small, perhaps with an automated network monitoring project or a small database. As you explore the technology, new ideas will become apparent to you. View this as a way to accelerate and strengthen the software development process.</p>

<h3>Open Source and Automobiles</h3>

<p>BMW is arguably the best automotive engineering company on the planet. Does BMW invent the wheel every time they design a new automobile? Absolutely not. BMW leverages thousands of years of &ldquo;open source&rdquo; wheel technology, and they focus their design energy in areas where they can make a difference: Engine, transmission, suspension, and luxury amenities. A similar model can be applied to software development. In fact, it already has.</p>

<h3>Suggested Reading</h3>

<p><a href="http://www.amazon.com/Cathedral-Bazaar-Musings-Accidental-Revolutionary-ebook/dp/B0026OR3LM">The Cathedral and the Bazaar</a>, by Eric S. Raymond. The author is both participant and anthropologist in the open source community.</p>

<p><em>Note: An earlier version of this article was published at <a href="http://wisdomgroup.com">WisdomGroup.com</a></em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SGI & Big Data]]></title>
    <link href="http://RayHightower.com/blog/2014/02/17/sgi-and-big-data/"/>
    <updated>2014-02-17T14:46:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/02/17/sgi-and-big-data</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/sgi-logo-1990s.png' width='' height='' alt='SGI's logo from the 1990s.' title='SGI's logo from the 1990s.'><span class='caption-text'>SGI&rsquo;s logo from the 1990s.</span></span>
<a href="http://sgi.com">Silicon Graphics International Corporation (SGI)</a> computers rendered the special effects for the original <a href="http://en.wikipedia.org/wiki/Jurassic_Park">Jurassic Park</a> movie. Computer enthusiasts coveted SGI machines throughout the 1990s.</p>

<p>But success in the computer industry is fleeting. A few years after Jurassic Park, a convergence of tech advances (Moore&rsquo;s Law, x86 architecture, and Linux) made it possible for commodity PCs to perform as well as SGI&rsquo;s premium workstations. Wall Street traders and other power users abandoned workstations in favor of Linux-based PCs. High-end makers like SGI fell on hard times.</p>

<p>Today, SGI is fighting back. The company is blending x86, Linux, and (buzzword alert) big data to attack the high performance computing market. The vision was presented at this month&rsquo;s <a href="http://www.meetup.com/chicagoacm/events/163287562/">Chicago ACM</a> meeting by Brian Freed, VP of Strategy for SGI.</p>

<!--more-->


<h3>What is Big Data?</h3>

<p>Freed shared a definition of big data from <a href="http://strata.oreilly.com/2012/01/what-is-big-data.html">Edd Dumbill&rsquo;s O&#8217;Reilly Radar article</a>. Big data is characterized by volume (lots of it), variety (it&rsquo;s unstructured), and velocity (the data changes quickly).</p>

<p>In the words of the O&#8217;Reilly author&hellip;</p>

<blockquote><p>Big data is data that exceeds the processing capacity of conventional database systems. The data is too big, moves too fast, or doesn‚Äôt fit the strictures of your database architectures. To gain value from this data, you must choose an alternative way to process it.</p>

<p>~Edd Dumbill</p></blockquote>

<p>Definitions are fine, but it&rsquo;s more important to understand <em>why</em> a company might care about big data. Here are a few examples that Freed shared during the ACM meeting.</p>

<h3>Example: Fraud Detection with Big Data</h3>

<p>Consider one challenge faced by credit card companies. When a credit card is presented for an online purchase, how does the authorizing body know if the charge is legitimate? Can legitimacy be determined in a timely fashion, before an impatient buyer abandons a slow seller for a quicker seller?</p>

<p>Sellers who decide too quickly will suffer fraud. Sellers who decide too slowly will lose customers. The problem is amplified because millions of shoppers are clicking the &ldquo;buy now&rdquo; button simultaneously, and they all expect an answer <em>right now</em>.</p>

<p>Traditional fraud detection systems could measure just a few potential fraud criteria within the allowed time window. SGI solves the problem with <a href="http://hadoop.apache.org/">Hadoop clusters</a> running on SGI hardware. This big data design is able to examine each transaction deeper, and render a yes/no decision faster. Buyers are happier because they can complete a purchase faster. Companies are happier because fraud is reduced.</p>

<p>Big data helps credit card companies to make better authorization decisions in less time.</p>

<h3>Example: Auto Manufacturing</h3>

<p>Some problems, like credit authorization, require a quick response.  Other problems, like manufacturing, require the problem solver to crunch large volumes of data.</p>

<p>Consider an auto manufacturer. Every system in the modern automobile is controlled by software on silicon. Where software runs, data can be collected. The data piles up rapidly over time.</p>

<p>Manufacturers have discovered some unexpected benefits of collecting so much data. For example, they can identify trends like common failures among components, and use that data to improve future components. They can spot hidden trends, like geographic issues related to extreme cold or heat, and then design parts that are specially equipped for the target environment.</p>

<p>For these particular manufacturing examples, handling huge volumes of data is more important than delivering a quick answer. Insights that lead to quality improvements can be delivered in hours, and that&rsquo;s fast enough for the designers. Before big data, many design decisions were driven by instinct and experience alone. Big data helps auto companies to make more informed decisions.</p>

<h3>Pitfalls of Big Data</h3>

<p>One big pitfall is trying to use the big data <em>hammer</em> for every <em>nail</em> in sight, whether the solution fits the problem or not. It&rsquo;s the same hazard we face with any new technology. We run the risk of using a sledgehammer when a fly swatter would do.</p>

<p>A few ways to avoid the pitfalls: Start small. Have goals. And, like any good agile software developer, iterate. In Freed&rsquo;s words&hellip;</p>

<blockquote><p>Successful implementation of big data is not an event. It is an iterative process where we continuously learn over time.</p></blockquote>

<h3>About Chicago ACM</h3>

<p><a href="http://www.meetup.com/chicagoacm/">The Chicago Chapter of the Association for Computing Machinery (Chicago ACM)</a> is on fire. December&rsquo;s meeting featured a supercomputing presentation by <a href="http://RayHightower.com/blog/2013/12/12/high-performance-computing-at-acm/">Sharan Kalwani of Fermilab</a>. The February meeting was all about SGI&rsquo;s push into big data, and next month will focus on the Internet of Things (IoT). The organizers are assembling an exciting combination of events. Looking forward to more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew Fundamentals]]></title>
    <link href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/"/>
    <updated>2014-02-12T14:20:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals</id>
    <content type="html"><![CDATA[<p>Spend enough time developing software on Mac OS X, and you will eventually need to install libraries that were written for Unix, but not specifically for OS X. Fortunately we have <a href="http://brew.sh/">Homebrew</a>, which makes it easier to install Unix libraries on the Mac.</p>

<h3>Why Homebrew?</h3>

<p>Before installing any new software, it is helpful to have a clear view of <em>why</em> we need it.</p>

<p>Homebrew is a package manager. It differs from earlier package managers like <a href="http://www.finkproject.org/">Fink</a> and <a href="http://www.macports.org/">MacPorts</a> because it is written in Ruby and based on Git. The Ruby/Git foundation means that developers from around the planet can easily contribute to Homebrew&rsquo;s growth.</p>

<p>Before package managers, developers who needed a particular library would have to:</p>

<ul>
<li>Manually download source code for the library.</li>
<li>Manually compile using <code>gcc</code> or another compiler.</li>
<li>Resolve dependencies manually.</li>
</ul>


<p>Manually, manually, manually&hellip; The old way was long and error-prone. <a href="https://twitter.com/mxcl">Max Howell</a> created Homebrew to download, compile, and resolve dependencies automatically. Now developers can focus more attention on solving problems that are directly related to their work.</p>

<!--more-->


<h3>How to Install Homebrew</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/xcode-app-store.png' width='' height='' alt='Homebrew depends on Xcode.' title='Homebrew depends on Xcode.'><span class='caption-text'>Homebrew depends on Xcode.</span></span>
Some parts of Homebrew require Xcode, Apple&rsquo;s environment for developing software on Mac OS X. Make sure you have Xcode installed on your Mac. Xcode is available for free in the Mac App Store.</p>

<p>With Xcode installed, you can install Homebrew by pasting the following
command into a terminal window.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</span>install
</span></code></pre></td></tr></table></div></figure>


<p>The script will walk you through the installation process. If you would like to read the script before installation, you can visit the <a href="https://github.com/Homebrew/homebrew">Homebrew repo on Github</a>.</p>

<h3>Installing Packages</h3>

<p>A list of <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">available Homebrew packages</a> is maintained on GitHub.</p>

<p>To install a package, say <code>imagemagick</code> for example&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install imagemagick
</span></code></pre></td></tr></table></div></figure>


<p>Before Homebrew, installing <code>imagemagick</code> was long and arduous. With Homebrew, the installation and compilation steps still take awhile. But dependencies are resolved by Homebrew, and little user interaction is required after the first step.</p>

<h3>Maintaining Homebrew</h3>

<p>Developers from around the world contribute to Homebrew, so the tool gets improved often. To check the health of your Homebrew installation, use <code>brew doctor</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>Warning: Your Homebrew is outdated.
</span><span class='line'>You haven<span class="err">&#39;</span>t updated <span class="k">for </span>at least 24 hours, this is a long <span class="nb">time </span>in brewland!
</span><span class='line'>To update Homebrew, run <span class="sb">`</span>brew update<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><code>brew update</code> will apply recent updates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from f83642fc to cfad513e.
</span><span class='line'><span class="o">==</span>&gt; New Formulae
</span><span class='line'>...
</span><span class='line'><span class="o">==</span>&gt; Updated Formulae
</span><span class='line'>...
</span><span class='line'><span class="o">==</span>&gt; Deleted Formulae
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Looking at Packages</h3>

<p>There are several ways to view the packages that have been installed on a system via Homebrew. Use <code>brew list</code> at the command prompt to get a quick view of what Homebrew has installed.</p>

<p>Even better: <code>brew server</code> will launch a local <a href="http://www.sinatrarb.com/">Sinatra</a> app, and then you can point a browser to <code>http://localhost:4567</code> for a web-enabled view of the installed packages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew server
</span><span class='line'>View our tasting menu at http://localhost:4567/
</span><span class='line'>Use <span class="s2">&quot;Control-C&quot;</span> to exit.
</span><span class='line'>
</span><span class='line'><span class="o">[</span>2014-02-12 16:33:18<span class="o">]</span> INFO  WEBrick 1.3.1
</span><span class='line'><span class="o">[</span>2014-02-12 16:33:18<span class="o">]</span> INFO  ruby 1.8.7 <span class="o">(</span>2012-02-08<span class="o">)</span> <span class="o">[</span>universal-darwin12.0<span class="o">]</span>
</span><span class='line'><span class="o">==</span> Sinatra/1.3.3 has taken the stage on 4567 <span class="k">for </span>development with backup from WEBrick
</span><span class='line'><span class="o">[</span>2014-02-12 16:33:18<span class="o">]</span> INFO  WEBrick::HTTPServer#start: <span class="nv">pid</span><span class="o">=</span>96694 <span class="nv">port</span><span class="o">=</span>4567
</span></code></pre></td></tr></table></div></figure>


<p><span class='caption-wrapper center'><img class='caption' src='http://RayHightower.com/images/brew-server.png' width='' height='' alt='Browsing locally-installed Homebrew packages.' title='Browsing locally-installed Homebrew packages.'><span class='caption-text'>Browsing locally-installed Homebrew packages.</span></span></p>

<h3>Making Your Own Packages</h3>

<p>Homebrew is Ruby-based, so Rubyists can create their own packages.  Details can be found in the (continuously updated) <a href="https://github.com/Homebrew/">Homebrew repo on GitHub</a>.</p>

<h3>Conclusion</h3>

<p>Enjoy Homebrew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Rubinius Using RVM]]></title>
    <link href="http://RayHightower.com/blog/2014/02/06/installing-rubinius-using-rvm/"/>
    <updated>2014-02-06T18:17:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/02/06/installing-rubinius-using-rvm</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://RayHightower.com/images/rubinius.png">
<a href="http://rubini.us/">Rubinius</a> is an implementation of the Ruby language designed for concurrency. The lead developer of Rubinius, <a href="http://twitter.com/brixen">Brian Shirai</a>, will present Rubinius at ChicagoRuby on March 4, 2014. ChicagoRuby will follow-up with a Rubinius-themed hack night on March 12th. <a href="http://www.meetup.com/ChicagoRuby/events/114749352/">Details</a>.</p>

<p>To prepare for the Rubinius events, some people may choose to install Rubinius locally. RVM makes the process smooth.</p>

<!--more-->


<h3>RVM Recap</h3>

<p><a href="http://rayhightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/">Ruby Version Manager (RVM)</a> is an awesome tool that enables developers to:</p>

<ul>
<li>install multiple versions of Ruby on one system,</li>
<li>bounce between the different versions, and</li>
<li>to do all of that with minimal headaches.</li>
</ul>


<p>Similar tools exist, but RVM is the one that has always worked for me.  If you don&rsquo;t have RVM installed, detailed installation instructions can be found at <a href="http://rvm.io">http://rvm.io</a>.</p>

<h3>Get the Latest RVM</h3>

<p>These instructions work on Mac OS X v10.8.5. The same steps will probably work on Linux, except for the references to Homebrew.</p>

<p>First, make sure you&rsquo;re running the latest version of RVM.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm get head
</span><span class='line'>Downloading https://get.rvm.io
</span><span class='line'>Downloading https://github.com/wayneeseguin/rvm/archive/master.tar.gz
</span><span class='line'>
</span><span class='line'>Upgrading the RVM installation in /Users/rth/.rvm/
</span><span class='line'>    RVM PATH line found in /Users/rth/.bashrc /Users/rth/.zshrc.
</span><span class='line'>    RVM sourcing line found in /Users/rth/.bash_profile /Users/rth/.zprofile.
</span><span class='line'>    Migrating environment ruby-1.9.2-p290 to use with <span class="s1">&#39;gem-wrappers&#39;</span> gem.
</span><span class='line'>
</span><span class='line'>     ‚Ä¶
</span><span class='line'>
</span><span class='line'>     Installing gem-wrappers gem in 3 gemsets.
</span><span class='line'>Upgrade of RVM in /Users/rth/.rvm/ is complete.
</span><span class='line'>
</span><span class='line'>     ‚Ä¶
</span><span class='line'>
</span><span class='line'>In <span class="k">case </span>of problems: http://rvm.io/help and https://twitter.com/rvm_io
</span><span class='line'>
</span><span class='line'>RVM reloaded!
</span><span class='line'>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Next, Install Rubinius</h3>

<p>As of this writing, Rubinius can operate in 1.8 language mode (the default) or 1.9 language mode. Installing in 1.9 mode requires an additional command line flag, shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install rbx --1.9
</span></code></pre></td></tr></table></div></figure>


<h3>Testing the Rubinius Installation</h3>

<p>First, let&rsquo;s make sure that RVM shows the new Rubinius (rbx) installation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm list
</span><span class='line'>
</span><span class='line'>rvm <span class="nv">rubies</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; rbx-2.2.4 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>   ruby-1.9.2-p290 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'> * ruby-1.9.3-p484 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>   ruby-2.0.0-p353 <span class="o">[</span> x86_64 <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s always good to have multiple ways to verify information.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby --version
</span><span class='line'>rubinius 2.0.0.n37 <span class="o">(</span>1.9.3 6d611c7a 2014-02-06 JI<span class="o">)</span> <span class="o">[</span>x86_64-darwin12.5.0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now, let&rsquo;s do a quick &ldquo;Hello World&rdquo; test drive using the Rubinius
version of <code>irb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>irb
</span><span class='line'>rbx-2.2.4 :001 &gt; p <span class="s1">&#39;Hello World, from Rubinius&#39;</span>
</span><span class='line'><span class="s2">&quot;Hello World, from Rubinius&quot;</span>
</span><span class='line'> <span class="o">=</span>&gt; <span class="s2">&quot;Hello World, from Rubinius&quot;</span>
</span><span class='line'>rbx-2.2.4 :002 &gt; quit
</span><span class='line'>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Post Installation Notes</h3>

<p>The installation script found two outdated Homebrew-installed packages on my system: <code>automake</code> and <code>openssl</code>. It would have been better for me to upgrade Homebrew and related packages <em>before</em> installing Rubinius.</p>

<p>Why install Rubinius? Why do we care about concurrency? These are two questions I expect to explore through my new Rubinius installation.</p>

<h3>Come Hack With Rubinius</h3>

<p>If March 2014 finds you in the Chicago area, you&rsquo;re invited to visit ChicagoRuby for some back-to-back Rubinius action. See <a href="http://www.meetup.com/ChicagoRuby/events/114749352/">http://meetup.com/chicagoruby</a> for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Controversial Coding Topics at 8th Light]]></title>
    <link href="http://RayHightower.com/blog/2014/02/03/exploring-controversial-coding-topics-at-8th-light/"/>
    <updated>2014-02-03T12:11:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/02/03/exploring-controversial-coding-topics-at-8th-light</id>
    <content type="html"><![CDATA[<p><a href="http://8thlight.com">8th Light</a> recently hosted a panel discussion on Controversial Coding Topics. I was honored to share the panel with two technology leaders whom I admire: <a href="http://twitter.com/markrickmeier">Mark Rickmeier</a> of <a href="http://tablexi.com">Table XI</a> and <a href="http://twitter.com/coreyhaines">Corey Haines</a> of <a href="http://wavetable.com">Wavetable</a>. <a href="http://twitter.com/little_fig">Rachel Feigenbaum</a> of 8th Light organized the event.</p>

<!--more-->


<center><iframe src="http://RayHightower.com//player.vimeo.com/video/84793305" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<h3>Topics Covered</h3>

<p>Some of the topics covered during the discussion:</p>

<ul>
<li>Hiring. What do you look for when building a team?</li>
<li>Establishing team standards.</li>
<li>Balancing professional time with personal time. Don&rsquo;t work 12-hour
days!</li>
</ul>


<h3>Gratitude</h3>

<p>Thank you 8th Light for making this happen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Environment of Respect, 2nd Iteration]]></title>
    <link href="http://RayHightower.com/blog/2014/01/28/an-environment-of-respect-2nd-iteration/"/>
    <updated>2014-01-28T07:08:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/01/28/an-environment-of-respect-2nd-iteration</id>
    <content type="html"><![CDATA[<p>Thank you to everyone who offered feedback on <a href="http://RayHightower.com/blog/2014/01/21/an-environment-of-respect/">An Environment of Respect</a>, which included an early draft of the WindyCityRails Code of Conduct.</p>

<p>The frank and earnest exchange of ideas was educational. Some of the feedback was positive, on the order of &ldquo;we&rsquo;re all colleagues, we treat each other with respect, that&rsquo;s good.&rdquo;</p>

<p>However, I paid special attention to the negative feedback because it surprised me. Surprise happens when I face something that I do not understand. When I encounter something that I do not understand, there&rsquo;s an opportunity for learning.</p>

<p>So I did what I always do when I need to learn more. I spoke with people who know more than me.</p>

<!--more-->


<h3>Wise Counsel</h3>

<p>Several people in our industry were generous when I asked for advice. One technology veteran summed it up this way:</p>

<blockquote><p>You wrote a code of conduct for an Environment of Respect. 99.9% of the people will know what that means, and they can even function well without a code. But a code of conduct needs to written for an Environment of Hostility&hellip; for the one fool who doesn&rsquo;t know how to act.</p></blockquote>

<p>In a discussion about reducing bureaucracy, one developer offered this view:</p>

<blockquote><p>Think of it less as bureaucracy and more along the lines of ‚ÄúIn case of emergency, break glass and help is on the way.‚Äù</p></blockquote>

<p>I am grateful to everyone who took the time to share their thoughts.</p>

<h3>Verbose and Draconian? Not Here.</h3>

<p>Some of the advice seemed to point toward a more verbose and draconian code of conduct, like the ones suggested by a few people last week. Not good. If we have a code, it&rsquo;s better to avoid the threatening tone. WindyCityRails is a community of colleagues who treat each other with respect.</p>

<p>Fortunately, one member of our team found a code that works. Every member of the community is treated like an independent-thinking adult who respects the rights of others. Expectations are clear, and the threatening tone is gone.</p>

<h3>Ruby DCamp: Thanks</h3>

<p><a href="http://twitter.com/elight">Evan Light</a> wrote the original version of this code of conduct for <a href="http://rubydcamp.org/">Ruby DCamp</a>. When asked for permission to use his work for WindyCityRails, Evan responded with an enthusiastic <em>yes</em>. Thanks Evan!</p>

<p>Here it is.</p>

<h3>Draft: Code of Conduct</h3>

<h4>Preface</h4>

<p>WindyCityRails is and has been an event made up of welcoming, tolerant, compassionate, and loving participants. For several years now, WindyCityRails participants have been respectful of one another in our differences. We have employed those differences to elevate, educate, and celebrate one another at WindyCityRails.</p>

<p>It is in that same spirit that we now adopt this Code of Conduct: Not as a punitive action, but as a measure to protect that which we already have and to signal to all that we are a tolerant and loving community.</p>

<h4>WindyCityRails Code of Conduct</h4>

<p>WindyCityRails is dedicated to providing a harassment-free conference experience for everyone, regardless of gender, gender identity, sexual orientation, disability, physical appearance, body size, race, or religion. We do not tolerate harassment of participants in any form.</p>

<p>If you think your conversation is making another community member uncomfortable, try to make amends and move forward.</p>

<p>Participants asked to stop any harassing behavior are expected to comply immediately. WindyCityRails participants violating these rules may be sanctioned or expelled from the conference at the event organizers&#8217; discretion. This applies to all attendees, speakers, sponsors, and otherwise.</p>

<p>That said, silliness, mockery, and general irreverence are welcome, expected, and even encouraged so long as they all come from a loving place.</p>

<p>However, should another participant&rsquo;s behavior be injurious to you, we ask three things.</p>

<h4>1) Give others the benefit of the doubt.</h4>

<p>People are generally decent. It has been our experience, these past several years, that those who attend WindyCityRails are just a cut above in that respect.</p>

<h4>2) Attempt to address the behavior with the other party immediately.</h4>

<p>In the case of intractable situations, we are here to help you (see &ldquo;Ask for Help!&rdquo; below). However, this is where we ask participants to try to behave &ldquo;like grown ups.&rdquo; It is part of the WindyCityRails ethos: If you have a problem with something, don&rsquo;t wait for someone to fix it but instead try to fix it yourself.</p>

<p>If you‚Äôre comfortable doing so, let the person know that you found what he or she said or did inappropriate. Attempt to resolve the situation amicably. When addressing it yourself, remember to continue to treat the other party with kindness and respect.</p>

<p>If you&rsquo;re uncomfortable approaching the other person‚Ä¶</p>

<h4>3) Ask for Help!</h4>

<p>We&rsquo;re all human. While life, and WindyCityRails, expects a good deal of self-sufficiency, we are also a community. If you cannot manage a situation alone, we are here for you. Seek out any member of the conference organizer team. We can be identified with special &ldquo;Organizer&rdquo; lanyards.</p>

<p>~WindyCityRails Organizers Team</p>

<h3>Conclusion</h3>

<p>Thanks for reading this through. See you at <a href="http://windycityrails.org">WindyCityRails</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Environment of Respect]]></title>
    <link href="http://RayHightower.com/blog/2014/01/21/an-environment-of-respect/"/>
    <updated>2014-01-21T13:16:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/01/21/an-environment-of-respect</id>
    <content type="html"><![CDATA[<p>Here is an early draft of the <a href="http://windycityrails.org">WindyCityRails</a> Code of Conduct:</p>

<blockquote><p>WindyCityRails strives to provide a healthy, harassment-free conference experience for all attendees. Our Code of Conduct, which has been practiced by members of our community for years, is as follows: Treat everyone at the conference as you would want yourself, a family member, or an esteemed colleague to be treated. Our community is stronger when every member contributes to the safety and learning of the other members. We are colleagues, and we treat each other with respect.</p></blockquote>

<p>There may be some wordsmithing and typo-correction this week, but the final version will essentially read as it appears above. Key objectives achieved:</p>

<ul>
<li>Simplicity. The point is made with minimal words.</li>
<li>Inclusiveness. Everybody who wants to learn and engage is included.</li>
<li>Respect. Everybody is treated with respect. No threats are made.</li>
</ul>


<p>You have already read the most important part of this post. The rest tells how the code came to be.</p>

<!--more-->


<h3>First Person Singular</h3>

<p>Normally, when discussing WindyCityRails and ChicagoRuby, I shine the light on the organizers as a team (we) rather than on myself. WindyCityRails is blessed with a great team of organizers. We pool our talents to get things done.</p>

<p>However, when concerns are raised, the buck stops with the team leader: me. Please forgive me for using first person pronouns throughout this post. Also, other members of the organizer team may have opinions that differ from mine. If I say anything here that disturbs you, please know that it comes from me directly. I am the only one at fault.</p>

<h3>My Knee-Jerk Response</h3>

<p>Last week a Twitter user asked if WindyCityRails had a code of conduct. I responded (through the @WindyCityRails handle) with a one-word answer: No.</p>

<p>Why the terse response? Because I have a deep bias against bureaucracy. Initially, that&rsquo;s what a code of conduct sounded like to me. Do we have a problem with diversity in the tech community? Hell yes. But bureaucracy does not solve problems. We will only solve the diversity problem through active engagement and real work. We solve the diversity problem by ensuring that people from all groups feel welcome and engaged.</p>

<p>One example of real work: The <a href="http://www.windycityrails.org/youth/">WindyCityRails Youth Program</a>, launched last year. A diverse group of college students taught a diverse group of high school students how to program the Arduino. These students from diverse backgrounds bonded via their common interest in technology.</p>

<p>To summarize my knee-jerk response: A code of conduct makes us feel good about nice words written on a sheet of paper, while no real work gets done.</p>

<h3>After My Initial Reaction</h3>

<p>Kindergarten taught me that it is important for me to listen to others. A community thrives on interaction between people who see things differently. If everyone thinks the same way, we don&rsquo;t have diversity, do we?</p>

<p>Other inquiries about a code of conduct followed via Twitter and email. All were helpful. Some people offered sample text from other events. Most of the sample text was good.</p>

<p>Two of my fellow organizers (thank you <a href="https://twitter.com/ginnyhendry">Ginny Hendry</a> and <a href="https://twitter.com/wondible">Justin Love</a>) encouraged me to examine the question more closely. Clearly, I needed to study this. So that is how I have spent the last few days.</p>

<h3>Simplicity</h3>

<p>In drafting text for WindyCityRails (and, by extension, ChicagoRuby) I tried to create something that fits our culture. We are an inclusive group and we treat people well.</p>

<p>At the same time, it is important to keep the word count low to limit bureaucracy.</p>

<h3>Inclusiveness</h3>

<p>The WindyCityRails and ChicagoRuby communities have always strived to be inclusive. We do that in several ways.</p>

<p>Here&rsquo;s an example. Before I became an organizer of ChicagoRuby, I heard that a group of developers met for drinks after every meeting. I always heard about the gathering after the fact. I could have taken this personally, but I realized that the group was not intentionally excluding me. They just didn&rsquo;t know me. Further, they were so caught up in their discussions that it simply never occurred to them to invite people they didn&rsquo;t know.</p>

<p>Things are different today. Today we announce the drink invitation at the beginning of each meeting, and we post it with every meeting announcement. Brand new people are made to feel welcome.</p>

<p>Further, we make it clear that one does not have to drink alcohol to participate. Soft drinks and cranberry juice are in abundance.</p>

<p>Another example of inclusiveness: All of ChicagoRuby&rsquo;s monthly events are free because we want to include aspiring developers regardless of income. Expenses for the monthly events are covered by monthly sponsors and revenue from WindyCityRails.</p>

<h3>Excluding Others</h3>

<p>I have more experience with racism than any other -ism, so that&rsquo;s what I&rsquo;ll talk about here. A mentor of mine raised two questions during a discussion about racism and oppression.</p>

<ul>
<li><p>Do you want to end all oppression, or just the oppression directed at you?</p></li>
<li><p>Do you really want to end oppression, or do you simply want to change places with your oppressor?</p></li>
</ul>


<p>Here&rsquo;s an experience that influences my thoughts on this subject. A few decades ago, when I was a young developer for a company in Colorado, I had a confrontation with senior developer, a White man. I was certain that this was a Black/White issue. I won&rsquo;t go into details, but I will admit that I treated that White man very badly in retaliation.</p>

<p>Some days later, as I walked past my manager&rsquo;s desk, I noticed my &ldquo;nemesis&rdquo; interacting with my manager (a White man who also happened to be his manager) in the same manner that he had interacted with me. That&rsquo;s when I figured out that this guy wasn&rsquo;t a racist, he was just an asshole.</p>

<p>And, because of the way I had treated him, I was the one guilty of racism.</p>

<p>In drafting the WindyCityRails code of conduct, it was important to avoid showing favoritism toward any group. All groups must be treated with respect, not just my own.</p>

<h3>Respect</h3>

<p>I was disturbed by the language in some of the sample codes of conduct. It took me awhile to figure out what bothered me. Finally, it hit me: The tone was threatening. They seemed to say (paraphrased): &ldquo;Follow these rules or we will kick you out and take away your money.&rdquo;</p>

<p>Colleagues don&rsquo;t threaten each other. Colleagues treat each other with respect.</p>

<p>Some may point out that without a method of enforcement, the code has no teeth. They&rsquo;re right. There are no teeth. However, I don&rsquo;t believe that &ldquo;teeth&rdquo; or threats are needed amongst colleagues. Colleagues treat each other with respect.</p>

<h3>Conclusion</h3>

<p>There you have it&hellip; my opinion. Can my opinion change? Perhaps. I have many blind spots, and that is why I am sharing my thought process. I look forward to hearing your feedback in the comments below or over a cup of coffee.</p>

<p>By the way, the <a href="http://www.windycityrails.org">WindyCityRails call for proposals</a> is still open, as of the date of this post. If you are doing something exciting with Ruby and/or Rails, please submit a proposal. Thanks.</p>

<h3><em>Update (Jan 2014)</em></h3>

<p><em>After this post, several colleagues introduced me to new information.  The result, an updated code of conduct, is covered in <a href="http://RayHightower.com/blog/2014/01/28/an-environment-of-respect-2nd-iteration/">An Environment of Respect, 2nd Iteration</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Henry Ford's Faster Horse]]></title>
    <link href="http://RayHightower.com/blog/2014/01/15/henry-ford-faster-horse/"/>
    <updated>2014-01-15T13:49:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/01/15/henry-ford-faster-horse</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/ford-model-t-1910.jpg' width='' height='' alt='1910 Ford Model T' title='1910 Ford Model T'><span class='caption-text'>1910 Ford Model T</span></span></p>

<blockquote><p>If I had asked people what they wanted, they would have asked for a faster horse.</p>

<p>~Henry Ford</p></blockquote>

<p>The above Henry Ford quote is often cited in presentations about innovation. The point of the quote: An inventor who listens to customers too closely, without observing customer behavior, will reap tiny improvements at best. Ford ignored the request for &ldquo;a faster horse&rdquo;, and that is how the Ford Motor Company became a leader in the early auto industry.</p>

<p>That&rsquo;s one way to interpret Ford&rsquo;s quote. Last night, I was introduced to another view.</p>

<!--more-->


<h3>Parse the Quote Differently, Don&rsquo;t Ignore it</h3>

<p>Last night&rsquo;s <a href="http://www.ixdachicago.org">IxDA Chicago</a> meeting featured a presentation by <a href="http://chris-holmes.com">Chris Holmes</a>, who shared a different view of the Ford quote. If we focus on improving the speed of horses (perhaps through nutrition or better horse shoes) very little improvement can be achived.</p>

<p>But something interesting happens when we parse the quote differently. The adjective <em>faster</em> reveals the customer&rsquo;s true need. The noun <em>horse</em> is the customer&rsquo;s &ldquo;solution&rdquo; based on what they currently know about the world. For the innovator, <em>faster</em> stands out. Focusing on <em>faster</em> leads to innovation.</p>

<h3>Focus on Faster</h3>

<p><em>Faster</em> tells us that we can stretch beyond our current thinking and consider other modes of transportation. Focusing on <em>faster</em> led to the beginning of the automobile industry.</p>

<p>Customers are communicating their desires all the time. We need to listen carefully and parse well. Thanks IxDA Chicago and Chris Holmes for the lesson.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BeagleBone Black Running Ubuntu: Part2 (Plus Ruby on Rails)]]></title>
    <link href="http://RayHightower.com/blog/2014/01/06/beaglebone-black-ubuntu-ruby-rails-part-2/"/>
    <updated>2014-01-06T02:31:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/01/06/beaglebone-black-ubuntu-ruby-rails-part-2</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/ruby-rails-ubuntu-beaglebone-black.png' width='' height='' alt='Ruby. Rails. Ubuntu. BeagleBone Black.' title='Ruby. Rails. Ubuntu. BeagleBone Black.'><span class='caption-text'>Ruby. Rails. Ubuntu. BeagleBone Black.</span></span></p>

<p>Part one of this series shows <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">how to install Ubuntu on the BeagleBone Black</a>. We used a MacBook Pro to burn an Ubuntu disk image onto an SD card, and then we booted a BeagleBone Black from the image we created.</p>

<p>This post, part two, covers the installation of the Ubuntu GUI, Ruby, and Rails. All of the commands in this article are run on the BeagleBone Black.</p>

<p><a href="http://nodejs.org">Node.js</a> bonus: Rails requires a JavaScript runtime, and Node.js offered the quickest way to fulfill this requirement. Details appear within.</p>

<h3>Gotcha: Partition Size</h3>

<p>At the end of <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">part one</a>, we successfully booted the Bone with the Ubuntu command line interface. Now it&rsquo;s time to add the GUI. Two things to know about the Ubuntu GUI installation&hellip;</p>

<!--more-->


<ul>
<li>The partition we created on the SD card (in part one) is too small to hold the Ubuntu GUI. Solution: The SD card has some extra room, and we can re-size the partition.</li>
<li>We can install the Ubuntu GUI with a single line command. But it takes an hour for the Bone to download, compile, and install all of the GUI libraries.</li>
</ul>


<p>If we try to install the GUI with insufficient space, the installation will fail midway and we will have wasted half an hour. So it&rsquo;s best to re-size first.</p>

<h3>Doing Our Own Re-Sizing?</h3>

<p>Why didn&rsquo;t the partition have the right size when we originally downloaded the image file? Good question.</p>

<p>My guess: The image file was designed to be as small as possible in order to minimize download time. That makes sense. I plan to test this theory by creating a new image with a larger partition size and a pre-installed GUI. If the test is successful, results will be posted on this blog. If the mission fails, then the secretary will disavow any knowledge&hellip;</p>

<h3>How to Re-Size the Partition</h3>

<p><code>df</code> is the Unix &lsquo;disk free&rsquo; command. It shows used/available disk space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>df
</span><span class='line'>
</span><span class='line'>Filesystem     1K-blocks    Used Available Use% Mounted on
</span><span class='line'>rootfs           3778576 2722944    885776  76% /
</span><span class='line'>/dev/root        3778576 2722944    885776  76% /
</span><span class='line'>devtmpfs          253580       4    253576   1% /dev
</span><span class='line'>none               50748     608     50140   2% /run
</span><span class='line'>none                5120       0      5120   0% /run/lock
</span><span class='line'>none              253728     204    253524   1% /run/shm
</span><span class='line'>/dev/mmcblk0p1      1004     480       524  48% /boot/uboot
</span><span class='line'>/dev/mmcblk1p1     65390    6536     58854  10% /media/boot
</span><span class='line'>/dev/mmcblk1p2   1748200    2664   1655068   1% /media/rootfs
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ll</code> is one of the useful aliases built into Ubuntu&rsquo;s <code>.bashrc</code> file. We
can use it to examine the partitions on the SD card.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>ll /dev/mmcblk*
</span><span class='line'>
</span><span class='line'>brw-rw---- 1 root disk 179,  0 Jan  5 15:37 /dev/mmcblk0
</span><span class='line'>brw-rw---- 1 root disk 179,  1 Jan  1  2000 /dev/mmcblk0p1
</span><span class='line'>brw-rw---- 1 root disk 179,  2 Jan  1  2000 /dev/mmcblk0p2
</span><span class='line'>brw-rw---- 1 root disk 179,  8 Jan  1  2000 /dev/mmcblk1
</span><span class='line'>brw-rw---- 1 root disk 179, 16 Jan  1  2000 /dev/mmcblk1boot0
</span><span class='line'>brw-rw---- 1 root disk 179, 24 Jan  1  2000 /dev/mmcblk1boot1
</span><span class='line'>brw-rw---- 1 root disk 179,  9 Jan  1  2000 /dev/mmcblk1p1
</span><span class='line'>brw-rw---- 1 root disk 179, 10 Jan  1  2000 /dev/mmcblk1p2
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fdisk</code> will resize the partition we&rsquo;re after. <code>root</code> priviledges are required to modify the partition table, so we&rsquo;ll use <code>sudo</code>. The standard <a href="http://RayHightower.com/sudo-disclaimer">sudo disclaimer</a> applies.</p>

<p>A few useful <code>fdisk</code> commands:</p>

<ul>
<li><code>p</code> prints the partition table.</li>
<li><code>d</code> deletes a partition.</li>
<li><code>n</code> creates a new partition.</li>
<li><code>w</code> write new information to the partition table.</li>
<li><code>q</code> quits fdisk.</li>
</ul>


<p>Here&rsquo;s the plan: In order to increase the size of <code>/dev/mmcblk0p2</code>, we will delete it, and then re-create it with a larger size. Note the use of the <code>d</code> and <code>n</code> commands in the following sequence. When <code>fdisk</code> asks us for the new partition number, type, first sector, and last sector, we will choose the defaults. Choosing the defaults will use all of the available space on the SD card.</p>

<p>Your numbers will vary depending on the size and configuration of your SD card, but the general procedure will be the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>sudo fdisk /dev/mmcblk0
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>ubuntu:
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: p
</span><span class='line'>
</span><span class='line'>Disk /dev/mmcblk0: 3965 MB, 3965190144 bytes
</span><span class='line'>4 heads, 16 sectors/track, 121008 cylinders, total 7744512 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x80008000
</span><span class='line'>
</span><span class='line'>        Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/mmcblk0p1   *        2048      133119       65536    e  W95 FAT16 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class='line'>/dev/mmcblk0p2          133120     1638399      752640   83  Linux
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: d
</span><span class='line'>Partition number <span class="o">(</span>1-4<span class="o">)</span>: 2
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: p
</span><span class='line'>
</span><span class='line'>Disk /dev/mmcblk0: 3965 MB, 3965190144 bytes
</span><span class='line'>4 heads, 16 sectors/track, 121008 cylinders, total 7744512 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x80008000
</span><span class='line'>
</span><span class='line'>        Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/mmcblk0p1   *        2048      133119       65536    e  W95 FAT16 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: n
</span><span class='line'>Partition <span class="nb">type</span>:
</span><span class='line'>   p   primary <span class="o">(</span>1 primary, 0 extended, 3 free<span class="o">)</span>
</span><span class='line'>   e   extended
</span><span class='line'>Select <span class="o">(</span>default p<span class="o">)</span>: p
</span><span class='line'>Partition number <span class="o">(</span>1-4, default 2<span class="o">)</span>: 2
</span><span class='line'>First sector <span class="o">(</span>133120-7744511, default 133120<span class="o">)</span>:
</span><span class='line'>Using default value 133120
</span><span class='line'>Last sector, +sectors or +size<span class="o">{</span>K,M,G<span class="o">}</span> <span class="o">(</span>133120-7444511, default 7744511<span class="o">)</span>:
</span><span class='line'>Using default value 7744511
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: p
</span><span class='line'>
</span><span class='line'>Disk /dev/mmcblk0: 3965 MB, 3965190144 bytes
</span><span class='line'>4 heads, 16 sectors/track, 121008 cylinders, total 7744512 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x80008000
</span><span class='line'>
</span><span class='line'>        Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/mmcblk0p1   *        2048      133119       65536    e  W95 FAT16 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class='line'>/dev/mmcblk0p2          133120     7744511     3805696   83  Linux
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: w
</span><span class='line'>The partition table has been altered!
</span><span class='line'>
</span><span class='line'>Calling ioctl<span class="o">()</span> to re-read partition table.
</span><span class='line'>
</span><span class='line'>Warning: Re-reading the partition table failed with error 16: Device or resource busy.
</span><span class='line'>The kernel still uses the old table. The new table will b eused at
</span><span class='line'>the next reboot or after you run partprobe<span class="o">(</span>8<span class="o">)</span> or kpartx<span class="o">(</span>8<span class="o">)</span>
</span><span class='line'>Syncing disks.
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The warning/error message at the end just means that we need reboot the Bone before the partition table takes effect.</p>

<p>Reboot the BeagleBone Black, holding down the boot switch (closest to
the USB port) to ensure that we boot to the system on the SD card
instead of the eMMC.</p>

<p>After the Bone reboots, run <code>resize2fs</code> to expand the partition created above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>sudo resize2fs /dev/mmcblk0p2
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>ubuntu:
</span><span class='line'>resize2fs 1.42.5 <span class="o">(</span>29-Jul-2012<span class="o">)</span>
</span><span class='line'>Filesystem at /dev/mmcblk0p2 is mounted on /; on-line resizing required
</span><span class='line'><span class="nv">old_desc_blocks</span> <span class="o">=</span> 1, <span class="nv">new_desc_blocks</span> <span class="o">=</span> 1
</span><span class='line'>The filesystem on /dev/mmcblk0p2 is now 951424 blocks long.
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we have enough room to install the Ubuntu GUI.</p>

<h3>Installing the Ubuntu GUI</h3>

<p><em>Update (Feb2014): In the comments below, Jonathan Chan describes how he updated the desktop installation files before installing the Ubuntu desktop. To update the desktop installation files, grab the latest list of packages (<code>update</code>) and then <code>upgrade</code> the packages that need it.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get upgrade
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>After the partition on the SD card has been resized, this command will intall the GUI. The command is short, but the process takes about an hour:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install ubuntu-desktop
</span></code></pre></td></tr></table></div></figure>


<p>When installation and compilation are complete, Ubuntu will return to the command prompt. Here&rsquo;s how to reboot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>Several minutes later, the Ubuntu 12 GUI will appear. Congratulations!  Login using the default credentials (login: ubuntu, pw: ubuntu) to get to the Ubuntu desktop.</p>

<h3>Gotcha: Running RVM</h3>

<p>I prefer to use the Ruby Version Manager (RVM) for bouncing between Ruby versions. RVM misbehaved, initially. Then I learned something special about RVM&rsquo;s interaction with Ubuntu. From the RVM support pages‚Ä¶</p>

<blockquote><p>For RVM to work properly, you have to set the &lsquo;Run command as login shell&rsquo; checkbox on the Title and Command tab inside of gnome-terminal&rsquo;s Settings page.</p></blockquote>

<p>This image shows the checkbox mentioned in the quote. It&rsquo;s inside of the lower red rectangle.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://RayHightower.com/images/rvm-ubuntu-run-command_as_login-shell.jpg' width='' height='' alt='RVM: Run command as login shell.' title='RVM: Run command as login shell.'><span class='caption-text'>RVM: Run command as login shell.</span></span></p>

<p>Details are in the RVM support article <a href="http://rvm.io/integration/gnome-terminal">Integrating RVM with gnome-terminal</a>.</p>

<h3>Gotcha: Ruby Installation</h3>

<p>Ruby installation initially failed (speculation) because the Bone went into power save mode during the installation process. Ruby installed successfully on the second try when I kept the machine awake by moving the mouse. This <em>power save hypothesis</em> has not been thoroughly tested.</p>

<h3>Gotcha: Rails Installation</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/nodejs-white.png' width='' height='' alt='Node.js on BeagleBone Black.' title='Node.js on BeagleBone Black.'><span class='caption-text'>Node.js on BeagleBone Black.</span></span>
Rails needs a JavaScript runtime in order to function. Here are two ways to meet this requirement:</p>

<ul>
<li>Install Node.js, or</li>
<li>Install <a href="http://rubygems.org/gems/therubyracer">therubyracer</a> gem.</li>
</ul>


<p>Installing <code>therubyracer</code> did not work for me. But Node.js installed quickly, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install nodejs
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a JavaScript runtime, Rails runs successfully.</p>

<p>Side note: If you want to see what a Node.js-equipped Bone can do, check
out <a href="http://openrov.com">OpenROV</a>.</p>

<h3>Conclusion</h3>

<p>Bottom line: Ruby, Rails, and Ubuntu can run successfully on BeagleBone Black, with Node.js as a bonus.</p>

<p>The BeagleBone Black is a cool option for running Ubuntu. Yes, it runs slower than a typical laptop. But it runs, and at $45 each we can build a cluster of Bones if we&rsquo;re concerned about performance!</p>

<p>What an amazing bundle of technology.</p>

<p><em>You might also be interested in <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Ruby on Raspberry Pi</a></em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BeagleBone Black Running Ubuntu: Part1]]></title>
    <link href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/"/>
    <updated>2014-01-02T15:59:00-08:00</updated>
    <id>http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='http://RayHightower.com/images/beaglebone-black-ubuntu-ruby-rails.jpg' width='' height='' alt='BeagleBone Black running Ubuntu, Ruby, & Rails.' title='BeagleBone Black running Ubuntu, Ruby, & Rails.'><span class='caption-text'>BeagleBone Black running Ubuntu, Ruby, &amp; Rails.</span></span></p>

<p>The above screenshot shows a BeagleBone Black running Ubuntu, Ruby, and Rails. Why Ubuntu? The Bone comes <a href="http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">pre-installed with √Öngstr√∂m</a>, and it boots as soon as you unbox it. Why not stick with √Öngstr√∂m?</p>

<p>My opinion: The factory standard is fine, but it&rsquo;s always good to have options. Here&rsquo;s why I decided to try Ubuntu on the BeagleBone Black&hellip;</p>

<!--more-->


<ul>
<li>Ubuntu documentation is plentiful. Books, blogs, and videos are readily available.</li>
<li>The Ubuntu community is huge. When a dev runs into an Ubuntu-related snag, it&rsquo;s likely that another dev has encountered a similar problem, and they can collaborate on a solution.</li>
<li>Ubuntu is the distro that I&rsquo;m most familiar with. <a href="http://wisdomgroup.com">WisdomGroup</a> uses Ubuntu for multiple projects. With a common operating system, knowledge gained in one environment is immediately useful in another.</li>
<li>Prepping for <a href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a>, the 64-core single-board computer that will cost about two hundred bucks. The Parallella is currently in short supply. When it becomes available, it will run Ubuntu. Experience with other single-board computers, especially those running Ubuntu, will prove useful.</li>
</ul>


<p>This article will show how to install Ubuntu on the BeagleBone Black. <em>Gotchas</em> will be pointed out along the way. Where possible, I will explain the reasons behind my decisions so that you can make different choices if you like.</p>

<p>For a comparable examination of the Raspberry Pi, take a look at <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Ruby on Raspberry Pi</a>.</p>

<h3>First Gotcha: Ubuntu 13 on the Bone</h3>

<p>As of this writing, Ubuntu 12 runs well on the BeagleBone Black, but Ubuntu 13 does not. My Ubuntu 13 installation appeared to be successful, but the Ubuntu 13 GUI hung up immediately after login. The Ubuntu 13 command line interface worked fine.</p>

<p>A quick search on Google reveals that others encountered similar roadblocks with version 13. One successful Bone/13 installation was used via SSH, not interactively via keyboard and GUI. Hopefully this will change with future updates. Or, since we&rsquo;re dealing in the open source world, maybe I can pitch in and help.</p>

<p>Due to the issues encountered with version 13, everything in this article will focus on Ubuntu 12.</p>

<h3>Materials Needed for Installing Ubuntu 12</h3>

<p>In addition to the BeagleBone Black, the following items should be gathered before installation:</p>

<ul>
<li>Micro SD card of at least 8GB. It&rsquo;s possible to perform the installation with a 4GB card, but that won&rsquo;t leave much room for Ubuntu applications.</li>
<li>SD card reader/writer. Recent versions of Apple&rsquo;s MacBook Pro come with an SD reader/writer built in.</li>
<li>SD to Micro-SD card adapter. The Bone is designed for micro SD, and the MacBook Pro is designed for full-sized SD. Some micro SD packages come with the adapter.</li>
<li>A monitor that accepts HDMI input.</li>
<li>USB keyboard and mouse.</li>
<li>Micro HDMI to HDMI adapter. The Bone uses micro HDMI for video output, but your monitor probably uses full-sized HDMI.</li>
<li>External 5V power adapter for the Bone. Personally, I trust the standard 5v power input more than I trust the power provided via USB. One never knows if USB can provide sufficient (and stable) amperage for a circuit board. Power fluctuations can lead to strange behavior, including video flickering.</li>
<li>Ethernet cable with RJ-45 ends.</li>
<li>A fast internet connection.</li>
</ul>


<p>The standard <a href="http://RayHightower.com/sudo-disclaimer">sudo disclaimer</a> applies.</p>

<h3>Homebrew Required</h3>

<p>Homebrew is the easiest way to install &lsquo;nix utilities on Mac OS X. We need Homebrew in order to install some of the utilities needed to burn the SD card. The one-line Homebrew installation command is given on the  <a href="http://brew.sh/">Homebrew site</a>.</p>

<p>Each time we use Homebrew, we run <code>$ brew doctor</code> and <code>$ brew update</code> to make sure the packages are up-to-date.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>Warning: Your Homebrew is outdated.
</span><span class='line'>You haven<span class="err">&#39;</span>t updated <span class="k">for </span>at least 24 hours, this is a long <span class="nb">time </span>in brewland!
</span><span class='line'>To update Homebrew, run <span class="sb">`</span>brew update<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from a2e44659 to 4c7bc9ec.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>Your system is ready to brew.
</span></code></pre></td></tr></table></div></figure>


<h3>The xz Extraction Utility</h3>

<p>Disk image files are downloaded in a compressed format. We need the <code>xz</code> utility in order to extract the files into something usable. If you already have Homebrew installed, this command will install <code>xz</code> for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install xz
</span></code></pre></td></tr></table></div></figure>


<h3>Test the BeagleBone Black First</h3>

<p>Power up your BeagleBone Black and make sure it runs with the built-in √Öngstr√∂m Linux installation. One great thing about the Bone is that it will <a href="http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">boot to the √Öngstr√∂m GUI</a> straight out of the box, with no prior configuration.</p>

<p>If the GUI boots, then you&rsquo;re in good shape.</p>

<p>If the GUI doesn&rsquo;t boot, it may have been damaged in a prior experiement. Embarassing note: I started looking for a way to install Ubuntu on the Bone because I broke my √Öngstr√∂m installation. What can I say&hellip; I learn more from destructive experiments. Faced with a non-booting Bone, I had two choices.</p>

<ol>
<li>Re-build √Öngstr√∂m.</li>
<li>Try something different, like Ubuntu.</li>
</ol>


<p>Option two worked well!</p>

<h3>Prep the SD Card</h3>

<p>Apple&rsquo;s Disk Utility is a convenient tool for wiping the SD card.  Standard warnings about any disk utility apply. Double-check everything, and make sure you&rsquo;re wiping the right volume, or you could lose all of your data.</p>

<p>Next, download the Ubuntu 12.04 image from <a href="http://www.armhf.com/index.php/boards/beaglebone-black/#precise">http://armhf.com</a>.</p>

<p>Extract the image using the <code>xz</code> utility.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xz ubuntu-precise-12.04.3-armhf-3.8.13-bone30.img.xz
</span></code></pre></td></tr></table></div></figure>


<p>The extracted image will have a <code>.img</code> file extension. We will use the <code>dd</code> utility to burn the disk image to the SD card. But first, we need to determine the designation of the SD card.</p>

<h3>Find the SD Card Designation</h3>

<p>In order to burn the SD card, we need to make sure we target it correctly. Here&rsquo;s how to figure out which device to target.</p>

<p><code>$ diskutil list</code> will show all of the partitions mounted on the system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>diskutil list
</span><span class='line'>/dev/disk0
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:      GUID_partition_scheme                        *500.3 GB   disk0
</span><span class='line'>   1:                        EFI                         209.7 MB   disk0s1
</span><span class='line'>   2:                  Apple_HFS Macintosh HD            499.4 GB   disk0s2
</span><span class='line'>   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
</span><span class='line'>/dev/disk1
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:     FDisk_partition_scheme                        *8.0 GB     disk1
</span></code></pre></td></tr></table></div></figure>


<p>I happen to know that my SD Card is 8.0 GB in capacity, and my system also has a 500 GB SSD. The goal is to burn the SD card while leaving the 500 GB SSD (home of the Mac OS X operating system and all of my data) intact. From the <code>$ diskutil list</code> report, I can see that the SD card&rsquo;s designation <em>in my system</em> is <code>/dev/disk1</code>.</p>

<p>Note the italicized words <em>in my system</em>. Your system is probably different, especially if you have a DVD drive or a second hard drive. I have neither of those. The SD card&rsquo;s designation will be different in each system where it is mounted depending on the number and location of the drives that are already there.</p>

<p>Now that we know the SD card&rsquo;s designation, we can unmount it. We unmount the drive (but leave the card inserted in the reader) so that it can be written with the Ubuntu disk image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>diskutil unmountDisk /dev/disk1
</span><span class='line'>Unmount of all volumes on disk1 was successful
</span></code></pre></td></tr></table></div></figure>


<p>Looks like the SD card was unmounted successfully. Now we can write the
Ubuntu image with the <code>dd</code> utility.</p>

<h3>Writing the Ubuntu Image</h3>

<p>The following command will write the decompressed Ubuntu image to the SD
card.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo dd <span class="nv">bs</span><span class="o">=</span>1m <span class="k">if</span><span class="o">=</span>ubuntu-precise-12.04.3-armhf-3.8.13-bone30.img <span class="nv">of</span><span class="o">=</span>/dev/disk1
</span></code></pre></td></tr></table></div></figure>


<p>Note that it may take up to an hour for the image to be written.</p>

<p>One drawback of using the command line is that there is no gauge to tell you how much progress the utility is making. Fortunately, I stumbled upon a way to measure progress at <a href="http://elinux.org">eLinux.org</a>. While the command line utility is running, and while that window has focus, type <code>control-T</code>. A few seconds later, the terminal window will show a brief activity report.</p>

<p>Here&rsquo;s a report from the first time I struck <code>control-T</code> &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>load: 2.03  cmd: dd 75608 uninterruptible 0.00u 0.54s
</span><span class='line'>40+0 records in
</span><span class='line'>39+0 records out
</span></code></pre></td></tr></table></div></figure>


<p>We can strike <code>control-T</code> again to receive additional updates. The numbers will tell us if we are making progress. Don&rsquo;t get carried away with <code>control-T</code>. A watched pot never boils :&ndash;)</p>

<h3>Booting with the New SD Card</h3>

<p>The terminal will return to the command prompt after the Ubuntu image has been written to the SD card. Now it&rsquo;s time to boot with the new image.</p>

<ol>
<li>Eject the SD card from the Mac.</li>
<li>Remove power from the BeagleBone Black, and insert the micro SD card.</li>
<li>Note the location of the &ldquo;boot&rdquo; button on the Bone. It&rsquo;s the micro switch closest to the USB port. We will need to hold this switch down while powering up the Bone.</li>
</ol>


<p>A few notes about item #3. It takes some juggling to hold down a micro switch while plugging in power to the board. I found it easier to plug the power adapter into a powered-off surge suppressor, hold down the microswitch, and then power-on the surge suppressor with my elbow.  Sounds ridiculous, but it worked.</p>

<p>About sixty seconds after boot, the Linux penguin appeared in the upper left corner of the Bone display. And then the login prompt appeared.</p>

<p>Another note about the &ldquo;boot&rdquo; switch: It looks like the Bone will boot into the SD&rsquo;s operating system (instead of the eMMC flash OS where Angstrom resides) without the micro switch if the switch was used in the previous boot. I haven&rsquo;t rebooted enough times to test this thoroughly.</p>

<h3>Default Credentials for Ubuntu on BeagleBone Black</h3>

<p>Ubuntu&rsquo;s default BeagleBone Black login credentials are shown here because I always end up hunting for these when I need them. It&rsquo;s much easier to have information at one&rsquo;s fingertips.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>login: ubuntu
</span><span class='line'>pw: ubuntu
</span></code></pre></td></tr></table></div></figure>


<h3>End of Part One</h3>

<p>This marks the end of part one of this series about BeagleBone Black and Ubuntu.</p>

<p><a href="http://RayHightower.com/blog/2014/01/06/beaglebone-black-ubuntu-ruby-rails-part-2/">Part two</a> covers <a href="http://RayHightower.com/blog/2014/01/06/beaglebone-black-ubuntu-ruby-rails-part-2/">Ruby on BeagleBone Black</a>, with information about&hellip;</p>

<ul>
<li>Getting the GUI running, including a disk resizing <em>gotcha</em>.</li>
<li>Installing Ruby, including a Ruby Version Manager (RVM) <em>gotcha</em>.</li>
<li>Installing Rails, and how to handle a JavaScript runtime <em>gotcha</em>.</li>
</ul>


<p>Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
