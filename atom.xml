<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RayHightower.com]]></title>
  <link href="http://RayHightower.com/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-07-27T14:02:30-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LinuxBarbados is Global]]></title>
    <link href="http://RayHightower.com/blog/2014/07/25/linuxbarbados-is-global/"/>
    <updated>2014-07-25T15:36:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/25/linuxbarbados-is-global</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/LinuxBarbados-tux-logo_300.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
LinuxBarbados is a user group for open source enthusiasts. The group meets monthly, offering solid knowledge for anyone who wants to ramp up their open source skills. For example, yesterday’s meeting featured a presentation on <a href="http://xbmc.org/">XBMC</a> by Michael Layne. The presenter dug deep into the tool, offering tips on how to write plugins in C++ or Python.</p>

<!--more-->


<h3>Global Reach</h3>

<p>The group is based in Barbados on the campus of the <a href="http://www.cavehill.uwi.edu/">University of the West Indies (UWI) at Cave Hill</a>. Enthusiasts who don’t live in Barbados can participate <em>live</em> online. So far the group has used Google Hangout for video. Other video solutions will be considered as the group continues to grow.</p>

<h3>Next Steps</h3>

<p>Organizers <a href="http://www.meetup.com/LinuxBarbados/members/143194822/">Maurice Beckles</a> and <a href="http://www.meetup.com/LinuxBarbados/members/153574612/">Michael Layne</a> have exciting plans for the group. Take a look at the LinuxBarbados calendar, and join <a href="http://linuxbarbados.org">LinuxBarbados</a> online if you want to hear about future events.</p>

<p>Whether you live in the Caribbean or in Antarctica, we look forward to seeing you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudCamp Chicago: Developer Night]]></title>
    <link href="http://RayHightower.com/blog/2014/07/25/cloudcamp-chicago-developer-night/"/>
    <updated>2014-07-25T15:09:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/25/cloudcamp-chicago-developer-night</id>
    <content type="html"><![CDATA[<p><a href="http://cohesiveft.com">CohesiveFT</a> hosted a CloudCamp Developer Night this week. Speakers were Philip Szalwinski of 8th Light, John Downey of Braintree, Marcy Capron of Polymathic, and me. My presentation, <a href="http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov/">Citizen Science With OpenROV</a>, was based on the blog post of the same name.</p>

<p>Thank you <a href="https://twitter.com/MargieWalker">Margaret Walker</a> for running a great event. Slides appear below.</p>

<!--more-->


<script async class="speakerdeck-embed" data-id="4d87fa90f65e0131729a0a98c369402e" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM and Parallella: What a Difference a Shell Makes]]></title>
    <link href="http://RayHightower.com/blog/2014/07/21/rvm-and-parallella-what-a-difference-a-shell-makes/"/>
    <updated>2014-07-21T21:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/21/rvm-and-parallella-what-a-difference-a-shell-makes</id>
    <content type="html"><![CDATA[<p><a href="http://RayHightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a> is an effective way to manage Ruby versions on Linux or OS X. RVM was working well on my Ubuntu-based <a href="http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/">Parallella</a>, until one day it stopped:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; rvm list
</span><span class='line'>rvm: Command not found.
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>rvm: Command not found.</code> Fortunately, <a href="https://twitter.com/theotherzach">Zach Briggs</a> and I were pairing at a joint OpenHack &ndash; ChicagoRuby event when the problem occurred. Zach is an ideal pairing partner; troubleshooting was smooth because he was there. Time to investigate.</p>

<!--more-->


<h3>Explicit Path</h3>

<p>After a few experiments, we discovered that we could run RVM by explicitly specifying the path to the executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; ~/.rvm/bin/rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-2.0.0-p481 <span class="o">[</span> armv7l <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Default ruby not set. Try &#39;rvm alias create default &lt;ruby&gt;&#39;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, it appeared that the Ubuntu/Linux <code>$PATH</code> variable was being ignored. Google led us to consider the shell in use on the Parallella.</p>

<h3>Which Shell Is In Use?</h3>

<p>The shell is just a program that lets humans talk to the Linux operating system through a command line interface. Several shell programs exist. Linux users tend to prefer one shell or another. The <code>$SHELL</code> environmental variable points to the one in use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; <span class="nb">echo</span> <span class="nv">$SHELL</span>
</span><span class='line'>/bin/tcsh
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Very interesting. <code>tcsh</code> was the current Parallella shell. I&rsquo;m more accustomed to <code>bash</code>. Could RVM prefer <code>bash</code> too? We changed one line of <code>/etc/passwd</code> to tell the Parallella to start with <code>bash</code> instead of <code>tcsh</code> and rebooted the Parallella.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; <span class="nb">echo</span> <span class="nv">$SHELL</span>
</span><span class='line'>/bin/bash
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and now RVM works normally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>   ruby-2.0.0-p481 <span class="o">[</span> armv7l <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Default ruby not set. Try &#39;rvm alias create default &lt;ruby&gt;&#39;.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =&gt; - current</span>
</span><span class='line'><span class="c"># =* - current &amp;&amp; default</span>
</span><span class='line'><span class="c">#  * - default</span>
</span><span class='line'>
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>Consider Fish?</h3>

<p>Right after this exercise, Zach and <a href="http://twitter.com/josh_cheek">Josh Cheek</a> had a Twitter conversation about a shell called <a href="http://fishshell.com/">fish</a>. Something new and shiny to explore!</p>

<h3>Original Plan: Rubinius</h3>

<p>Did I mention that we originally planned to install <a href="http://RayHightower.com/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a> on the Parallella? Where there are goals, there are yaks waiting to be shaved!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallella Quick Start Guide (with gotchas)]]></title>
    <link href="http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/"/>
    <updated>2014-07-07T13:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='http://RayHightower.com/images/parallella_screenshot.png' width='' height='' alt='Parallella screenshot, 1080p.' title='Parallella screenshot, 1080p.'><span class='caption-text'>Parallella screenshot, 1080p.</span></span>
Parallella is a single-board supercomputer smaller than a deck of cards. While today’s fastest laptops contain four processor cores, Parallella has <em>eighteen</em> (2 <a href="http://arm.com/">ARM</a> cores plus an <a href="http://www.adapteva.com/epiphanyiii/">Epiphany</a> chip with 16 <a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computing">RISC</a> cores). The maker of Parallella, <a href="http://adapteva.com">Adapteva</a>, is on a mission to democratize parallel computing. The company&rsquo;s tag line is <em>Supercomputing for Everyone</em>.</p>

<!--more-->


<p>Everything in this post is based on the <a href="http://www.parallella.org/quick-start/">official quick start guide created by the Parallella team</a>. These instructions are tailored for a Mac running OS X Mavericks (10.9.3) and a Parallella-16 equipped with the Zynq 7010 chip. I ran into some <em>gotchas</em> during my first Parallella experience. The snags (and solutions) are documented here.</p>

<h3>Tools Required</h3>

<p>You will need the following items in order to burn an SD card for your
Parallella:</p>

<ul>
<li>Micro-SD card, 16GB or greater.</li>
<li>Desktop or laptop computer with a micro-SD card reader, or an SD-card reader with a micro adapter. These instructions are tailored for a Mac. A Linux or Windows machine will work with minor modifications in the procedure.</li>
<li>High-speed internet connection, for downloading Parallella&rsquo;s Ubuntu
image and related files.</li>
<li>Micro-USB-to-USB adapter, for the keyboard and mouse. Parallella is equipped with two micro-USB ports.</li>
<li>Micro-HDMI to HDMI cable or adapter.</li>
<li>Parallella (of course!)</li>
</ul>


<p>Adapteva sells an accessories kit containing an SD card, power adapter, micro-HDMI to HDMI cable, and USB-to-micro-USB adapter. Unless you already have these items, buying the kit may save you time.</p>

<h3>These Steps Could Break Your Primary Machine</h3>

<p>Since you&rsquo;re experimenting with Parallella, we can assume that you are an advanced user. Your computer is already backed up, or you&rsquo;re running these steps on a test machine. And you know <a href="http://RayHightower.com/sudo-disclaimer/">the power and pitfalls of sudo</a>. Technology evolves rapidly, and everything you read here could change by the time you read it.</p>

<h3>Comparison with Raspberry Pi or Beaglebone Black</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/parallella_fan.jpg' width='' height='' alt='Bits get hot. Use a fan.' title='Bits get hot. Use a fan.'><span class='caption-text'>Bits get hot. Use a fan.</span></span>
How does the Parallella compare with other single-board computers, like the <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> or <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>? The first difference noticed at boot-time: Parallella runs hot! So hot, in fact, that the unit comes with a heat sink and the recommendation to add a fan. I’ve never needed a fan with a Pi or a ‘Bone.</p>

<p>Of course, the Parallella runs hotter because it has more processing power packed tightly together in limited space. Since Parallella is designed to run tasks in parallel, we can expect certain programs to perform faster than they would on the Pi or &lsquo;Bone. Future posts will explore Parallella&rsquo;s performance using languages designed for concurrency, languages like <a href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Go</a> and <a href="http://RayHightower.com/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a>. Now, let’s get started with Parallella.</p>

<h3>Getting the Parallella OS</h3>

<p>Parallella runs a customized version of Ubuntu installed on a micro-SD card. Burning the SD card takes a long time, so it makes sense to start that process first.</p>

<p>Download the files that you will need to burn onto the SD card. I&rsquo;m running Mac OS X on my primary machine, and I&rsquo;m configuring a Parallella-16 with a Zynq 7010 and an HDMI display. Therefore, the files needed for this configuration are:</p>

<ul>
<li><a href="http://downloads.parallella.org/ubuntu/dists/trusty/image/ubuntu-14.04-140611.img.gz">Ubuntu 14.04 for Parallella</a> (released June 11, 2014)</li>
<li><a href="http://downloads.parallella.org/boot/linux/kernel-hdmi-default.tgz">Linux kernel with HDMI support</a></li>
<li><a href="https://github.com/parallella/parallella-hw/blob/master/fpga/bitstreams/parallella_e16_hdmi_gpiose_7010.bit.bin?raw=true">Parallella-16 Zynq 7010 with HDMI display</a></li>
</ul>


<p>Unzip the files and place them in a directory that&rsquo;s handy. You&rsquo;ll need them for the next step. With Mac OS X, you can unzip the files by double-clicking them in <code>Finder</code>.</p>

<p>Note: You might need different files depending on the current date (Parallella software is in a rapid state of flux) and your exact equipment. If your configuration is different, you can make the adjustments described in Parallella&rsquo;s official guide.</p>

<h3>Burn the SD Card</h3>

<p>Insert your SD card into your Mac&rsquo;s SD card reader, and use the Mac OS X <code>diskutil list</code> command to determine the designation of the SD card. If you use portable hard drives with your primary machine, the SD card designation could change from time to time, so it&rsquo;s important to perform this step each time you burn a card.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>diskutil list
</span><span class='line'>/dev/disk0
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:      GUID_partition_scheme                        *500.3 GB   disk0
</span><span class='line'>   1:                        EFI EFI                     209.7 MB   disk0s1
</span><span class='line'>   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
</span><span class='line'>   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
</span><span class='line'>/dev/disk1
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:     FDisk_partition_scheme                       *15.9 GB     disk1
</span><span class='line'>   1:               Windows_NTFS Untitled 1             15.9 GB     disk1s1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>From this <code>diskutil</code> report, we can see that we want to burn the SD image to <code>/dev/disk1</code>. The other device is the hard drive for my primary machine. Burning the wrong device means destroying data.</p>

<p>To burn the SD card&hellip;</p>

<ol>
<li>Change into the directory where you downloaded the Ubuntu image.</li>
<li>Unmount the destination partition on the SD card.</li>
<li>Use the the <code>dd</code> command to copy the Ubuntu image to the SD card.</li>
</ol>


<p>To execute the above steps as <code>bash</code> commands, do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="o">[</span>directory containing the ubuntu image file<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>diskutil unmountDisk /dev/disk1
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo dd <span class="k">if</span><span class="o">=</span>ubuntu-14.04-140611.img <span class="nv">of</span><span class="o">=</span>/dev/disk1 <span class="nv">bs</span><span class="o">=</span>64k
</span><span class='line'>Password:
</span></code></pre></td></tr></table></div></figure>


<p>The <code>dd</code> command takes a <em>long</em> time to run, over 56 minutes on my machine. Here&rsquo;s a quick run-through of the command options:</p>

<ul>
<li><code>sudo</code> gives you <a href="http://RayHightower.com/sudo-disclaimer/">super powers</a>.</li>
<li><code>dd</code> is the &ldquo;copy and convert&rdquo; command. The letters &ldquo;dd&rdquo; have nothing to do with what the tool actually does. It&rsquo;s just a command name. And like so many things in computer science, the name might be based on a pun.</li>
<li><code>if=</code> specifies the input file. You can include the full path, or if the file is in your current directory, you can omit the path as shown in this example.</li>
<li><code>of=</code> specifies the output file. We know that the SD card is located at <code>/dev/disk</code> so that&rsquo;s where the results of this command are headed.  Note that your destination directory may differ from this one.</li>
<li><code>bs=</code> specifies the block size used for the destination file.</li>
</ul>


<h3>About Block Size</h3>

<p>The Mac section of the official Parallella guide recommends a block size of size of 1 megabyte, while the Linux instructions recommend 64 kilobytes (the option <code>bs=64k</code> in the <code>dd</code> command). I initially used <code>bs=1m</code> on my Mac, and I ran into problems. When I used <code>bs=64k</code>, everything worked fine. Note that I eventually traced my problem to something other than block size (details below) but since the 64k setting still works, I&rsquo;ve left it intact. If I find out why Linux and OS X are using different block sizes, I&rsquo;ll post the information here.</p>

<h3>Checking dd Progress</h3>

<p><span class='caption-wrapper center'><img class='caption' src='http://RayHightower.com/images/dd_progress.png' width='' height='' alt='Activity Monitor' title='Activity Monitor'><span class='caption-text'>Activity Monitor</span></span>
Waiting an hour for the <code>dd</code> command to run can be disconcerting because the machine does not give any feedback on progress. No gas gauge, spinning indicator, nothing. How do we know if the write process is working?</p>

<p>Here&rsquo;s how to check progress. Run Apple&rsquo;s <code>Activity Monitor</code>, and look for <code>dd</code> on the list of processes, as shown in the Activity Monitor screenshot. The number of bytes written will increase slowly while <code>dd</code> burns the Ubuntu image onto the SD card. With the current version of Ubuntu, roughly 7.4GB will be written to the SD. At completion, <code>dd</code> will disappear from the Activity Monitor list and you&rsquo;ll see the following at the command line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo dd <span class="k">if</span><span class="o">=</span>ubuntu-14.04-140611.img <span class="nv">of</span><span class="o">=</span>/dev/disk1 <span class="nv">bs</span><span class="o">=</span>64k
</span><span class='line'>Password:
</span><span class='line'>121280+0 records in
</span><span class='line'>121280+0 records out
</span><span class='line'>7948206080 bytes transferred in 3363.824531 secs <span class="o">(</span>2362848 bytes/sec<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the report, it took 3363.824531 seconds (just over 56 minutes) for <code>dd</code> to burn the Ubuntu image onto the SD card. That&rsquo;s a long time to wait with zero feedback. Activity Monitor will tell you what&rsquo;s going on.</p>

<h3>Confirm Partitions</h3>

<p>To confirm that the partitions have been created and that Ubuntu has been written to the SD card, use <code>diskutil list</code> again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>diskutil list
</span><span class='line'>/dev/disk0
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:      GUID_partition_scheme                        *500.3 GB   disk0
</span><span class='line'>   1:                        EFI EFI                     209.7 MB   disk0s1
</span><span class='line'>   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
</span><span class='line'>   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
</span><span class='line'>/dev/disk1
</span><span class='line'>   <span class="c">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
</span><span class='line'>   0:     FDisk_partition_scheme                        *15.9 GB    disk1
</span><span class='line'>   1:                 DOS_FAT_32 BOOT                    134.2 MB   disk1s1
</span><span class='line'>   2:                      Linux                         7.3 GB     disk1s2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, <code>/dev/disk0</code> remains unchanged. We want it that way because that&rsquo;s where our primary machine&rsquo;s operating system resides. <code>/dev/disk1</code> (your actual SD card designation may be different) is the target disk we&rsquo;re after. Two new partitions are on the SD card, a FAT32 partition named <code>BOOT</code> and a Linux partition.</p>

<p>Next we need to copy some supporting files to the new <code>BOOT</code> partition.</p>

<h3>Copying Additional Files to the SD Card</h3>

<p>Now that Ubuntu resides on the SD card, it&rsquo;s time to add the files that support HDMI video and the FPGAs. Here&rsquo;s how.</p>

<p>The additional files will need to be copied to <code>/BOOT</code> on the SD card. While it might make sense to reach the <code>BOOT</code> partition as <code>/dev/disk1</code>, you will actually reach it via <code>/Volumes/BOOT</code>.</p>

<p>We target <code>/dev/disk1</code> when burning the Ubuntu image, but to copy the supporting files we target <code>/Volumes/BOOT</code>. Both designations point to the same place, the SD card. Why the name switch?</p>

<p>I don&rsquo;t know why two different designations are used for the same SD card. I only know that it works. You can expect to see an update posted here if I find an explanation. Or if you have an answer, feel free to post in the comments below.</p>

<p>Before we copy over the files, let&rsquo;s see what&rsquo;s on the <code>BOOT</code> partition on the SD card.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span><span class="nb">cd</span> /Volumes/BOOT/
</span><span class='line'>
</span><span class='line'>/Volumes/BOOT<span class="nv">$ </span>ls -al
</span><span class='line'>total 12
</span><span class='line'>drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .
</span><span class='line'>drwxrwxrwt@ 4 root  admin   136 Jul  5 23:44 ..
</span><span class='line'>drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .Spotlight-V100
</span><span class='line'>drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .Trashes
</span><span class='line'>-rwxrwxrwx  1 rth   staff  4096 Jul  5 23:44 ._.Trashes
</span><span class='line'>drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .fseventsd
</span><span class='line'>
</span><span class='line'>/Volumes/BOOT<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Gotcha #1: The FPGA Bitstream File</h3>

<p>First, change into the directory where you stored the additional Parallella files, and copy the FPGA bitstream file to <code>/Volumes/BOOT</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp parallella_e16_hdmi_gpiose_7010.bit.bin /Volumes/BOOT/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /Volumes/BOOT/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mv parallella_e16_hdmi_gpiose_7010.bit.bin parallella.bit.bin
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>First gotcha: I made the mistake of simply copying the <code>parallella_e16_hdmi_gpiose_7010.bit.bin</code> file without renaming it to <code>parallella.bit.bin</code>. Parallella will only boot when it sees a file with this filename on the SD card&rsquo;s <code>BOOT</code> partition. The original file name will probably change as the software gets updated. With each change, we will need to make sure that the file is renamed <code>parallella.bit.bin</code> on the Parallella.</p>

<p>Obvious in hindsight, but it took me awhile to track that one down!</p>

<h3>Copy the Last Two Files</h3>

<p>Two files were decompressed from <code>kernel-hdmi-default.tgz</code>: <code>devicetree.dtb</code> and <code>uImage</code>. Change into the directory where the files were decompressed, and copy them to <code>/Volumes/BOOT</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cp devicetree.dtb /Volumes/BOOT/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cp uImage /Volumes/BOOT/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s what the BOOT partition should look like when you’re done..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/Volumes/BOOT<span class="nv">$ </span>ls -al
</span><span class='line'>total 12853
</span><span class='line'>drwxrwxrwx@ 1 rth   staff     1024 Jul  6 12:14 .
</span><span class='line'>drwxrwxrwt@ 4 root  admin      136 Jul  6 12:11 ..
</span><span class='line'>drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .Spotlight-V100
</span><span class='line'>drwxrwxrwx@ 1 rth   staff      512 Jul  6 12:11 .Trashes
</span><span class='line'>-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:11 ._.Trashes
</span><span class='line'>-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 ._devicetree.dtb
</span><span class='line'>-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:14 ._parallella.bit.bin
</span><span class='line'>-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 ._uImage
</span><span class='line'>drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .fseventsd
</span><span class='line'>-rwxrwxrwx@ 1 rth   staff     8607 Jul  6 12:13 devicetree.dtb
</span><span class='line'>-rwxrwxrwx@ 1 rth   staff  2083744 Jul  6 12:14 parallella.bit.bin
</span><span class='line'>-rwxrwxrwx@ 1 rth   staff  4468792 Jul  6 12:13 uImage
</span><span class='line'>
</span><span class='line'>/Volumes/BOOT<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/eject_boot.png' width='' height='' alt='Eject the SD card.' title='Eject the SD card.'><span class='caption-text'>Eject the SD card.</span></span></p>

<h3>Eject the SD Card, Insert in Parallella</h3>

<p>Now you&rsquo;re ready to eject the SD card from the Mac and insert it in the Parallella. Plug in the HDMI cable, keyboard, mouse, and Ethernet connection. Power up the Parallella, and welcome to the next <em>gotcha</em>.</p>

<h3>Gotcha #2: Powered USB Required</h3>

<p>Parallella booted to a beautiful GUI, but the system would not respond to the keyboard or mouse. After swapping a few keyboard/mouse combinations, I finally tried a powered USB hub. The powered hub worked.</p>

<p>Through trial and error I learned that the Parallella can handle a single keyboard plugged into the micro-USB port. However, if two devices are plugged in via USB, a powered hub is required. A passive USB hub will not work. A combination keyboard, one with both a keyboard and a trackpad, will also need a powered USB hub.</p>

<h3>Default Login Credentials</h3>

<p>Default login credentials for Parallella are&hellip;</p>

<ul>
<li>username = linaro</li>
<li>password = linaro</li>
</ul>


<h3>SSH, Vim, Git, etc.</h3>

<p>You can SSH into the Parallella from the network&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>ssh linaro@192.168.11.133
</span><span class='line'>linaro@192.168.11.133<span class="err">&#39;</span>s password:
</span><span class='line'>Welcome to Linaro 14.04 <span class="o">(</span>GNU/Linux 3.12.0-g0bc9c3a-dirty armv7l<span class="o">)</span>
</span><span class='line'>
</span><span class='line'> * Documentation:  https://wiki.linaro.org/
</span><span class='line'>Last login: Sun Jul  6 17:34:17 2014 from wisdomgroup-mbp13
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; Vim is operational&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; which vim
</span><span class='line'>/usr/bin/vim
</span><span class='line'>linaro-nano:~&gt; vim --version
</span><span class='line'>VIM - Vi IMproved 7.4 <span class="o">(</span>2013 Aug 10, compiled Jan  2 2014 19:49:14<span class="o">)</span>
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and Git works fine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>linaro-nano:~&gt; which git
</span><span class='line'>/usr/bin/git
</span><span class='line'>linaro-nano:~&gt; git --version
</span><span class='line'>git version 1.9.1
</span><span class='line'>linaro-nano:~&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>Scrot for Screenshots</h3>

<p>If you want to take a screenshot of the Parallella display, use <code>scrot</code>.  It comes with the Ubuntu installation. Type <code>scrot</code> at the command line and hit enter. Five seconds later, the entire screen will be captured and stored in a file called <code>[time stamp]_1920x1080_scrot.png</code> in the current directory.</p>

<h3>Conclusion</h3>

<p>After waiting a year for Parallella to arrive, I&rsquo;m excited to have the device up and running. Future posts will explore the &ldquo;why?&rdquo; behind parallel computing. Thanks Adapteva for helping to democratize supercomputing. Awesome times are ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Prep for OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov/"/>
    <updated>2014-06-30T14:06:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/nodejs-white.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
<a href="http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov/">OpenROV is an underwater robot</a> controlled through a web browser. The server-side of the web app is written in Node.js, running on a <a href="http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">BeagleBone Black</a> inside the OpenROV.</p>

<p>You don&rsquo;t need to know Node.js in order to pilot an OpenROV. And you don&rsquo;t need to do anything in this article to construct an OpenROV from a kit. But if you’re the kind of maker who likes to dig deep into a project, you might enjoy exploring Node.js.</p>

<!--more-->


<h3>Mac OS X and Node.js</h3>

<p>Everything written here applies to Node.js as it runs on Mac OS X. If your local machine runs Linux or Windows, you will need to consult other resources in order to run Node locally.</p>

<h3>Homebrew First</h3>

<p>Make sure you’re running <a href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a> on your Mac. Homebrew is a seamless way to manage packages on Mac OS X. To install Homebrew&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</span>install
</span></code></pre></td></tr></table></div></figure>


<p>After installation, confirm that Homebrew is running properly&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Node.js</h3>

<p>Now that Homebrew is installed and running, Node.js can be installed with a single line command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install node
</span></code></pre></td></tr></table></div></figure>


<p>To confirm that Node.js is installed on your system and to check the version number&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span> which node
</span><span class='line'>/usr/local/bin/node
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>node --version
</span><span class='line'>v0.10.26
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hello World in Node.js</h3>

<p>You know the compter science tradition: The first program in any new language has to say &ldquo;Hello World.&rdquo; Here&rsquo;s a sample <code>Hello World</code> program from the official <a href="http://nodejs.org">Node.js</a> web site, slightly modified to suit OpenROV.</p>

<p>First, create a file called <code>helloworld.js</code> and fill it with the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Sample web server from http://nodejs.org, slightly modified.</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World. OpenROV runs Node.js!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1:1337/&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, from the same directory where you saved <code>helloworld.js</code>, run the file from the command line like so&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>node helloworld.js
</span><span class='line'>Server running at http://127.0.0.1:1337/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, open up a web browser on your local machine and navigate to <code>http://127.0.0.1:1337</code>. You should see a bare-bones web page similar to this one.</p>

<p><span class='caption-wrapper center'><img class='caption' src='http://RayHightower.com/images/openrov-runs-nodejs.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<p>Now that you have Node.js running locally, you&rsquo;re ready to explore the <a href="http://github.com/openrov">OpenROV repo on GitHub</a>.</p>

<h3>Next Steps</h3>

<p>Future blog posts about Node.js and OpenROV will consider questions like:</p>

<ul>
<li><p>What does Node.js do for OpenROV that other languages can’t do?</p></li>
<li><p>What other languages might we use to control OpenROV? It’s all open source, so our brainstorms could one day turn into actual code running on OpenROV!</p></li>
<li><p>How does Node.js on the BeagleBone Black interact with the Arduino and other OpenROV components?</p></li>
</ul>


<p>Keep exploring!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Back to Making Things]]></title>
    <link href="http://RayHightower.com/blog/2014/06/28/get-back-to-making-things/"/>
    <updated>2014-06-28T16:25:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/28/get-back-to-making-things</id>
    <content type="html"><![CDATA[<blockquote><p>You know what the trouble is? We used to make things in this country, build things. Now we just put our hand in the next guy’s pocket.
<br/>~Frank Sobatka</p></blockquote>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/zero-to-maker.gif' width='' height='' alt='' title=''><span class='caption-text'></span></span>
David Lang is a maker. After a stint with a struggling Silicon Valley startup, David teamed up with former NASA engineer <a href="http://openrov.com/profile/1gupl83kvnk8f">Eric Stackpole</a> to build an underwater robot called <a href="http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a>. That&rsquo;s a two-sentence oversimplification of David&rsquo;s maker journey, detailed in his book: <a href="http://shop.oreilly.com/product/0636920028284.do">Zero to Maker: Learn (Just Enough) to Make (Just About) Anything</a>.</p>

<p>The book starts off like a novel, with the exploration of the mysterious Hall City Cave and an 1840s-era gold robbery. Fast-forward to the present day where a multi-disciplinary team of makers joins forces to create an inexpensive vehicle for underwater exploration.</p>

<p>The author was not a born maker. But through force of will, discipline, and the right mentorship, he grew from non-maker to co-founder of the OpenROV company in roughly one year.</p>

<!--more-->


<h3>Making is a Team Sport</h3>

<p><em>Zero to Maker</em> will not teach you how to use tools, what to make, or what manuals to read. But it will put you on the path to learning. For example, the author shares his first experience at a <a href="http://makerfaire.com/">Maker Faire</a>, a gathering for people who make things. Many of the exhibitors have spent decades honing their skills, while some are brand new and full of enthusiasm. Everyone shares knowledge in the Maker community. And as a result, everyone grows.</p>

<p>Maker Spaces are places where tools and expertise are shared on a regular basis. <a href="https://www.noisebridge.net/">Noisebridge</a> is a maker space in San Francisco where the author got some of his early experience with specialized tools. <a href="http://pumpingstationone.org/">Pumping Station One</a> and <a href="http://www.sshchicago.org/">Southside Hackerspace Chicago</a> shoot for similar goals in Chicago.</p>

<p>The author points out that no matter what you&rsquo;re trying to make, chances are that someone else has made something similar and they can share experience with you. Likewise, you have experience that other makers may find valuable, even on day one of your maker journey. Sometimes we don&rsquo;t know what we know. Maker communities remove the friction so that knowledge can be shared more freely.</p>

<h3>The IKEA Effect</h3>

<p>Why is the maker movement so powerful? The author explores this question in one very interesting section of the book. As it turns out, Researchers at the Harvard Business School think they have the answer. When we put our sweat and effort into building a project, we perceive the project to be more valuable. The researchers refer to this phenomenon as the IKEA effect. If we sweat to build something, it becomes valuable to us.</p>

<h3>Recommendation</h3>

<p>If you are a maker, or if you want to become a maker, this book is worth reading. And once you&rsquo;re done reading, go make something!</p>

<p><em>Note: A version of this article is also posted at <a href="http://www.chicagoruby.org/book-reviews/">http://www.chicagoruby.org/book-reviews/</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet of Things at ACM]]></title>
    <link href="http://RayHightower.com/blog/2014/06/27/internet-of-things-at-acm/"/>
    <updated>2014-06-27T18:08:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/27/internet-of-things-at-acm</id>
    <content type="html"><![CDATA[<p>How many motors are in the typical automobile? The knee-jerk response might be “one, the big metal thing under the hood”. Upon further reflection, we may recall the motors that operate many devices in today’s automobile: windshield wipers, power windows, door locks, sun roof, reclining seats, and so on. Power devices were once luxury equipment. Today, since motors have fallen in price, most cars include these <em>luxury</em> items as standard equipment.</p>

<p>We take motors for granted, therefore motors have disappeared. And now, as it becomes possible to add a computer and an IP address to almost anything electronic, we bring about the Internet of Things (IoT). Computers are disappearing too.</p>

<!--more-->


<h3>ACM Presents Disruptive IoT</h3>

<p>Steven Loving is a director at <a href="http://www.arrayent.com/">Arrayent</a>. Arrayent makes a platform for companies that want their products to be IoT-aware. For example, a garage door company that wants to offer iPhone control to their customers can do so without re-inventing TCP/IP themselves. Arrayent handles the IoT portion so the maker can focus on their core business. Steven shared his vision of the IoT future at <a href="http://www.meetup.com/chicagoacm/events/184091062/">Tuesday&rsquo;s ACM meeting</a>. Some of his ideas are summarized here.</p>

<h3>Don&rsquo;t Leave Home Without It</h3>

<p><em>Don&rsquo;t leave home without it</em> was once the catch phrase of a major charge card. Today, many of us leave home with just three things in our pockets:</p>

<ul>
<li>Wallet</li>
<li>Keys</li>
<li>Smartphone</li>
</ul>


<p>As near-field communication (or one of its descendants) becomes prevalent, we may only need the smartphone.</p>

<h3>Products Don&rsquo;t Matter Any More?</h3>

<p>Products don&rsquo;t matter any more? I immediately wanted to argue against this idea. Everyone wants quality products, right? The point: As manufacturing techniques become common knowledge, companies need to come up with new ways to differentiate themselves from the competition.</p>

<p>Connected products are special. For example, consider an ordinary sump pump. How does a buyer distinguish one from another? If one sump pump contains a tiny embedded Linux system with an IP address, it can alert the owner when water has approached a dangerous level, if there is a power outage, or if flood conditions are simply too strong for the pump to handle. Bad news does not get better with time, and if the sump pump can send bad news early, the owners can take corrective action while there&rsquo;s still time to do so.</p>

<h3>Mobile First</h3>

<p>A great quote from the presentation&hellip;</p>

<blockquote><p>Do you know anybody building a product with an LCD on it? Shoot them.  I have an LCD in my pocket. It&rsquo;s called a phone.
<br/>~Steven Loving</p></blockquote>

<p>In other words, the mobile-first strategy that many developers apply to apps also applies to IoT.</p>

<p>Side note: Clearly, Apple gets it. That&rsquo;s one reason why they released <a href="https://developer.apple.com/homekit/">HomeKit</a>.</p>

<h3>Incumbent Companies Are Scrambling</h3>

<p>Why are cable companies offering security services in addition to standard packages of television and movies? Because users are moving to Netflix and Amazon Prime. Cable companies that offer internet service must come up with other services if they expect to survive. IoT might offer a way. Self-installed home monitoring services will give customers a reason to stick with their old cable provider. Of course, this will force security companies like ADT to come up with something new, too.</p>

<h3>IoT Progression</h3>

<p>What opportunities will become available when every device has an IP
address? Tuesday&rsquo;s presenter predicts the following sequence of
events:</p>

<ol>
<li>Connected products.</li>
<li>Connected systems &ndash; products talking to other products.</li>
<li>Communities of systems talking to each other.</li>
<li>Network effects.</li>
</ol>


<p>We&rsquo;re currently experiencing &#35;1 and &#35;2. What will happen as &#35;3 and &#35;4 begin to roll out? We cannot be sure. However, we can be certain that this will be an exciting time for software developers, electrical engineers, and entrepreneurs who build companies in those areas.</p>

<h3>Thanks Chicago ACM</h3>

<p>Thanks again Chicago ACM for putting on a great program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Citizen Science With OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov/"/>
    <updated>2014-06-16T17:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov</id>
    <content type="html"><![CDATA[<blockquote><p>In the early days of robots people said, &lsquo;Oh, let&rsquo;s build a robot&rsquo; and what&rsquo;s the first thought? You make a robot look like a human and do human things. That&rsquo;s so 1950s. We are so past that.
<br/>~Neil deGrasse Tyson</p></blockquote>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/openrov-uw.jpg' width='' height='' alt='OpenROV: Underwater robot running Node.js.' title='OpenROV: Underwater robot running Node.js.'><span class='caption-text'>OpenROV: Underwater robot running Node.js.</span></span>
<a href="http://openrov.com">OpenROV</a> is an underwater robot, roughly the size of a toaster, and definitely not human-shaped. The device is controlled through a Node.js-based web app. Former NASA researcher Eric Stackpole and Make Magazine columnist David Lang are on a mission to democratize ocean exploration in the same way that Jobs and Woz sparked the democratization of  computing. Eric and David pooled their talents to launch OpenROV, building on the foundation laid by Moore’s Law and the open source software movement.</p>

<p>OpenROV&rsquo;s ingredients are an impressive mix of open source goodness&hellip;</p>

<ul>
<li>BeagleBone Black &ndash; an open-source single-board computer, smaller than a deck of cards, running Linux.</li>
<li>Linux &ndash; specifically, the Ubuntu distribution.</li>
<li>Node.js &ndash; platform for building web applications, based on Google’s V8 JavaScript engine. Thanks to Node.js, any laptop running a web browser can control the OpenROV.</li>
<li>Arduino &ndash; inexpensive micro-controller commonly used in robotics projects.</li>
<li>TCP/IP &ndash; the communication protocol of the Internet. TCP/IP handles all communications (commands, video) between the OpenROV and the pilot’s laptop.</li>
</ul>


<p>The OpenROV team has released all of their <a href="https://github.com/openrov">schematics and source code</a> to the open source community, hence the word “open” in the company name. If you think the open source aspects of OpenROV are exciting, wait until you hear about the company&rsquo;s main mission: Underwater exploration.</p>

<!--more-->


<p>Eric and David were kind enough to invite me to their lab/manufacturing facility in Berkeley, California recently. Thank you, OpenROV makers!</p>

<h3>Remotely Operated Vehicles</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/controller.jpg' width='' height='' alt='Laptop, browser, and game controller.' title='Laptop, browser, and game controller.'><span class='caption-text'>Laptop, browser, and game controller.</span></span>
ROV is short for remotely operated vehicle, an underwater robot. Scientists use ROVs to study marine life. Oil companies use ROVs for underwater construction and inspections. Industry-grade ROVs are priced at $30,000 on the low-end, while a <a href="http://www.mbari.org/twenty/Tiburon.htm">custom ROV can cost several million dollars</a>.</p>

<p>The OpenROV team was convinced that they could design and build an ROV small enough to fit in a suitcase, and easy enough for a citizen scientist to assemble and maintain. Targeting the general public meant achieving a relatively low price point: under one thousand dollars ($1,000.00).</p>

<p>They did it. The device is successful, and you can <a href="http://store.openrov.com/">buy an OpenROV</a> kit today for $849.00.</p>

<p>Movements are controlled via a USB-connected video game controller. A Bluetooth-equipped controller should work just as well. Some users will prefer the laptop keyboard; that works too.</p>

<p>In other words, the computer that you’re using to read this article can probably control the OpenROV.</p>

<h3>Citizen Science</h3>

<p>Our world will always need professional scientists, people working in academia and in industry to push the frontier of knowledge. Some scientific problems require the attention of PhD-level professionals, while other problems are better solved through crowdsourcing. Enter the <a href="http://en.wikipedia.org/wiki/Citizen_science">citizen scientist</a>.</p>

<p>Professional scientists are good at analyzing data, because that&rsquo;s what they have trained themselves to do. But data gathering requires less training than analysis. Citizen science and crowdsourcing work when there&rsquo;s an overwhelming volume of data to gather. Or when the breakthrough is beyond the reach of current scientific knowledge.</p>

<p>Citizen scientists may be constrained by money, but they tend to be unconstrained by expertise. Therefore they are likely to try solutions that experts would never consider. <a href="http://en.wikipedia.org/wiki/Wright_brothers">Orville and Wilbur Wright</a> were citizen scientists. Professional scientists pursued solutions for fixed-wing flight prior to the Wright brothers&#8217; success. But since the flight problem defied the known science of the day, new approaches were required.</p>

<p>Amusingly, successful citizen scientists can be outwitted by their own expertise, just like the professionals. For example&hellip;</p>

<blockquote><p>No flying machine will ever fly from New York to Paris &hellip;[because] no known motor can run at the requisite speed for four days without stopping.
<br/>~Orville Wright</p></blockquote>

<p>Shifting back to the 21st century: Thousands of citizen scientists are using OpenROV to explore oceans and lakes more thoroughly than ever before.</p>

<h3>Open Source On-Site</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/ui-discussion-2.jpg' width='' height='' alt='Enthusiasts collaborate on the next UI.' title='Enthusiasts collaborate on the next UI.'><span class='caption-text'>Enthusiasts collaborate on the next UI.</span></span>
On the day I visited the OpenROV factory, other underwater enthusiasts were on-site, working with company engineers on product improvements. One enthusiast is a professional pilot of manned submersibles, underwater vehicles large enough to hold people. This pilot has traveled as deep as 2,000 meters below the ocean&rsquo;s surface! &ldquo;We&rsquo;re always looking at amperage&rdquo;, she said in a discussion with another enthusiast. A spike in amperage could indicate a ground fault, and batteries drain rapidly when that happens. You do not want to be stuck underwater when the batteries run out.</p>

<p>Another member of the open source community, an engineering veteran with decades of experience at <a href="http://apple.com">Apple</a> and <a href="http://oracle.com">Oracle</a>, translates the operator&rsquo;s feedback into code that might drive the next OpenROV user interface.</p>

<p>That&rsquo;s how open source works at OpenROV.</p>

<h3>Hardware Testing</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/testing-motor-controller.jpg' width='' height='' alt='Testing new hardware.' title='Testing new hardware.'><span class='caption-text'>Testing new hardware.</span></span>
I offered to leave when the OpenROV team prepared to test some new components. After working in tech for decades, I&rsquo;ve learned to respect a company&rsquo;s right to protect secrets.</p>

<p>&ldquo;You forget that this is all open source,&rdquo; they told me. &ldquo;The schematics are already online, so there&rsquo;s nothing to hide. Come and watch the test.&rdquo;</p>

<p>Yes, they had to remind me about the real meaning of open source!</p>

<p>Four OpenROV makers gathered around a tank of water to test a new motor, controller, and propeller combination. They measured power utilization, propulsion, and temperature. Power utilization is important because the batteries need to last. Temperature matters because we don&rsquo;t want the OpenROV to melt underwater (or fry the fish). And propulsion matters because if the unit can&rsquo;t move, what&rsquo;s the point?</p>

<p>From the reaction of the team, it looks like they found some good components for the next batch of OpenROV kits.</p>

<h3>Strong Minds Coming Together</h3>

<p>The mood in the OpenROV lab is a blend of excitement and technical expertise. Some of the people in the lab are members of the company. Others are adventurers fascinated with this inexpensive, effective way to explore. All are united in the quest to do something awesome with technology.</p>

<p>OpenROV is what we get when the thirst for exploration blends with the open source movement. What a wonderful combination.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Page Build Warning - New CDN]]></title>
    <link href="http://RayHightower.com/blog/2014/05/31/github-page-build-warning-new-cdn/"/>
    <updated>2014-05-31T13:44:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/05/31/github-page-build-warning-new-cdn</id>
    <content type="html"><![CDATA[<p>The <code>RayHightower.com</code> blog is built on <a href="http://octopress.org/">Octopress</a> and hosted on <a href="https://pages.github.com/">GitHub Pages</a>. Recently, after I deployed a site update, GitHub emailed me a <code>Page build warning</code> message. Since this was <em>just a warning</em>, I ignored it while I attacked more pressing tasks (not always a good idea).</p>

<p>Today I finally took the time to research the topic so I could figure out what to do next. This article is the result of that research.</p>

<!--more-->


<h2>What the Message Means</h2>

<p>Here are the important points of the of the <code>Page build warning</code> message:</p>

<ul>
<li>GitHub introduced a <a href="http://en.wikipedia.org/wiki/Content_delivery_network">content delivery network (CDN)</a> for faster page loads and protection against <a href="http://en.wikipedia.org/wiki/Denial-of-service_attack">denial of sevice (DOS)</a> attacks.</li>
<li>If you do nothing to your GitHub Pages site, your pages will continue to load normally. People who visit your site will see no difference.</li>
<li>If you want the benefits of the CDN, follow the instructions given in GitHub&rsquo;s blog articles.</li>
</ul>


<h3>The Original Message</h3>

<p>Here’s the original message. If you’re satisfied with the above translation, you can skip this section.</p>

<blockquote><p>The page build completed successfully, but returned the following warning:</p>

<p>GitHub Pages recently underwent some improvements (<a href="https://github.com/blog/1715-faster-more-awesome-github-pages">https://github.com/blog/1715-faster-more-awesome-github-pages</a>) to make your site faster and more awesome, but we&rsquo;ve noticed that rayhightower.com isn&rsquo;t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain&rsquo;s configuration offers some additional speed and performance benefits. Instructions on updating your site&rsquo;s IP address can be found at <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records,">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records,</a> and of course, you can always get in touch with a human at <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#x73;&#x75;&#112;&#112;&#x6f;&#114;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;&#46;">&#x73;&#x75;&#x70;&#x70;&#111;&#114;&#116;&#64;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;&#46;</a> For the more technical minded folks who want to skip the help docs: your site&rsquo;s DNS records are pointed to a deprecated IP address.</p>

<p>For information on troubleshooting Jekyll see:</p>

<p> <a href="https://help.github.com/articles/using-jekyll-with-pages#troubleshooting">https://help.github.com/articles/using-jekyll-with-pages#troubleshooting</a></p>

<p>If you have any questions please contact us at <a href="https://github.com/contact.">https://github.com/contact.</a></p></blockquote>

<h3>First: Check the CNAME File</h3>

<p>Since <code>RayHightower.com</code> was configured for Octopress a few years ago, it already had a <code>source/CNAME</code> file. To check the contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="nb">source</span>/CNAME
</span><span class='line'>rayhightower.com
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>CNAME</code> file looks fine, according to the GitHub&rsquo;s blog. Time for the next step.</p>

<h3>Next: Domain Records</h3>

<p>The domain is registered with <a href="http://dnsimple.com">DNSimple</a>, so the process was relatively quick.</p>

<ol>
<li>Go into DNSimple&rsquo;s advanced editor for the domain.</li>
<li>Click <code>Add a Record</code> and select <code>ALIAS</code>.</li>
<li>Leave <code>Name</code> blank.</li>
<li>Next to <code>Alias for</code> enter the GitHub Pages endpoint. In my case, the endpoint is <code>rayhightower.github.io</code>.</li>
</ol>


<p>More information on <a href="http://support.dnsimple.com/articles/github-pages/">GitHub Pages and DNSimple</a>.</p>

<p>I set TTL to 1 minute to encourage the changes to propagate quickly. If you know of a better configuration choice for TTL, please let me know in the comments below.</p>

<h3>Expect Propagation Delays</h3>

<p>DNS changes can take up to a day to propagate. Delays tend to be shorter with DNSimple because time-to-live (TTL) can be set as low as one minute for some records. Updates will be posted here as I learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Grow a User Group]]></title>
    <link href="http://RayHightower.com/blog/2014/05/30/how-to-grow-a-user-group/"/>
    <updated>2014-05-30T17:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/05/30/how-to-grow-a-user-group</id>
    <content type="html"><![CDATA[<p>The current team of <a href="http://chicagoruby.org">ChicagoRuby</a> organizers assumed leadership in August 2007. Back then, typical monthly attendance was about five people and the group&rsquo;s <a href="http://meetup.com/chicagoruby">Meetup.com</a> database contained 78 members. The previous organizer was swamped with work at his day job, so he handed the baton to a new crew.</p>

<p>Today, the <em>new crew</em> has grown ChicagoRuby to over 2,700 members. The group hosts three meetups every month, and the downtown meetings consistently max out the 100-person RSVP limit. Bonus: ChicagoRuby hosts two conferences, <a href="http://windycityrails.org">WindyCityRails</a> in Chicago and <a href="http://rubycaribe.com">RubyCaribe</a> on the Caribbean island of Barbados.</p>

<p>How does ChicagoRuby do it? Through consistency, teamwork, iteration, and learning from mistakes.</p>

<!--more-->


<h3>Be Consistent With Meetings</h3>

<p>Consistency is very difficult in the beginning, especially on that night when only three people show up for the meeting. I have hosted a 3-person ChicagoRuby meeting before. Consistency is hard, and it is also the most important factor in user group success.</p>

<p>People trust consistency. Consistent meetings grow groups.</p>

<p>Members of ChicagoRuby know that we meet on the first Tuesday of every month downtown, the third Saturday of every month in Elmhurst, and one evening per month for the hack night. Members can plan their schedules months in advance because the ChicagoRuby calendar is consistent. Consistency builds trust.</p>

<p>ChicagoRuby cancelled one meeting in January 2011 due to a killer snow storm in Chicago. We were forced to cancel because the property manager shut the entire building down. We&rsquo;re a little bit stubborn about consistency. And that&rsquo;s how we build trust.</p>

<p>Yes, there will be times when the organizer is too exhausted to run an upcoming meeting. That&rsquo;s why it&rsquo;s important to share the work by building a team.</p>

<h3>Build the Team</h3>

<p>ChicagoRuby believes in sharing the work amongst multiple organizers. The group is stronger with several brains at the helm. Today we have eight organizers. Working as a team enables us to benefit from each other’s strengths. Some organizers have strong design skills, others are strong developers. And some are good at asking members for help.</p>

<h3>Ask for Help</h3>

<blockquote><p>I guarantee you that any favor he asks of you, you will offer to do before he requests it.
<br/>~Tom Hagen, Consigliere</p></blockquote>

<p>One way to ask for help: Encourage members to help in their area of enthusiasm. For example, organizer <a href="https://twitter.com/ginnyhendry">Ginny Hendry</a> runs the ChicagoRuby hack nights every month. Ginny got started when she approached the organizers after a meeting and said, &ldquo;We should have hack nights.&rdquo; Clearly, she was enthused about hack nights, so we asked her to take the lead in that area.</p>

<p>Today, Ginny’s hack nights are the highest rated of all ChicagoRuby events. In January, she will be a lab advisor at RubyCaribe.</p>

<p>Before he moved to Florida, <a href="http://twitter.com/mattpolito">Matt Polito</a> was part of the ChicagoRuby organizer team. Matt wanted ChicagoRuby to have a logo. I was against it. We were planning the first WindyCityRails and I wanted everyone to focus on the conference. Matt went out and got the logo done anyway. Everybody likes it. Matt, thank you for ignoring me!</p>

<p>Members who have ideas for improvement tend to be strong leaders. The whole group benefits when we get out of the way and let them lead.</p>

<p>The current members of the ChicagoRuby organizer team are:</p>

<ul>
<li><a href="https://twitter.com/ginnyhendry">Ginny Hendry</a>, mentioned above.</li>
<li><a href="http://twitter.com/wondible">Justin Love</a> is a developer and an organizer of the <a href="http://www.meetup.com/js-chi/">Chicago JavaScript Meetup Group (JS-Chi)</a>. Justin will also be a lab advisor for RubyCaribe in January 2015.</li>
<li><a href="http://twitter.com/hugocorbucci">Hugo Corbucci</a>, <a href="http://www.meetup.com/ChicagoRuby/members/42800032/">Emily Rosengren</a>, and <a href="http://www.meetup.com/ChicagoRuby/members/135529442/">Sam Jacobs</a> are developers at <a href="http://thoughtworks.com">ThoughtWorks</a>. Since ThoughtWorkers travel often, ChicagoRuby always invites two or more to be on the organizer team.</li>
<li><a href="http://twitter.com/themccreefiles">Alonda McCree</a> manages the downtown meetups, including logistics and video. Alonda is the conference manager for RubyCaribe.</li>
<li><a href="http://www.meetup.com/ChicagoRuby/members/1345203/">Marty Lavin</a> manages ChicagoRuby&rsquo;s Elmhurst meetups, including logistics and scheduling. Marty is consistently active in Elmhurst, so we asked him to join the team.</li>
<li><a href="http://twitter.com/rayhightower">Ray Hightower</a>, author of this
article.</li>
</ul>


<p>In addition to the core group of ChicagoRuby organizers, one person deserves special mention. <a href="http://twitter.com/zolk">Kevin Zolkiewicz</a> has managed every WindyCityRails since the first one in 2008. Kevin&rsquo;s project management, design, and leadership skills are enjoyed by everyone who attends WindyCityRails.</p>

<p>The <a href="http://www.chicagoruby.org/about/organizers/">ChicagoRuby Organizer Page</a> contains the list of current and past organizers. Many of the former organizers remain active in an emeritus role. Every mind helps to make the group stronger.</p>

<h3>Automate Everything</h3>

<p>Managing a database of 2,700+ members could be drudgery. Fortunately, <a href="http://meetup.com/chicagoruby">Meetup.com</a> makes the process easy. Meetup handles RSVPs, membership additions and deletions, and reminders. Sometimes, the 2-week automated reminder from Meetup.com reminds the organizers to get a speaker for the next meeting!</p>

<p>Early in our history, someone suggested that ChicagoRuby should not use Meetup.com because it&rsquo;s written in PHP, and we&rsquo;re a Ruby group. We see things differently. ChicagoRuby is a Ruby group that uses the best tool for the job, regardless of language. Meetup.com has proven itself useful for eight years and counting.</p>

<h3>Choose a Short Name</h3>

<p>Growth is an ongoing priority for ChicagoRuby. In order to grow, a group has to attract new members. New members who are looking for a group to join are likely to start with a search engine, and search engines adore simplicity.</p>

<p>Our group was originally called <em>The Chicago Area Ruby on Rails Meetup Group</em>. Accurate, and a mouthful. We discovered that a simple domain name, <a href="http://chicagoruby.org">ChicagoRuby.org</a>, was available. So we grabbed it, along with the <a href="http://twitter.com/chicagoruby">@ChicagoRuby</a> Twitter handle.</p>

<h3>Be Easy to Find</h3>

<p>To make the group even easier to find, every web site in the ChicagoRuby ecosystem points to all of the group&rsquo;s other web sites. For example, all of the conference sites point to the ChicagoRuby site, and vice versa. A new member who finds one part of the ecosystem will find the whole thing. People feel welcome when information is easy to find.</p>

<p>Making future members feel welcome is key to growth. Free monthly events are another way to make people feel welcome.</p>

<h3>Keep Monthly Events Free</h3>

<p>I firmly believe that monthly user group meetings should be free. We never know what a member of our community is going through financially. Therefore, ChicagoRuby&rsquo;s monthly meetings have always been free.</p>

<p>My personal history includes times when I was dead broke due to one entrepreneurial setback or another. So I have emotional reasons for keeping ChicagoRuby’s monthly events free of charge.</p>

<p>Of course, the money to pay for the meetings has to come from somewhere. That’s where sponsors can help.</p>

<h3>Cover Monthly Costs Through Sponsorships</h3>

<p>Companies will gladly sponsor a group that gives them a return on their investment. Sponsorships don&rsquo;t always come in the form of money.</p>

<p>For example, ChicagoRuby’s first sponsor was <a href="http://www.deforestgroup.com/">DeForest Group</a>. Owners <a href="https://www.linkedin.com/in/leedeforest">Lee DeForest</a> and <a href="http://www.linkedin.com/pub/james-deforest/40/57a/881">Jim DeForest</a> provide ChicagoRuby with free space and WiFi for our Saturday meetings. Lee was one of the five people in the room when the current organizers took over, and we will always be grateful for his early support.</p>

<p>ChicagoRuby’s downtown sponsors are <a href="http://enova.com">Enova</a> and <a href="http://thoughtworks.com">ThoughtWorks</a>. Each company provides space, WiFi, pizza, and beverages on a monthly basis. Sponsors get to address the group at the beginning of the meeting. More important, by sponsoring ChicagoRuby over time, a company can build trust within the membership.</p>

<p><a href="http://oreilly.com">O&#8217;Reilly Media</a> was our first publishing sponsor.  O&#8217;Reilly, <a href="http://www.informit.com/user_groups/">Pearson Education</a>, and <a href="http://pragprog.com/">The Pragmatic Programmers</a> provide books for ChicagoRuby members to <a href="http://www.chicagoruby.org/book-reviews/">review</a>.</p>

<p>Sponsors get involved with user groups for two main reasons: To recruit developers, or to market products to developers. Everybody wins when sponsors get involved with user groups, financially or otherwise.</p>

<h3>Vet Speakers</h3>

<p>Members of ChicagoRuby trust the organizers to deliver quality events every month. I dropped the ball one month when I failed to properly vet a speaker. After that meeting, organizer <a href="https://twitter.com/dgiunta">Dave Giunta</a> wrote the first draft of the ChicagoRuby <a href="http://www.chicagoruby.org/about/speaker-guidelines/">speaker guidelines</a>. We&rsquo;ve word-smithed the guidelines over the years, but the most important parts were created by Dave.</p>

<h3>Make Members Feel Awesome</h3>

<p>We humans have a need to belong to something. The feeling of belonging (awesomeness) can be strengthened when we go out for drinks after an event. Drinks are not necessarily alcohol; when we go to a bar together, some members will have a soda, juice, or coffee. Informal camaraderie makes members feel like members.</p>

<p>ChicagoRuby members gather together at a bar for an hour or so after our downtown meetings. In Elmhurst, the meetings end at noon, so we grab lunch together at a local restaurant. The conversation continues, and bonds are formed.</p>

<h3>Maintain Focus, and Explore New Areas</h3>

<p>Focus can lead to excellence. But if our focus is too tight, we might miss the Next Great Thing. How does a group balance between focus and exploration?</p>

<p>Over the years, ChicagoRuby has struggled with focus. We&rsquo;ve experimented with other ventures. We ran a job board for awhile. We ran conferences related to NoSQL and mobile. We moved away from these because they drained our resources, and pulled us away from our core, which is Ruby.</p>

<p>Here&rsquo;s how we balance between focus and exploration. The monthly user group meetings are for exploration. Monthly events take minimal resources, so they&rsquo;re ideal for experiments. For example, <a href="http://www.chicagoruby.org/videos/archives/2013/12/03/ployglot-night/">Polyglot Night</a> in Jan 2014 was very successful. Monthly meetings might explore NoSQL, mobile, or IoT. The Ruby community remains vibrant because we <em>borrow</em> ideas from other communities.</p>

<p>Our conferences focus on Ruby. Conferences require more planning and resources than monthly meetups. So, to maximize efficiency, we build our conferences around our core strength: Ruby. RubyCaribe is the newest example of this focused approach.</p>

<h3>Collaborate With Other Groups</h3>

<p>Collaboration stretches our brains in unexpected and wonderful ways. For our newest ventures, ChicagoRuby is collaborating with developers in the Caribbean, in the island nation of Barbados.</p>

<ul>
<li><a href="http://linuxbarbados.org">LinuxBarbados</a> is a monthly user group for open source enthusiasts.</li>
<li><a href="http://rubycaribe.com">RubyCaribe</a> is a brand new conference for intermediate and advanced Ruby developers.</li>
</ul>


<p>Through the new ventures, ChicagoRuby has been introduced to work done by the <a href="https://www.cavehill.uwi.edu/">University of the West Indies at Cave Hill (UWI)</a>.</p>

<p><a href="http://www.cavehill.uwi.edu/fst/cmp/staff/colin-depradine.aspx">Dr. Colin Depradine</a>, Dean of the University’s Faculty of Science and Technology, is growing the next generation of scientists and engineers in the Caribbean. Under Dr. Depradine&rsquo;s leadership, UWI encourages collaboration between the sciences. For example, computer scientists are writing software to crunch data related to solar energy research. Looking even further into the future, the UWI team has introduced children as young as eight to programming.</p>

<p>UWI also serves as host to LinuxBarbados. The group is organized by <a href="http://www.meetup.com/LinuxBarbados/members/143194822/">Maurice Beckles</a>, a Barbados-based open source enthusiast and IT technician at UWI. If you&rsquo;re in Barbados, be sure to ask him about his sink-or-swim introduction to Linux when he worked at a bank!</p>

<p>Notice the pattern: The conference (RubyCaribe) focuses on ChicagoRuby&rsquo;s core strength, Ruby. The monthly user group, LinuxBarbados, is a vehicle for exploring a wide range of topics including Linux, Ruby, embedded devices, and anything related to open source.</p>

<h3>Conclusion</h3>

<p>A better title for this post might have been <em>One Way to Grow a User Group</em>. Every group will grow differently depending on its particular strengths and interests. Of course, groups that grow are likely to have a few things in common. When a group is built on the pillars of consistency and teamwork, they are likely to succeed in a big way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading to Git 2.0]]></title>
    <link href="http://RayHightower.com/blog/2014/05/30/upgrading-to-git-2-dot-0/"/>
    <updated>2014-05-30T11:33:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/05/30/upgrading-to-git-2-dot-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://RayHightower.com/images/git_200.png">
Developers of Git are making a serious effort to improve intuitiveness for first-time users. Of course, all users benefit from intuitive tools. When our tools <em>just work</em>, we spend less time sifting through documentation and more time solving problems for our customers.</p>

<!--more-->


<h3>How to Upgrade</h3>

<p>If you’re on Mac OS X, make sure you’re using <a href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>. It’s the easiest way to install and manage Unix libraries on the Mac.</p>

<p>It’s usually a good idea to check your current version before upgrading.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 1.9.2
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, make sure that Homebrew is current.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span><span class='line'>
</span><span class='line'>Warning: Your Homebrew is outdated.
</span><span class='line'>You haven<span class="err">&#39;</span>t updated <span class="k">for </span>at least 24 hours, this is a long <span class="nb">time </span>in brewland!
</span><span class='line'>To update Homebrew, run <span class="sb">`</span>brew update<span class="sb">`</span>.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>My Homebrew was outdated, so I used <code>brew update</code> to grab the new packages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from b46160b8 to afff2b23.
</span><span class='line'><span class="o">==</span>&gt; New Formulae
</span><span class='line'>aces_container                    git-number                      picolisp
</span><span class='line'>apache-spark                    homebrew/versions/mongodb24       probatron4j
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, use Homebrew to upgrade Git.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew upgrade <span class="nv">git</span>
</span><span class='line'><span class="o">==</span>&gt; Upgrading 1 outdated package, with result:
</span><span class='line'>git 2.0.0
</span><span class='line'><span class="o">==</span>&gt; Upgrading <span class="nv">git</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/git-2.0.0.mavericks.bottle.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Pouring git-2.0.0.mavericks.bottle.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>The OS X keychain credential helper has been installed to:
</span><span class='line'>  /usr/local/bin/git-credential-osxkeychain
</span><span class='line'>
</span><span class='line'>The <span class="s1">&#39;contrib&#39;</span> directory has been installed to:
</span><span class='line'>  /usr/local/share/git-core/contrib
</span><span class='line'>
</span><span class='line'>Bash completion has been installed to:
</span><span class='line'>  /usr/local/etc/bash_completion.d
</span><span class='line'>
</span><span class='line'>zsh completion has been installed to:
</span><span class='line'>  /usr/local/share/zsh/site-functions
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/git/2.0.0: 1324 files, 31M
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Finished. Let&rsquo;s check the Git version to confirm that the upgrade went properly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 2.0.0
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Future articles will examine the this latest version of Git in detail. For now, enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Environment of Respect, 3rd Iteration]]></title>
    <link href="http://RayHightower.com/blog/2014/05/28/an-environment-of-respect-3rd-iteration/"/>
    <updated>2014-05-28T06:42:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/05/28/an-environment-of-respect-3rd-iteration</id>
    <content type="html"><![CDATA[<p>Last week, <a href="https://twitter.com/bantik">Coraline Ehmke</a> and <a href="https://twitter.com/feministy">Liz Abinante</a> met with three members of the WindyCityRails organizer team: <a href="https://twitter.com/zolk">Kevin Zolkiewicz</a>, <a href="https://twitter.com/themccreefiles">Alonda McCree</a>, and me. Good dialog. End result: The updated <a href="http://www.windycityrails.org/code-of-conduct/">WindyCityRails Code of Conduct</a>.</p>

<!--more-->


<p>Harassment is a serious issue, and a 140-character tweet will not do the discussion justice. Therefore, the ChicagoRuby organizers have created multiple communication channels for this issue:</p>

<ul>
<li>Email: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#99;&#111;&#100;&#101;&#111;&#102;&#99;&#x6f;&#110;&#x64;&#x75;&#x63;&#x74;&#x40;&#99;&#x68;&#105;&#99;&#97;&#x67;&#x6f;&#x72;&#117;&#x62;&#x79;&#x2e;&#x6f;&#114;&#x67;">&#99;&#111;&#100;&#101;&#x6f;&#102;&#x63;&#x6f;&#x6e;&#100;&#117;&#99;&#x74;&#x40;&#x63;&#104;&#x69;&#x63;&#97;&#x67;&#x6f;&#x72;&#117;&#98;&#121;&#x2e;&#x6f;&#x72;&#x67;</a></li>
<li>Any of the contact names listed on the current code of conduct</li>
<li>Phone number listed on the code of conduct</li>
</ul>


<p>If you have concerns in this area, please feel free to use one of the channels. The contact list may change as responsibilities shift within ChicagoRuby. However, there will always be multiple people available to address harassment concerns.</p>

<p>Thank you Coraline and Liz for your work in making this happen. And thank you <a href="https://twitter.com/lostghost">Ken Walters</a> of <a href="http://twitter.com/bradsdeals">Brad’s Deals</a> for facilitating the meeting.</p>

<p>Now, let’s go write some code!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Dotfiles]]></title>
    <link href="http://RayHightower.com/blog/2014/04/15/managing-dotfiles/"/>
    <updated>2014-04-15T17:13:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/15/managing-dotfiles</id>
    <content type="html"><![CDATA[<p>Dotfiles, the configuration files used by Unix-like machines, can become disorganized over time. Entropy rules! This article describes my recent attempt to bring order to dotfile chaos. The steps can be summarized as follows:</p>

<ul>
<li>Move the non-private dotfiles (dotfiles that will be viewed by others on Github) into a directory called <code>~/.dotfiles</code>.</li>
<li>From the <code>home</code> directory, create a symbolic link to each dotfile in the <code>~/.dotfiles</code> directory.</li>
<li>Use Git to manage the <code>~/.dotfiles</code> directory, and share it on GitHub.</li>
</ul>


<p>Dotfiles are normally hidden when you try to view them in the Mac OS X Finder. To view them from the command prompt, use <code>$ ls -al</code>.</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/.dotfiles<span class="o">[</span>master<span class="o">]</span><span class="nv">$ </span>ls -al
</span><span class='line'>total 40
</span><span class='line'>drwxr-xr-x   8 rth  staff   272 Apr 14 01:44 .
</span><span class='line'>drwxr-xr-x+ 71 rth  staff  2414 Apr 14 02:12 ..
</span><span class='line'>-rwxr-xr-x   1 rth  staff  3455 Apr 13 16:01 .bash_profile
</span><span class='line'>drwxr-xr-x  14 rth  staff   476 Apr 14 02:25 .git
</span><span class='line'>-rw-r--r--   1 rth  staff  1649 Apr 13 16:44 .gitk
</span><span class='line'>-rw-r--r--   1 rth  staff  1760 Apr 13 16:10 .irbrc
</span><span class='line'>-rw-r--r--   1 rth  staff   118 Aug 22  2013 .zprofile
</span><span class='line'>-rw-r--r--   1 rth  staff   375 Apr 14 01:44 README.mdown
</span><span class='line'>
</span><span class='line'>~/.dotfiles<span class="o">[</span>master<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/RayHightower/.dotfiles/blob/master/.bash_profile">.bash_profile</a> in this example has grown to include aliases, path specifications, and a script that shows the current Git branch as part of the command prompt. The file also contains two aliases useful for showing or hiding dotfiles in the Finder: <code>showdots</code> and <code>hidedots</code>.</p>

<h3>Putting Dotfiles in One Directory</h3>

<p>Dotfiles are normally created in the user&rsquo;s home directory. For organization purposes, I moved my non-private dotfiles into a directory called <code>.dotfiles</code>, listed above. Unix makes this easy. First, move to the home directory and create <code>~/.dotfiles</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>mkdir .dotfiles
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Dotfiles can sometimes include private information. If you don&rsquo;t want to share information in a particular dotfile, don&rsquo;t put it on GitHub!</em></p>

<p>In this example, we&rsquo;ll only move one file, <code>.bash_profile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span><span class="nb">cd</span> .dotfiles/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>mv ../.bash_profile .
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Symbolic Links</h3>

<p>Symbolic links ensure that executables can find our dotfiles as needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ln -s ~/.dotfiles/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -al
</span><span class='line'>total 8
</span><span class='line'>drwxr-xr-x   3 rth  staff   102 Apr 14 19:48 .
</span><span class='line'>drwxr-xr-x+ 73 rth  staff  2482 Apr 14 19:47 ..
</span><span class='line'>lrwxr-xr-x   1 rth  staff    34 Apr 14 19:48 .bash_profile -&gt; /Users/rth/.dotfiles/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, we created a symbolic link called <code>.bash_profile</code> to the real <code>~/.dotfiles/.bash_profile</code> located in the <code>.dotfiles</code> directory. That way, any program that&rsquo;s looking for the <code>.bash_profile</code> file in the home directory will find what it needs, even though the file is somewhere else.</p>

<h3>Why Use Git to Manage Dotfiles?</h3>

<p>Git is a great tool for managing files that change over time. Dotfiles can change as we install new software or tweak our development environment. If we make a mistake, or if an installation script makes a mistake, we can use Git to roll back in history to a pre-mistake version of the dotfile.</p>

<h3>Don&rsquo;t Make All Dotfiles Public</h3>

<p>There are some dotfiles that you don&rsquo;t want to share publicly. For example, <code>.bash_history</code> contains all of the commands that have been executed in the shell. Do you really want the world that you sometimes <code>$ ssh myuserid@[embarassingdomainname].com</code>? Probably not. If you think that a dotfile might contain personal or confidential information, no need to broadcast it.</p>

<h3>Learning More About Dotfiles</h3>

<p>Most of my dotfiles, like <code>.bash_profile</code>, don&rsquo;t contain anything private. In fact, most of what I know about dotfiles has come from other developers via books, user groups, blogs, and spelunking through GitHub. Dotfile collections by <a href="https://github.com/hashrocket/dotmatrix">Hashrocket</a> and <a href="https://github.com/thoughtbot/dotfiles">Thoughtbot</a> are  especially good. My <code>~/.dotfiles</code> directory is available for public viewing on <a href="https://github.com/RayHightower/.dotfiles">GitHub</a>.</p>

<p>If you&rsquo;re doing something especially cool with your dotfiles, let&rsquo;s hear about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion and Memoization]]></title>
    <link href="http://RayHightower.com/blog/2014/04/12/recursion-and-memoization/"/>
    <updated>2014-04-12T10:48:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/12/recursion-and-memoization</id>
    <content type="html"><![CDATA[<blockquote><p>To iterate is human, to recurse divine.
&nbsp;<br/>
~ L. Peter Deutsch</p></blockquote>

<p>Recursion is available in many high-level languages, including Ruby. Recursive solutions can be joyfully elegant. At the same time, the pursuit of elegance can lead to unexpected performance pitfalls.</p>

<p>Fortunately, we can use optimization techniques to address performance problems before they occur. Memoization is one technique in our arsenal.</p>

<!--more-->


<h3>Before Memoization</h3>

<p>Memoization was designed to solve a particular kind of problem. Consider a method called <code>fibo(n)</code> that calculates the <em>nth</em> number of the <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci</a> sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Calculate the nth Fibonacci number, f(n).</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fibo</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Display the Fibonacci sequence.</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;fibo(</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">) = </span><span class="si">#{</span><span class="n">fibo</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example runs, but performance slows down as <em>n</em> gets larger. Why? Because this method re-calculates all preceeding Fibonacci numbers every time it calculates a new <code>fibo(n)</code>. When we calculate Fibonacci numbers manually, we know better. Humans are smart enough to refer to earlier work. But the <code>fibo(n)</code> method does not manage time very well.</p>

<p>Is it possible for the <code>fibo(n)</code> method to remember the results of earlier calculations so that it can avoid doing work that is already done? Yes, through <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>.</p>

<h3>Memoization</h3>

<p>Memoization means recording the results of earlier calculations so that we don&rsquo;t have to repeat the calculations later. If our code depends on the results of earlier calculations, and if the same calculations are performed over-and-over again, then it makes sense to store interim results (jot results down on a &lsquo;memo&rsquo; = memoization) so that we can avoid repeating the math.</p>

<p>The Fibonacci example can be improved through memoization as follows.</p>

<ul>
<li>Create a place to store temporary results.</li>
<li>Before performing a calculation, find out if the calculation has
already been done. If so, use the stored result.</li>
<li>If this is our first time calculating a particular <code>fibo(n)</code>, store
the results for future use.</li>
</ul>


<p>Here&rsquo;s how memoization is implemented in the Fibonacci example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Fibonacci numbers WITH memoization.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Initialize the memoization array.</span>
</span><span class='line'><span class="vi">@scratchpad</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vi">@max_fibo_size</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@max_fibo_size</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:notcalculated</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Calculate the nth Fibonacci number, f(n).</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fibo</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="vi">@max_fibo_size</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;n must be </span><span class="si">#{</span><span class="vi">@max_fibo_size</span><span class="si">}</span><span class="s2"> or less.&quot;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">!=</span> <span class="ss">:notcalculated</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@scratchpad</span><span class="o">[</span><span class="n">n</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Display the Fibonacci sequence.</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">50</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;fibo(</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">) = </span><span class="si">#{</span><span class="n">fibo</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Walking through the code&hellip; First we create a memoization array, a place to store the pre-calculated values. In this example, <code>@scratchpad[]</code> serves as our memoization array.</p>

<p>The <code>fibo(n)</code> method is similar to the one in the earlier example, with a few subtle differences. First, we need to determine whether we&rsquo;ve already calculated a particular value. Since we initialized all elements of the <code>@scratchpad</code> array with the <code>:notcalculated</code> symbol, it&rsquo;s easy to figure out where work needs to be done. If a Fibonacci number <code>fibo(n)</code> has already been calculated, we return the value stored at <code>@scratchpad[n]</code>. Otherwise, we calculate the new <code>fibo(n)</code> and store that value at <code>@scratchpad[n]</code> for later use.</p>

<h3>Performance Comparison</h3>

<p>The performance of the two programs is compared in this 1-minute video.</p>

<center><iframe src="http://RayHightower.com//player.vimeo.com/video/91841948" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<p>As the video shows, memoization is a performance booster.</p>

<h3>Sample Code</h3>

<p>Sample code related to this article can be found on <a href="https://github.com/RayHightower/fibonacci">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When in Doubt, Rake Clean]]></title>
    <link href="http://RayHightower.com/blog/2014/04/10/when-in-doubt-rake-clean/"/>
    <updated>2014-04-10T15:53:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/10/when-in-doubt-rake-clean</id>
    <content type="html"><![CDATA[<p>Earlier today, I upgraded from RubyMotion <code>v 2.24</code> to <code>v 2.26</code>. Immediately after the upgrade, I attempted to run a RubyMotion app that I’m working on. The result?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake
</span><span class='line'>
</span><span class='line'>     Build ./build/iPhoneSimulator-7.1-Development
</span><span class='line'>   Compile ./app/app_delegate.rb
</span><span class='line'>   Compile ./app/views/score_label.rb
</span><span class='line'>   Compile ./app/views/paddle_view.rb
</span><span class='line'>      Link ./build/iPhoneSimulator-7.1-Development/pong-rm4.app/pong-rm4
</span><span class='line'>Undefined symbols <span class="k">for </span>architecture i386:
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>clang: error: linker <span class="nb">command </span>failed with <span class="nb">exit </span>code 1 <span class="o">(</span>use -v to see invocation<span class="o">)</span>
</span><span class='line'>rake aborted!
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>What happened? It just ran a few minutes ago, right before the upgrade! Was RubyMotion broken? Was it time to reach out to the Twitterverse or Stack Overflow for assistance?</p>

<p>Not yet.</p>

<!--more-->


<h3>Cooler Heads</h3>

<p>Every time RubyMotion build an app, it stores the results in the <code>./build</code> directory. Since I had just done an upgrade, it was possible that remnants from a <code>v 2.24</code> build were interfering with my new <code>v 2.26</code> build. The solution?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake clean
</span><span class='line'>
</span><span class='line'>    Delete ./build
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>And now the app runs fine. Crisis averted. Back to work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Open Source?]]></title>
    <link href="http://RayHightower.com/blog/2014/04/05/why-open-source/"/>
    <updated>2014-04-05T00:40:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/05/why-open-source</id>
    <content type="html"><![CDATA[<p>As members of the open source community, we have internalized the benefits of open source. Sometimes, knowing a topic so well can hinder us from explaining it to people who need to understand our work: Clients, customers, and employers. They need to understand us because they pay us. Understanding helps to build trust.</p>

<p>The topic <a href="http://RayHightower.com/blog/2014/02/22/what-is-open-source/">What is Open Source</a> is covered in earlier post by that title. This presentation covers some of the &ldquo;whys&rdquo; of open source in terms that matter to the people we serve: Clients, customers, and employers.</p>

<!--more-->


<center><script async class="speakerdeck-embed" data-id="e20291c09eb00131918d4a0f4a2b8270" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>This presentation was delivered at the <a href="http://flourishconf.com/">Flourish 2014</a> conference at the University of Illinois at Chicago. I am grateful to the Flourish organizers and to UIC for inviting me to speak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flourish Open Source Conference at UIC]]></title>
    <link href="http://RayHightower.com/blog/2014/03/31/flourish-open-source-conference-at-uic/"/>
    <updated>2014-03-31T23:42:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/03/31/flourish-open-source-conference-at-uic</id>
    <content type="html"><![CDATA[<p><a href="http://flourishconf.com">Flourish</a> is an open source conference to be held at the University of Illinois at Chicago on Saturday, April 5, 2014. The conference is run by university students and tickets are free.</p>

<p>Why go to Flourish? Because&hellip;</p>

<!--more-->


<ul>
<li>You like open source.</li>
<li>You want to know more about open source.</li>
<li>You want to meet people who are passionate about open source.</li>
<li>All (or some combination) of the above.</li>
</ul>


<h3>Not Just Software</h3>

<p>Linux may be the best known open source project, but open source is not just about software. At Flourish 2009 a speaker mentioned a funny little circuit board called “Arduino” during one of the presentations. I turned to my neighbor in the audience, and I asked “What’s an Arduino?”</p>

<p>My neighbor pulled an Arduino out of his backpack and showed it to me. Wow. Open source extends to hardware, too! Since then, the Arduino has become part of the <a href="http://www.windycityrails.org/youth/">WindyCityRails Youth Program</a>. Beyond microcontrollers, single-board Linux machines like the <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Raspeberry Pi</a>, <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>, and <a href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a> have joined the open source hardware ranks.</p>

<h3>See You There</h3>

<p>Thank you, Flourish organizers, for inviting me to speak this year. UIC is where I first learned about open source, Linux, and the web. My appreciation for UIC extends beyond my CS degree.</p>

<p>Great things happen when like-minded people come together to exchange ideas. I look forward to seeing you at Flourish 2014!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How .gitignore Works]]></title>
    <link href="http://RayHightower.com/blog/2014/03/25/how-gitignore-works/"/>
    <updated>2014-03-25T18:20:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/03/25/how-gitignore-works</id>
    <content type="html"><![CDATA[<p>Earlier today I ran into a Git issue within a RubyMotion project. I added a directory to the project&rsquo;s <code>.gitignore</code> file, but Git seemed to ignore my ignore. Expressed more clearly, Git continued to track a directory that I explicitly told it to ignore.</p>

<p>What?</p>

<p>Either there was a bug in Git, or my understanding of <code>.gitignore</code> was incomplete. It was time for me to dig in and learn more about <code>.gitignore</code>.</p>

<!--more-->


<h3>What I Learned About .gitignore</h3>

<p>The root cause of my problem: Once Git has begun tracking a file or directory, adding it to <code>.gitignore</code> changes nothing. Git will continue to track the file unless we explicitly tell Git to stop tracking the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm --cached <span class="o">[</span>filename<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, if you want to stop tracking an entire directory (like me in this case)&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm -r --cached <span class="o">[</span>directoryname<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-r</code> flag will tell Git to stop tracking all of the sub-directories and files within <code>directoryname</code>, recursively.</p>

<p>Git was behaving exactly as designed.</p>

<h3>Penalty</h3>

<p>I should have known this a long time ago. My penalty: A public admission :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaConf Chicago Recap]]></title>
    <link href="http://RayHightower.com/blog/2014/03/10/cocoaconf-chicago-recap/"/>
    <updated>2014-03-10T11:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/03/10/cocoaconf-chicago-recap</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/cocoaconf-2014.jpg' width='' height='' alt='Cool stuff from CocoaConf.' title='Cool stuff from CocoaConf.'><span class='caption-text'>Cool stuff from CocoaConf.</span></span></p>

<blockquote><p>One purpose of a conference is to help you to spot trends while there&rsquo;s still time to reap the benefits of being an early adopter.
&nbsp;<br/>
~Brian Marick at <a href="http://scna.softwarecraftsmanship.org/">SCNA 2013</a></p></blockquote>

<p>Early adopters on Apple&rsquo;s Mac OS X and iOS platforms flock to <a href="http://cocoaconf.com/">CocoaConf</a>, a multi-city conference for developers. Tickets are slightly easier to get than <a href="http://en.wikipedia.org/wiki/Wwdc">WWDC</a>; CocoaConf consistently sells out.</p>

<p>CocoaConf&rsquo;s presenters are practicing developers, actively building real software every day. They come to CocoaConf to share their experiences in a wonderful upward-spiral of technical learning. Here are a few highlights from the latest CocoaConf, held March 7-8 near Chicago.</p>

<!--more-->


<h3>Customers Will Pay for Services</h3>

<p><a href="https://twitter.com/justin">Justin Williams</a> kicked things off with a keynote titled <em>10 Things I Think I Think</em>. Williams recently acquired <a href="http://glassboard.com/">Glassboard</a>, so his developer skills are blended with the insights of a business owner. His list of ten included one approach to making money from mobile apps: Forget about selling a million copies in the App Store. Instead, create a service, charge a monthly fee for the service, and give the app away for free so customers can engage with the service. Engaged customers will continue to pay the monthly fee. When customers are served well, they will pay.</p>

<h3>Effective iOS 7 Networking</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/afnetworking-charles.png' width='' height='' alt='Charles shows network connections.' title='Charles shows network connections.'><span class='caption-text'>Charles shows network connections.</span></span>
Customer-focused mobile apps usually communicate with other software via the web. <a href="http://twitter.com/subdigital">Ben Scheirman</a> shared his experiences in building iOS apps that communicate with web services. Several questions are raised when we build apps like this, namely:</p>

<ul>
<li>How do we include communication capabilities without sacrificing performance?</li>
<li>If the mobile app requests information from a web service, and the service is unavailable (or slow) how do we avoid frustrating the user?</li>
</ul>


<p><code>NSURLSession</code>, introduced with iOS 7, lets us upload and download in the background. Users are kept happy because the app continues to function in the foreground. Scheirman&rsquo;s <a href="https://speakerdeck.com/subdigital/effective-network-programming-in-ios-7">slides</a> and <a href="https://github.com/subdigital/mods-2013">sample code</a> give more details.</p>

<p>It is also interesting to note what tools the presenters use in their
daily work. Scheirman uses <a href="http://www.charlesproxy.com/">Charles</a>
to monitor network traffic between machines, and to track down hiccups.</p>

<h3>Xcode Walkabout</h3>

<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/xcode-git-commit.png' width='' height='' alt='Showing Git commit messages in Xcode.' title='Showing Git commit messages in Xcode.'><span class='caption-text'>Showing Git commit messages in Xcode.</span></span>
Most of my iOS time is spent with <a href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/">Vim</a> and <a href="http://RayHightower.com/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. I use Xcode mainly to learn things that I can apply to RubyMotion. Still, <a href="http://twitter.com/savinola">Laura Savino</a>&rsquo;s exploration of Xcode proved valuable.</p>

<p>Like many developers on the Apple platforms, Savino has a love/hate relationship with Xcode. She almost titled her talk &ldquo;stupid little buttons that don&rsquo;t even look like buttons.&rdquo; Savino summarized several years of Xcode immersion and pair programming into 60 minutes of little-known tips and tricks. For example, Xcode plays nicely with Git (you can even show commit messages within the IDE). And it&rsquo;s possible to use Vim key bindings while editing files.</p>

<h3>Sprite Kit</h3>

<p><a href="http://twitter.com/kognate">Josh Smith</a>&rsquo;s Sprite Kit presentation was full of gotcha-eliminating information. For example, the coordinate systems for Sprite Kit and UIKit are inverted. I&rsquo;m sure this is documented somewhere, but I didn&rsquo;t know about it! The bottom line with Sprite Kit: We can add animation to our apps without doing all of the fundamental work. Saves time.</p>

<p>Slides and code are posted in a single <a href="https://github.com/kognate/presentations">repo on GitHub</a>. Worth looking at.</p>

<h3>Parallel Computing with OpenCL</h3>

<p>The parallel computing talk by <a href="http://twitter.com/hyperjeff">Jeff Biggus</a> was the most mind-blowing session of CocoaConf, for me. The presentation was exciting because it tied our current set of tools (like <a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">GCD</a>) with high performance computing work currently underway at universities and at corporations like NVidia. When theory blends with application, great things can be achieved.</p>

<p>Biggus shared some of the work of <a href="https://www.khronos.org/opencl/">OpenCL</a>, a standard designed for cross-platform parallel computing. We care about parallel computing because&hellip;</p>

<ul>
<li>Moore&rsquo;s Law has just about run its course.</li>
<li>Engineers have packed transistors about as tightly as they can on silicon.</li>
</ul>


<p>Unless we can figure out how to <a href="http://en.wikipedia.org/wiki/Montgomery_Scott">rewrite the laws of physics</a>, the next advances in computing performance will come from making processors work together without stepping on each other&rsquo;s toes.</p>

<h3>The Klein Family</h3>

<p>2014 marks CocoaConf&rsquo;s third year in the Chicago area. The conference is run by Dave and Debbie Klein and their 14 children. <a href="http://cocoaconf.com/family">About The Family Behind CocoaConf</a> gives details.</p>

<p>Thank you, Klein family, for another great CocoaConf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing MacVim on OS X Mavericks]]></title>
    <link href="http://RayHightower.com/blog/2014/03/04/fixing-macvim-on-osx-mavericks/"/>
    <updated>2014-03-04T14:48:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/03/04/fixing-macvim-on-osx-mavericks</id>
    <content type="html"><![CDATA[<p>Experience told me to delay upgrading to OS X Mavericks for as long as possible because the upgrade would likely break my dev environment. Sure enough, the upgrade broke <a href="http://RayHightower.com/blog/2013/01/12/why-i-use-vim/">MacVim</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>which mvim
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;nix <code>which</code> command returned a null response when asked about MacVim. Not cool, Mavericks!</p>

<!--more-->


<p>Fortunately, I’m running <a href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>. After the standard <code>brew doctor</code> and <code>brew update</code>, the following resolved the MacVim problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew uninstall macvim
</span><span class='line'>Uninstalling /usr/local/Cellar/macvim/7.4-70...
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>followed by…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>brew install <span class="nv">macvim</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/b4winckler/macvim/archive/snapshot-72.tar.gz
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; ./configure --with-features<span class="o">=</span>huge --enable-multibyte --with-macarchs<span class="o">=</span>x86_64 --enable-perlinterp --enable-rubyinterp --enable-tcli
</span><span class='line'><span class="o">==</span>&gt; <span class="nv">make</span>
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>.app bundles were installed.
</span><span class='line'>Run <span class="sb">`</span>brew linkapps<span class="sb">`</span> to symlink these to /Applications.
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/macvim/7.4-72: 1799 files, 28M, built in 37 seconds
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>And now…</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span>which mvim
</span><span class='line'>/usr/local/bin/mvim
</span><span class='line'>
</span><span class='line'>~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Whew. Homebrew saves the day again!</p>
]]></content>
  </entry>
  
</feed>
