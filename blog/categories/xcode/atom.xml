<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xcode | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-07-07T18:34:28-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion to Build Something Useful]]></title>
    <link href="http://RayHightower.com/blog/2013/11/23/using-rubymotion-to-build-something-useful/"/>
    <updated>2013-11-23T14:11:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/23/using-rubymotion-to-build-something-useful</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Chicago-RubyMotion/">Chicago RubyMotion User Group</a> held its inaugural meeting this week. Thank you <a href="http://twitter.com/dastels">Dave Astels</a> for organizing the group and for asking me to present. Thanks also to <a href="http://devbootcamp.com">Dev Bootcamp</a> for hosting the event.</p>

<p>Slides are embedded here:</p>

<center><script async class="speakerdeck-embed" data-id="f0c21e7036e10131765f62eb06398856" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<!--more-->


<h3>Doing RubyMotion in Chicago? Be There!</h3>

<p>If you&rsquo;re using RubyMotion and you&rsquo;re located in the Chicago area, check out the <a href="http://www.meetup.com/Chicago-RubyMotion/">Chicago RubyMotion</a> group. The group attracts devs who are running into the same challenges as you. Devs who work with other devs tend to learn more over time.</p>

<p>See you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Programming: The Big Nerd Ranch Guide]]></title>
    <link href="http://RayHightower.com/blog/2013/02/28/objective-c-programming-the-big-nerd-ranch-guide/"/>
    <updated>2013-02-28T15:52:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/02/28/objective-c-programming-the-big-nerd-ranch-guide</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/objective-c-big-nerd.png" align="right" width="250" height="357" alt="Objective-C Programming - The Big Nerd Ranch Guide" title="Objective-C Programming - The Big Nerd Ranch Guide"></p>

<blockquote><p>You will be baffled from time to timeâ€¦ Stick with this book. I promise the bewilderment will cease before you get to the final page.<br/>~ Aaron Hillegass, Author</p></blockquote>

<h4>Finding the Right Objective-C Book</h4>

<p>I&rsquo;ve gone through several Objective-C books in my quest to master <a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>. You read that right: I&rsquo;m learning Objective-C so that I can master RubyMotion. <em>Objective-C Programming: The Big Nerd Ranch Guide</em> is one book that clicks for me. Here&rsquo;s why.</p>

<!-- more -->


<ul>
<li><p>Minimal fluff. Other Objective-C books start off with speeches about why a dev should write for iOS. What a waste of paper. The Big Nerd approach: Start with a few paragraphs about C, and then jump right in to Xcode installation followed by &ldquo;Hello World.&rdquo; Refreshingly direct.</p></li>
<li><p>Clear examples. As I immerse myself deeper into the world of Objective-C, I am troubled by much of the documentation. It&rsquo;s okay to describe a method signature, but a description with an example is much better. While reading other Objective-C books, I found myself pausing to search Stack Overflow for alternate explanations. The Big Nerd book is better because everything is self-contained. Method descriptions are followed by clear examples.</p></li>
<li><p>Zero Assumptions. Even though the book contains minimal fluff, readers will appreciate how the author defines terms throughout the text. For example, the book does not assume that the reader knows the classroom definition of the word <em>syntax</em>. It defines the word explicitly:</p></li>
</ul>


<blockquote><p>Syntax is the set of rules that governs how your code must be written in a given programming language. These rules are extremely specific, and if you fail to follow them, your program won&rsquo;t work.</p></blockquote>

<p>Clearly put!</p>

<h4>Do I Really Need Objective-C?</h4>

<p>Yes. If you want to be effective with RubyMotion, you must grow strong with Objective-C.</p>

<p>The RubyMotion devs whom I admire most also know Objective-C. Devs like Matt Aimonetti (creator of BubbleWrap), Randall Thomas and Tammer Saleh (authors of <em>RubyMotion in the Cloud</em>), Jonathan Penn (instructor/speaker at CocoaConf) and Laurent Sansonetti (creator of RubyMotion) move seamlessly between the worlds of Ruby and Objective-C. Luke became a Jedi because he followed in the footsteps of Yoda.</p>

<p>More important than following the masters: Learning from their triumphs and mistakes by reading their code. Developers in 2013 are fortunate to have tools like GitHub where code is shared on a massive scale. Most iOS code is written in Objective-C. If we want to learn from the iOS code that has been written before, we need to know Objective-C.</p>

<h4>Highly Recommended</h4>

<p>If you want to develop apps for iOS devices, start with <em>Objective-C Programming: The Big Nerd Ranch Guide</em>. The book is also helpful if you prefer RubyMotion over Objective-C.</p>

<p>And don&rsquo;t forget your <a href="/blog/2012/09/03/10000-hours-of-practice/">10,000 Hours of Practice</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Pilot for Xcode Navigation]]></title>
    <link href="http://RayHightower.com/blog/2013/01/08/code-pilot-for-Xcode-navigation/"/>
    <updated>2013-01-08T10:54:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/01/08/code-pilot-for-Xcode-navigation</id>
    <content type="html"><![CDATA[<p><a href="http://codepilot.cc">Code Pilot</a> is a free tool that lets developers navigate quickly between files in Xcode. I was introduced to the tool yesterday by Don Bora, instructor of the Mobile Makers <a href="http://mobilemakers.co/">iOS Accelerated</a> course that I&rsquo;m currently taking.</p>

<h4>Starting Code Pilot</h4>

<p>After downloading and installing the product, launch Code Pilot by starting Xcode and using the SHIFT-COMMAND-X key sequence.</p>

<p><img src="http://RayHightower.com/images/nine-days-left.png" align="center" height="494" width="630" alt="Code Pilot w/o License" title="Code Pilot w/o License"></p>

<p>Code Pilot is free, but you still need to request and install the license file.</p>

<!--more-->


<h4>Installing the License</h4>

<p>It wasn&rsquo;t immediately obvious to me where to put the license file. A quick email to Code Pilot&rsquo;s tech support team got me an answer. This post may save you some time if you decide to try Code Pilot for yourself.</p>

<p>In Xcode, go into preferences (Xcode | Preferences). One section of the preference pane is devoted to Code Pilot. Go to that section, paste in the license, and you&rsquo;re all set.</p>

<p><img src="http://RayHightower.com/images/paste-license.png" align="center" height="483" width="630" alt="Code Pilot preferences in Xcode" title="Code Pilot preferences in Xcode" ></p>

<h4>First Impression of Code Pilot</h4>

<p>I can see how the tool could make Xcode navigation faster. One drawback: As a Vim user, I&rsquo;m in the habit of navigating with h, j, k, and l. Code Pilot requires me to use the arrow keys. If Code Pilot came equipped with Vim key bindings, I would view that as a plus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Makers, Objective-C, and RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion/"/>
    <updated>2012-12-14T06:45:00-06:00</updated>
    <id>http://RayHightower.com/blog/2012/12/14/mobile-makers-objective-c-rubymotion</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ipad-iphone.jpg" width="256" height="250" alt="iPad iPhone" title="iPad iPhone" align="right">
This week I enrolled in the iOS Accelerated course offered by the <a href="http://mobilemakers.co/ios-accelerated">Mobile Makers Academy</a>. If you would like to do the same, mention my name and we&rsquo;ll both receive a $300 discount on tuition.</p>

<p>Class starts on Jan 7, 2013. The evening lectures are convenient for those who serve clients by day.</p>

<p>Of course, a tuition discount and easy schedule are poor reasons to enroll in a course. This article will describe my reasons for enrolling. If your thirst for learning is anything like mine, you might like Mobile Makers too.</p>

<!--more-->


<h4>Background and Expectations</h4>

<p>My background includes an undergrad degree in computer science. Over the years, I&rsquo;ve coded in C, Lisp, Fortran, Pascal, x86 assembler, and Ruby. I became a &ldquo;business guy&rdquo; when I launched WisdomGroup eighteen years ago. WisdomGroup is fortunate to have a team of strong technologists who keep our clients happy while teaching me more every day.</p>

<p>In late 2011, I began to focus on sharpening my personal technical skills, and that led to my immersion in <a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a> this year. I expect the Mobile Makers experience to strengthen my grasp of Objective-C, OO theory, and iOS. Cross-training with Objective-C will boost my RubyMotion skills as well.</p>

<h4>Instruction Format</h4>

<p><a href="https://twitter.com/dbora">Don Bora</a> is the head instructor at Mobile Makers. Don is embarrassed when I say this, but he&rsquo;s the main reason why I chose to enroll. Don is a true polyglot programmer, with a background that includes Objective-C (of course!), C#, Java, Ruby, and Smalltalk among other languages. He currently builds Objective-C apps for his clients at <a href="http://eightbitstudios.com/">Eight Bit Studios</a>. Don holds degrees in computer science and linguistics.</p>

<p>Mobile Makers offers a learning format that is relatively new to me. Beyond the traditional classroom lectures, students get plenty of time for lab immersion and interaction with mentors. I first witnessed this format when Neal Sales-Griffin and Mike McGee launched <a href="http://starterleague.com">The Starter League</a>.</p>

<h4>More About Lab Time and Mentorship</h4>

<p>Classroom sessions are fine, but they&rsquo;re not enough. Can you learn a musical instrument by listening to lectures and taking notes? Mastering a skill like software development requires deliberate practice with challenging exercises. Learning is accelerated when lectures, labs, and mentorship complement each other.</p>

<h4>Learning Architecture</h4>

<p>Behind the scenes, Adam Lupu is the learning architect who designed the Mobile Makers curriculum. In Don&rsquo;s words: &ldquo;I know how to explain things, but I don&rsquo;t know how to structure a course. That&rsquo;s where Adam comes in.&rdquo; Adam was the lead architect behind the Rails-based curriculum at the Starter League. Now he&rsquo;s building the mobile curriculum at Mobile Makers.</p>

<h4>Excitement</h4>

<p>The Mobile Makers <a href="http://mobilemakers.co/ios-accelerated">iOS Accelerated</a> class is only three weeks away. If you mention this blog post, you and I will both get a $300 tuition discount. More important, we will acquire skills that will serve us well as we solve problems for clients. What an exciting time to be a developer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion With Xcode's Interface Builder]]></title>
    <link href="http://RayHightower.com/blog/2012/10/18/using-rubymotion-with-interface-builder/"/>
    <updated>2012-10-18T18:34:00-05:00</updated>
    <id>http://RayHightower.com/blog/2012/10/18/using-rubymotion-with-interface-builder</id>
    <content type="html"><![CDATA[<h4>Executive Summary</h4>

<p><a href="http://www.rubymotion.com/">RubyMotion</a> is a Mac application that lets developers write iOS apps in
Ruby. It&rsquo;s possible to create the user interface for the app entirely
within RubyMotion or with a Ruby gem like <a href="https://github.com/rubymotion/teacup">Teacup</a>. But what about devs who prefer Interface Builder?</p>

<p>This article will show how to use Xcode&rsquo;s Interface Builder to create a basic UI for
a RubyMotion application.</p>

<!-- more -->


<p><img src="http://RayHightower.com/assets/fizzbuzzrm.png" width = "200" align = "right"
alt="Interface Builder with RubyMotion" title="Interface Builder with RubyMotion"></p>

<h4>Our Sample App: FizzBuzz</h4>

<p>For this example we will build an iOS app that calculates and displays
the fizzbuzz function. As a refresher, here&rsquo;s the fizzbuzz algorithm:</p>

<ol>
<li>Count integers starting with 1 and incrementing as high as the user wants to go.</li>
<li>If the integer to be displayed is a multiple of 3, display &ldquo;fizz&rdquo; instead.</li>
<li>If the integer to be displayed is a multiple of 5, display &ldquo;buzz&rdquo; instead.</li>
<li>If the integer to be displayed is a multiple of both 3 and 5 (i.e. a multiple of 15) display &ldquo;fizzbuzz&rdquo;.</li>
</ol>


<p>The bare-bones UI appears at right. The plus sign increments the
counter, minius decrements it, and the label area shows &ldquo;Begin&rdquo; at
the beginning.</p>

<h4>First, Build the RubyMotion App</h4>

<p>We start by building the fizzbuzz app in RubyMotion.</p>

<p><code>
$ motion create fizzbuzzrm
</code></p>

<p>The code for the finished app can be found on <a href="http://github.com/rayhightower/fizzbuzzrm">GitHub</a>.</p>

<h4>Build the UI in Interface Builder</h4>

<p>Next, build the UI in Xcode&rsquo;s Interface Builder.</p>

<p>After completing the interface, we will need to asign tags to each
element so that the UI knows how to communicate with RubyMotion. Scroll
down to View|Tag in the rightmost colum (screenshot below). In this
example, I assigned the tags 1, 2, 3, and 4 to the label, plus button,
minus button, and reset, respectively.
<img src="http://RayHightower.com/assets/tag1.png" alt="Interface Builder With RubyMotion" title="Interface Builder with RubyMotion"></p>

<p>Save the IB file in the <code>/resources</code> directory of your
RubyMotion project. In my example, I called the file
<code>fbib.xib</code>. RubyMotion will compile the .xib file next time
you run the rake command to build the app.</p>

<h4>Connecting the .xib file to the RubyMotion App</h4>

<p>Let&rsquo;s head back to the RubyMotion app so we can tell RubyMotion how to
interact with the IB file. Note that we specify the name of the IB file
on the second line of the <code>loadView</code> method.</p>

<p>``` ruby
  def loadView</p>

<pre><code>views = NSBundle.mainBundle.loadNibNamed "fbib", owner:self, options:nil
self.view = views[0]
@counter = 0
@view_handle = self.view
</code></pre>

<p>  end
```</p>

<p>The <code>viewDidLoad</code> method is where we assign buttons to their corresponding
methods, and we specify how the app should behave when each button is
pressed.</p>

<p>``` ruby
  def viewDidLoad</p>

<pre><code>@label = view.viewWithTag 1
plus_button = view.viewWithTag 2
minus_button = view.viewWithTag 3
reset_button = view.viewWithTag 4
# background_area = view.viewWithTag 5

plus_button.addTarget(self, action:'plusTapped:', forControlEvents:UIControlEventTouchUpInside)
minus_button.addTarget(self, action:'minusTapped:', forControlEvents:UIControlEventTouchUpInside)
reset_button.addTarget(self, action:'resetTapped:', forControlEvents:UIControlEventTouchUpInside)
# background_area.addTarget(self, action:'backgroundTapped:', forControlEvents:UIControlEventTouchUpInside)
</code></pre>

<p>  end
```</p>

<p>And finally, let&rsquo;s define a method for each button.</p>

<p>``` ruby
  def plusTapped(sender)</p>

<pre><code>@counter += 1
@label.text = FizzBuzzViewController.fbcalc(@counter).to_s
</code></pre>

<p>  end</p>

<p>  def minusTapped(sender)</p>

<pre><code>@counter -= 1
@label.text = FizzBuzzViewController.fbcalc(@counter).to_s
</code></pre>

<p>  end</p>

<p>  def resetTapped(sender)</p>

<pre><code>@counter = 0
@label.text = "Begin"

rotate_background(@view_handle)
</code></pre>

<p>  end</p>

<p>  def rotate_background(view_handle)</p>

<pre><code>@color_index ||= 0

case @color_index
when 0
  @view_handle.backgroundColor = UIColor.redColor
when 1
  @view_handle.backgroundColor = UIColor.greenColor
when 2
  @view_handle.backgroundColor = UIColor.blueColor
when 3
  @view_handle.backgroundColor = UIColor.yellowColor
end

@color_index = (@color_index +1) % 4
</code></pre>

<p>  end
```</p>

<h4>Rake</h4>

<p>Run <code>$ rake</code> to compile and execute the app.</p>

<p>Note the surprise when you hit the Reset button in the app. This
surprise is one reason why you should always have a designer on your
dev team!</p>

<h4>Conclusion</h4>

<p>The more familiar I become with RubyMotion, the more I learn that there
are multiple ways to do things, especially when it comes to UI. If you
have ideas or suggestions for a different approach, feel free to dash
me a message through the <a href="http://RayHightower.com/contact">Contact Form</a>. Thanks!</p>
]]></content>
  </entry>
  
</feed>
