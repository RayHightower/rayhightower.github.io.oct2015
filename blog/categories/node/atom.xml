<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2015-03-06T18:09:30-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js Under Water]]></title>
    <link href="http://RayHightower.com/blog/2014/09/25/nodejs-under-water/"/>
    <updated>2014-09-25T22:54:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/09/25/nodejs-under-water</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/nodejs/events/206159562">New York City Node JS Meetup</a> asked me to speak about <a href="http://rayhightower.com/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a> on September 24, 2014. About eighty developers came out for the meeting. Thank you <a href="http://shutterstock.com">Shutterstock</a>, <a href="https://twitter.com/mateodelnorte">Matt Walters</a>, and all of the organizers for making it happen. Slides appear below.</p>




<!--more-->




<center><script async class="speakerdeck-embed" data-id="25d9158026930132408f62c99fab29cb" data-ratio="1.7777778" src="//speakerdeck.com/assets/embed.js"></script></center>




<p>&nbsp;
&nbsp;</p>




<h3>Presentation Video</h3>




<p><del>The following video is a rough draft, useful if you want to hear the dialog that went along with the slides.</del> <em>Update: <a href="http://www.hakkalabs.co/articles/openrov-node-js-underwater">Hakka Labs</a> has published the official video from the event, embedded below.</em>  Lots of good questions from the audience.</p>




<center><iframe width="560" height="315" src="//www.youtube.com/embed/7eUoGtPUKbw?rel=0" frameborder="0" allowfullscreen></iframe></center>




<p><em>Correction: Maximum OpenROV depth = 100 meters. I gave an incorrect maximum depth figure in the video.</em></p>




<p>&nbsp;
&nbsp;</p>




<h3>Next Step With OpenROV</h3>




<p>Our work with OpenROV will climax at <a href="http://rubycaribe.com">RubyCaribe</a> in January 2015. If you&rsquo;re an intermediate or advanced software developer, and if you like to stretch your brain with Ruby and other languages (like Node.js) then RubyCaribe might be for you.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenROV Assembly Challenges]]></title>
    <link href="http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges/"/>
    <updated>2014-08-19T16:44:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/openrov_rth.jpg' width='' height='' alt='OpenROV fully assembled.' title='OpenROV fully assembled.'><span class='caption-text'>OpenROV fully assembled.</span></span>
I know this problem can be solved. I just haven’t figured it out yet, and I need help from the <a href="http://openrov.com/">OpenROV</a> community to do so.</p>




<p><em>Update: The OpenROV community delivered. Solution: <a href="http://RayHightower.com/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>




<h3>Parts That Work</h3>




<p>Software image updates on the Beaglebone Black work flawlessly thanks to scripts written by <a href="https://github.com/BrianAdams">Brian Adams</a> and <a href="https://github.com/codewithpassion">Dominick Fretz</a>. The cockpit software shows a real-time image from the camera, the LED lights are super-bright, and the lasers hold steady at 10cm apart. My fully assembled OpenROV passes the water submersion test. Yes, it’s waterproof, thanks to O-rings and silicon-based lubricant!</p>




<p>What about the motors? The motors work, almost. Could it be the
electronic speed control (ESC) settings, calibration, or less than
perfect soldering? That&rsquo;s where I need help.</p>




<!--more-->




<h3>Summary of Symptoms</h3>




<p>With the cockpit software running and attached to the OpenROV:</p>




<ul>
<li>If I turn on any of the three ESCs, two of the motors (vertical and port) start running at full blast. The starboard motor remains stationary.</li>
<li>While the V and P motors continue to run at full blast, the starboard motor responds to the cockpit slider controls as expected: +1 makes S run full blast on one direction, -1 sends S full blast in the other direction, and 0 stops the S motor completely. During this exercise, V and P continue at full blast.</li>
<li>Turning off the ESC stops the V and P motors.</li>
<li>When I turn on any of the ESCs, the camera servo jumps slightly, about 10 degrees. And then the V and P motors run full blast.</li>
</ul>




<p>When the cockpit software is not running (and the Google Chrome browser is completely closed):</p>




<ul>
<li>Turning on an ESC has no effect on the motors.</li>
<li>The camera servo jumps slightly, about 10 degrees, as it did with the cockpit software running. But the motors remain stationary.</li>
</ul>




<p>Interesting behavior!</p>




<h3>Double-Checking the ESC Settings</h3>




<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/esc_program_card.jpg' width='' height='' alt='ESC Program Card' title='ESC Program Card'><span class='caption-text'>ESC Program Card</span></span>
During troubleshooting, my first step was to double-check the electronic speed controller (ESC) settings. Setting the ESCs with the beep-and-button-push method was time consuming. And I was concerned that I may have made a mistake in counting the beeps.</p>




<p>Solution: I bought an ESC program card. Amazon sells them for less than fifteen dollars, well worth the price when you consider the peace of mind that the card brings. The program card shows each ESC setting with a clear 7-segment LED display, much easier than counting beeps!</p>




<p>According to the program card, all of the ESC settings are correct.</p>




<h3>Using a Power Supply Instead of Batteries</h3>




<p>All of the time spent troubleshooting drained the OpenROV batteries. So I devised a way to apply power directly to the OpenROV without batteries.</p>




<p><span class='caption-wrapper middle'><img class='caption' src='http://RayHightower.com/images/openrov_power_supply.jpg' width='' height='' alt='Directly connected to power supply.' title='Directly connected to power supply.'><span class='caption-text'>Directly connected to power supply.</span></span></p>




<p>The photo reveals the random condition of my work surface, so here&rsquo;s a verbal description of this hack:</p>




<ul>
<li>In the background, a power supply set to 12 volts</li>
<li><code>+</code> lead (red) connected to the <code>+</code> leads of the battery containers, via a wire acting as a Y-connector.</li>
<li><code>-</code> lead (black) connected to a ground terminal on the OpenROV controller board through a black jumper cable</li>
</ul>




<p>I find that this hack works best if I connect the 12 volt setup first while the Topside Adapter is powered off. Applying power (via USB) to the Topside Adapter turns the entire assembly on.</p>




<p>If you&rsquo;re reading this section and you know a better way for me to connect the power supply, please advise in the comments section below.</p>




<h3>Advice Welcome</h3>




<p>I&rsquo;m not sure where to look next to solve the challenge with the motors. Maybe I skipped a step somewhere during assembly? Advice welcome!</p>




<p><em>Update: As noted at the beginning of this article, this problem has been solved. Solution: <a href="http://RayHightower.com/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Prep for OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov/"/>
    <updated>2014-06-30T14:06:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/nodejs-white.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
<a href="http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov/">OpenROV is an underwater robot</a> controlled through a web browser. The server-side of the web app is written in Node.js, running on a <a href="http://RayHightower.com/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">BeagleBone Black</a> inside the OpenROV.</p>




<p>You don&rsquo;t need to know Node.js in order to pilot an OpenROV. And you don&rsquo;t need to do anything in this article to construct an OpenROV from a kit. But if you’re the kind of maker who likes to dig deep into a project, you might enjoy exploring Node.js.</p>




<!--more-->




<h3>Mac OS X and Node.js</h3>




<p>Everything written here applies to Node.js as it runs on Mac OS X. If your local machine runs Linux or Windows, you will need to consult other resources in order to run Node locally.</p>




<h3>Homebrew First</h3>




<p>Make sure you’re running <a href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a> on your Mac. Homebrew is a seamless way to manage packages on Mac OS X. To install Homebrew&hellip;</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</span>install
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>After installation, confirm that Homebrew is running properly&hellip;</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew doctor
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<h3>Installing Node.js</h3>




<p>Now that Homebrew is installed and running, Node.js can be installed with a single line command.</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install node
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>To confirm that Node.js is installed on your system and to check the version number&hellip;</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span> which node
</span><span class='line'>/usr/local/bin/node
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>node --version
</span><span class='line'>v0.10.26
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<h3>Hello World in Node.js</h3>




<p>You know the compter science tradition: The first program in any new language has to say &ldquo;Hello World.&rdquo; Here&rsquo;s a sample <code>Hello World</code> program from the official <a href="http://nodejs.org">Node.js</a> web site, slightly modified to suit OpenROV.</p>




<p>First, create a file called <code>helloworld.js</code> and fill it with the following code.</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Sample web server from http://nodejs.org, slightly modified.</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World. OpenROV runs Node.js!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://127.0.0.1:1337/&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>Next, from the same directory where you saved <code>helloworld.js</code>, run the file from the command line like so&hellip;</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>node helloworld.js
</span><span class='line'>Server running at http://127.0.0.1:1337/
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>Finally, open up a web browser on your local machine and navigate to <code>http://127.0.0.1:1337</code>. You should see a bare-bones web page similar to this one.</p>




<p><span class='caption-wrapper center'><img class='caption' src='http://RayHightower.com/images/openrov-runs-nodejs.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>




<p>Now that you have Node.js running locally, you&rsquo;re ready to explore the <a href="http://github.com/openrov">OpenROV repo on GitHub</a>.</p>




<h3>Next Steps</h3>




<p>Future blog posts about Node.js and OpenROV will consider questions like:</p>




<ul>
<li><p>What does Node.js do for OpenROV that other languages can’t do?</p></li>
<li><p>What other languages might we use to control OpenROV? It’s all open source, so our brainstorms could one day turn into actual code running on OpenROV!</p></li>
<li><p>How does Node.js on the BeagleBone Black interact with the Arduino and other OpenROV components?</p></li>
</ul>




<p>Keep exploring!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BeagleBone Black Running Ubuntu: Part2 (Plus Ruby on Rails)]]></title>
    <link href="http://RayHightower.com/blog/2014/01/06/beaglebone-black-ubuntu-ruby-rails-part-2/"/>
    <updated>2014-01-06T02:31:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/01/06/beaglebone-black-ubuntu-ruby-rails-part-2</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/ruby-rails-ubuntu-beaglebone-black.png' width='' height='' alt='Ruby. Rails. Ubuntu. BeagleBone Black.' title='Ruby. Rails. Ubuntu. BeagleBone Black.'><span class='caption-text'>Ruby. Rails. Ubuntu. BeagleBone Black.</span></span></p>




<p>Part one of this series shows <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">how to install Ubuntu on the BeagleBone Black</a>. We used a MacBook Pro to burn an Ubuntu disk image onto an SD card, and then we booted a BeagleBone Black from the image we created.</p>




<p>This post, part two, covers the installation of the Ubuntu GUI, Ruby, and Rails. All of the commands in this article are run on the BeagleBone Black.</p>




<p><a href="http://nodejs.org">Node.js</a> bonus: Rails requires a JavaScript runtime, and Node.js offered the quickest way to fulfill this requirement. Details appear within.</p>




<h3>Gotcha: Partition Size</h3>




<p>At the end of <a href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">part one</a>, we successfully booted the Bone with the Ubuntu command line interface. Now it&rsquo;s time to add the GUI. Two things to know about the Ubuntu GUI installation&hellip;</p>




<!--more-->




<ul>
<li>The partition we created on the SD card (in part one) is too small to hold the Ubuntu GUI. Solution: The SD card has some extra room, and we can re-size the partition.</li>
<li>We can install the Ubuntu GUI with a single line command. But it takes an hour for the Bone to download, compile, and install all of the GUI libraries.</li>
</ul>




<p>If we try to install the GUI with insufficient space, the installation will fail midway and we will have wasted half an hour. So it&rsquo;s best to re-size first.</p>




<h3>Doing Our Own Re-Sizing?</h3>




<p>Why didn&rsquo;t the partition have the right size when we originally downloaded the image file? Good question.</p>




<p>My guess: The image file was designed to be as small as possible in order to minimize download time. That makes sense. I plan to test this theory by creating a new image with a larger partition size and a pre-installed GUI. If the test is successful, results will be posted on this blog. If the mission fails, then the secretary will disavow any knowledge&hellip;</p>




<h3>How to Re-Size the Partition</h3>




<p><code>df</code> is the Unix &lsquo;disk free&rsquo; command. It shows used/available disk space.</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>df
</span><span class='line'>
</span><span class='line'>Filesystem     1K-blocks    Used Available Use% Mounted on
</span><span class='line'>rootfs           3778576 2722944    885776  76% /
</span><span class='line'>/dev/root        3778576 2722944    885776  76% /
</span><span class='line'>devtmpfs          253580       4    253576   1% /dev
</span><span class='line'>none               50748     608     50140   2% /run
</span><span class='line'>none                5120       0      5120   0% /run/lock
</span><span class='line'>none              253728     204    253524   1% /run/shm
</span><span class='line'>/dev/mmcblk0p1      1004     480       524  48% /boot/uboot
</span><span class='line'>/dev/mmcblk1p1     65390    6536     58854  10% /media/boot
</span><span class='line'>/dev/mmcblk1p2   1748200    2664   1655068   1% /media/rootfs
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p><code>ll</code> is one of the useful aliases built into Ubuntu&rsquo;s <code>.bashrc</code> file. We can use it to examine the partitions on the SD card.</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>ll /dev/mmcblk*
</span><span class='line'>
</span><span class='line'>brw-rw---- 1 root disk 179,  0 Jan  5 15:37 /dev/mmcblk0
</span><span class='line'>brw-rw---- 1 root disk 179,  1 Jan  1  2000 /dev/mmcblk0p1
</span><span class='line'>brw-rw---- 1 root disk 179,  2 Jan  1  2000 /dev/mmcblk0p2
</span><span class='line'>brw-rw---- 1 root disk 179,  8 Jan  1  2000 /dev/mmcblk1
</span><span class='line'>brw-rw---- 1 root disk 179, 16 Jan  1  2000 /dev/mmcblk1boot0
</span><span class='line'>brw-rw---- 1 root disk 179, 24 Jan  1  2000 /dev/mmcblk1boot1
</span><span class='line'>brw-rw---- 1 root disk 179,  9 Jan  1  2000 /dev/mmcblk1p1
</span><span class='line'>brw-rw---- 1 root disk 179, 10 Jan  1  2000 /dev/mmcblk1p2
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p><code>fdisk</code> will resize the partition we&rsquo;re after. <code>root</code> priviledges are required to modify the partition table, so we&rsquo;ll use <code>sudo</code>. The standard <a href="http://RayHightower.com/sudo-disclaimer">sudo disclaimer</a> applies.</p>




<p>A few useful <code>fdisk</code> commands:</p>




<ul>
<li><code>p</code> prints the partition table.</li>
<li><code>d</code> deletes a partition.</li>
<li><code>n</code> creates a new partition.</li>
<li><code>w</code> write new information to the partition table.</li>
<li><code>q</code> quits fdisk.</li>
</ul>




<p>Here&rsquo;s the plan: In order to increase the size of <code>/dev/mmcblk0p2</code>, we will delete it, and then re-create it with a larger size. Note the use of the <code>d</code> and <code>n</code> commands in the following sequence. When <code>fdisk</code> asks us for the new partition number, type, first sector, and last sector, we will choose the defaults. Choosing the defaults will use all of the available space on the SD card.</p>




<p>Your numbers will vary depending on the size and configuration of your SD card, but the general procedure will be the same.</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>sudo fdisk /dev/mmcblk0
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>ubuntu:
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: p
</span><span class='line'>
</span><span class='line'>Disk /dev/mmcblk0: 3965 MB, 3965190144 bytes
</span><span class='line'>4 heads, 16 sectors/track, 121008 cylinders, total 7744512 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x80008000
</span><span class='line'>
</span><span class='line'>        Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/mmcblk0p1   *        2048      133119       65536    e  W95 FAT16 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class='line'>/dev/mmcblk0p2          133120     1638399      752640   83  Linux
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: d
</span><span class='line'>Partition number <span class="o">(</span>1-4<span class="o">)</span>: 2
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: p
</span><span class='line'>
</span><span class='line'>Disk /dev/mmcblk0: 3965 MB, 3965190144 bytes
</span><span class='line'>4 heads, 16 sectors/track, 121008 cylinders, total 7744512 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x80008000
</span><span class='line'>
</span><span class='line'>        Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/mmcblk0p1   *        2048      133119       65536    e  W95 FAT16 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: n
</span><span class='line'>Partition <span class="nb">type</span>:
</span><span class='line'>   p   primary <span class="o">(</span>1 primary, 0 extended, 3 free<span class="o">)</span>
</span><span class='line'>   e   extended
</span><span class='line'>Select <span class="o">(</span>default p<span class="o">)</span>: p
</span><span class='line'>Partition number <span class="o">(</span>1-4, default 2<span class="o">)</span>: 2
</span><span class='line'>First sector <span class="o">(</span>133120-7744511, default 133120<span class="o">)</span>:
</span><span class='line'>Using default value 133120
</span><span class='line'>Last sector, +sectors or +size<span class="o">{</span>K,M,G<span class="o">}</span> <span class="o">(</span>133120-7444511, default 7744511<span class="o">)</span>:
</span><span class='line'>Using default value 7744511
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: p
</span><span class='line'>
</span><span class='line'>Disk /dev/mmcblk0: 3965 MB, 3965190144 bytes
</span><span class='line'>4 heads, 16 sectors/track, 121008 cylinders, total 7744512 sectors
</span><span class='line'><span class="nv">Units</span> <span class="o">=</span> sectors of 1 * <span class="nv">512</span> <span class="o">=</span> 512 bytes
</span><span class='line'>Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x80008000
</span><span class='line'>
</span><span class='line'>        Device Boot      Start         End      Blocks   Id  System
</span><span class='line'>/dev/mmcblk0p1   *        2048      133119       65536    e  W95 FAT16 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class='line'>/dev/mmcblk0p2          133120     7744511     3805696   83  Linux
</span><span class='line'>
</span><span class='line'>Command <span class="o">(</span>m <span class="k">for </span><span class="nb">help</span><span class="o">)</span>: w
</span><span class='line'>The partition table has been altered!
</span><span class='line'>
</span><span class='line'>Calling ioctl<span class="o">()</span> to re-read partition table.
</span><span class='line'>
</span><span class='line'>Warning: Re-reading the partition table failed with error 16: Device or resource busy.
</span><span class='line'>The kernel still uses the old table. The new table will b eused at
</span><span class='line'>the next reboot or after you run partprobe<span class="o">(</span>8<span class="o">)</span> or kpartx<span class="o">(</span>8<span class="o">)</span>
</span><span class='line'>Syncing disks.
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>The warning/error message at the end just means that we need reboot the Bone before the partition table takes effect.</p>




<p>Reboot the BeagleBone Black, holding down the boot switch (closest to the USB port) to ensure that we boot to the system on the SD card instead of the eMMC.</p>




<p>After the Bone reboots, run <code>resize2fs</code> to expand the partition created above.</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ubuntu-armhf:~<span class="nv">$ </span>sudo resize2fs /dev/mmcblk0p2
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>ubuntu:
</span><span class='line'>resize2fs 1.42.5 <span class="o">(</span>29-Jul-2012<span class="o">)</span>
</span><span class='line'>Filesystem at /dev/mmcblk0p2 is mounted on /<span class="p">;</span> on-line resizing required
</span><span class='line'><span class="nv">old_desc_blocks</span> <span class="o">=</span> 1, <span class="nv">new_desc_blocks</span> <span class="o">=</span> 1
</span><span class='line'>The filesystem on /dev/mmcblk0p2 is now 951424 blocks long.
</span><span class='line'>
</span><span class='line'>ubuntu@ubuntu-armhf:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>And now we have enough room to install the Ubuntu GUI.</p>




<h3>Installing the Ubuntu GUI</h3>




<p><em>Update (Feb2014): In the comments below, Jonathan Chan describes how he updated the desktop installation files before installing the Ubuntu desktop. To update the desktop installation files, grab the latest list of packages (<code>update</code>) and then <code>upgrade</code> the packages that need it.</em></p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get upgrade
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>After the partition on the SD card has been resized, this command will intall the GUI. The command is short, but the process takes about an hour:</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install ubuntu-desktop
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>When installation and compilation are complete, Ubuntu will return to the command prompt. Here&rsquo;s how to reboot:</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo reboot
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>Several minutes later, the Ubuntu 12 GUI will appear. Congratulations!  Login using the default credentials (login: ubuntu, pw: ubuntu) to get to the Ubuntu desktop.</p>




<h3>Gotcha: Running RVM</h3>




<p>I prefer to use the Ruby Version Manager (RVM) for bouncing between Ruby versions. RVM misbehaved, initially. Then I learned something special about RVM&rsquo;s interaction with Ubuntu. From the RVM support pages…</p>




<blockquote><p>For RVM to work properly, you have to set the &lsquo;Run command as login shell&rsquo; checkbox on the Title and Command tab inside of gnome-terminal&rsquo;s Settings page.</p></blockquote>




<p>This image shows the checkbox mentioned in the quote. It&rsquo;s inside of the lower red rectangle.</p>




<p><span class='caption-wrapper'><img class='caption' src='http://RayHightower.com/images/rvm-ubuntu-run-command_as_login-shell.jpg' width='' height='' alt='RVM: Run command as login shell.' title='RVM: Run command as login shell.'><span class='caption-text'>RVM: Run command as login shell.</span></span></p>




<p>Details are in the RVM support article <a href="http://rvm.io/integration/gnome-terminal">Integrating RVM with gnome-terminal</a>.</p>




<h3>Gotcha: Ruby Installation</h3>




<p>Ruby installation initially failed (speculation) because the Bone went into power save mode during the installation process. Ruby installed successfully on the second try when I kept the machine awake by moving the mouse. This <em>power save hypothesis</em> has not been thoroughly tested.</p>




<h3>Gotcha: Rails Installation</h3>




<p><span class='caption-wrapper right'><img class='caption' src='http://RayHightower.com/images/nodejs-white.png' width='' height='' alt='Node.js on BeagleBone Black.' title='Node.js on BeagleBone Black.'><span class='caption-text'>Node.js on BeagleBone Black.</span></span>
Rails needs a JavaScript runtime in order to function. Here are two ways to meet this requirement:</p>




<ul>
<li>Install Node.js, or</li>
<li>Install <a href="http://rubygems.org/gems/therubyracer">therubyracer</a> gem.</li>
</ul>




<p>Installing <code>therubyracer</code> did not work for me. But Node.js installed quickly, like so:</p>




<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install nodejs
</span></code></pre></td></tr></table></div></figure></notextile></div>




<p></p>




<p>Now that we have a JavaScript runtime, Rails runs successfully.</p>




<p>Side note: If you want to see what a Node.js-equipped Bone can do, check
out <a href="http://openrov.com">OpenROV</a>.</p>




<h3>Conclusion</h3>




<p>Bottom line: Ruby, Rails, and Ubuntu can run successfully on BeagleBone Black, with Node.js as a bonus.</p>




<p>The BeagleBone Black is a cool option for running Ubuntu. Yes, it runs slower than a typical laptop. But it runs, and at $45 each we can build a cluster of Bones if we&rsquo;re concerned about performance!</p>




<p>What an amazing bundle of technology.</p>




<p><em>You might also be interested in <a href="http://RayHightower.com/blog/2012/12/03/ruby-on-raspberry-pi/">Ruby on Raspberry Pi</a></em>.</p>

]]></content>
  </entry>
  
</feed>
