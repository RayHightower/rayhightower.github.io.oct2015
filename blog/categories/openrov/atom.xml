<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenROV | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/openrov/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-08-21T23:19:56-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenROV Meets Chicago's Lake Michigan]]></title>
    <link href="http://RayHightower.com/blog/2014/08/22/openrov-meets-chicago-lake-michigan/"/>
    <updated>2014-08-22T19:27:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/22/openrov-meets-chicago-lake-michigan</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_chicago_lake_michigan.jpg' width='' height='' alt='OpenROV meets Lake Michigan.' title='OpenROV meets Lake Michigan.'><span class='caption-text'>OpenROV meets Lake Michigan.</span></span></p>

<p>This week I took the <a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a> for a spin in Chicago’s Lake Michigan. Success! Here are a few first-voyage observations:</p>

<!--more-->


<ul>
<li>The electronics chassis is truly waterproof. Same for the battery compartments. Waterproofing was my biggest concern during assembly. Hats off to the OpenROV team for an excellent set of assembly instructions.</li>
<li>Condensation builds up in the electronics chassis during operation. A quick review of the OpenROV forum tells me that I should add a desiccant bag to the compartment. Or pack the unit in low humidity.</li>
<li>The OpenROV is a little back-heavy. The back dips lower than the front during operation. I should add some weights to the front of the unit.</li>
<li>Tether management is a <em>must</em>. After one voyage (can you really call a
simple dip in the lake a voyage?) my OpenROV tether is a mess. Time to
build a way to manage the tether.</li>
</ul>


<p>What an exciting way to explore Node.js, BeagleBone Black, and the Maker Movement all at once.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESC Programming and Calibration for OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/08/21/esc-programming-and-calibration-for-openrov/"/>
    <updated>2014-08-21T16:27:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/21/esc-programming-and-calibration-for-openrov</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_esc.jpg' width='' height='' alt='Three ESCs, one for each motor. Each ESC has a switch and a power/signal connector.' title='Three ESCs, one for each motor. Each ESC has a switch and a power/signal connector.'><span class='caption-text'>Three ESCs, one for each motor. Each ESC has a switch and a power/signal connector.</span></span></p>

<h3>ESCs: New Experience for Me</h3>

<p>Electronic speed controllers (ESCs) were completely new to me when I first assembled my <a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a>. This article documents my initial misunderstanding (and eventual understanding) of ESCs so that future builders can move forward with fewer glitches.</p>

<!--more-->


<p>The photo at the top of this page shows an OpenROV controller board, a
BeagleBone Black, and three ESCs. This article will focus on the ESCs.</p>

<h3>Remember This About ESCs</h3>

<p>Until all three ESCs are programmed <em>and</em> calibrated, the OpenROV might behave erratically. For example&hellip;</p>

<ul>
<li>The servo that moves the camera up and down will not respond to keyboard commands.</li>
<li>When you turn one ESC switch on, an unrelated motor (or motors, plural) might start spinning. In my case, turning on one ESC (any of the three ESCs) caused two motors to spin.</li>
</ul>


<p>In my case, the programming was correct, but I <a href="/blog/2014/08/19/openrov-assembly-challenges/">dropped the ball on calibration</a>. And when the motors responded out-of-sync with the switches, I thought I had soldered some connections incorrectly. De-soldering and re-soldering connections would have been a ton of extra work, and that would not have solved the problem.</p>

<p>I reached out to the <a href="http://openrov.com/forum">forum</a> where OpenROV engineer Brian Adams pointed me in the right direction. Brian&rsquo;s diplomatic response could be summarized as <em>RTFM</em>. So I re-RTFM&rsquo;d, and it worked!</p>

<p>The bottom line: Do the ESC programming and calibration first. If the OpenROV misbehaves, re-check programming and calibration before considering other solutions.</p>

<h3>Why Use ESCs?</h3>

<p>Since ESCs require so many steps (programming and calibration) we might logically ask: <em>Why use ESCs at all?</em> Why not use simple analog motors without controllers and call it a day?</p>

<p>We use ESCs because the benefits outweigh the work required to configure them. It&rsquo;s all about control. By using an ESC to control each motor, we can use software to specify the <em>exact</em> number of RPMs and direction for each motor. We can make any motor (or combination or motors) start, stop, or change direction on a dime. Even better: When we move a lever on our controller of choice (keyboard, game controller, etc.) software on the OpenROV controller board decides the exact number of RPMs for each motor at that instant. OpenROV pilots don&rsquo;t need to think about this process while it happens. It just works.</p>

<p>The pilot&rsquo;s finger moves a controller lever. The lever position gets sent to software on the OpenROV controller board, and the controller board tells each ESC what its corresponding motor should do.</p>

<p>In summary, we use ESCs so that OpenROV pilots can have greater control over movement.</p>

<h3>How to Re-Check ESC Programming</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/esc_program_card.jpg' width='' height='' alt='ESC Program Card' title='ESC Program Card'><span class='caption-text'>ESC Program Card</span></span>
Those of you with ESC experience already know about ESC program cards. I first learned about the cards while researching this problem. Amazing devices! Yes, it is possible to program ESCs using the series of button pushes and beeps in the OpenROV instructions. That&rsquo;s what I did, and it works. But a program card is faster. Amazon sells ESC program cards for less than fifteen dollars each. Well worth the investment, especially if you&rsquo;re programming ESCs for several OpenROVs.</p>

<h3>ESC Calibration Gotcha</h3>

<p>ESC calibration was tricky for me because turning on any of the three ESC switches caused two of my motors to spin: vertical and port. Further, since my electronics chassis was (mostly) assembled by the time I got to the calibration step, it wasn&rsquo;t easy for me to trace each power switch to its corresponding ESC.</p>

<p>So here&rsquo;s what I had to do.</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov_esc_switch_labels.jpg' width='' height='' alt='ESC switch labels.' title='ESC switch labels.'><span class='caption-text'>ESC switch labels.</span></span></p>

<ul>
<li>First, I took everything apart, while keeping the electronic leads (those which had already been soldered) intact. I needed to do this so I could see where each wire was going.</li>
<li>Next, I labeled the back of each ESC switch with its corresponding ESC number. I did not want to go through the disassembly step again! The Brother P-Touch label maker was perfect for this step.</li>
<li>Finally, I followed the ESC calibration steps <em>while ignoring the behavior of the motors</em>. For example, turning on ESC1 caused the motors connected to ESC1 (port) <em>and</em> ESC2 (vertical) to spin. I ignored the motors while plowing through OpenROV&rsquo;s written calibration steps.</li>
</ul>


<h3>Modified Calibration Steps</h3>

<p>Here are the OpenROV calibration steps, with slight tweaks based on my personal experience.</p>

<ol>
<li>Each ESC switch has a red reset button. To turn the ESC on, move its slider switch toward the reset button. The off position is in the opposite direction.</li>
<li>With all of the ESCs switched off, go ahead and power up the OpenROV. The motors should remain stationery at this point. Connect with the cockpit software and open the diagnostic pane.</li>
<li>Grab one ESC switch, and hold down its red reset button while powering it on. (At this point, two of my motors began spinning, V and P. I ignored the spinning motors while plowing through the rest of the steps.) You will hear a beeping noise. Let go of the reset button. (It will keep beeping which is fine). While it’s beeping, the red LED inside the corresponding ESC will flash in rhythm with the beeps.</li>
<li>Press reset once and you should hear a single beep. Move that motor&rsquo;s slider all the way to the right (or click the &ldquo;1&rdquo;) and then press the reset on the ESC again. You should get 2 beeps. The motor will not move during this step.</li>
<li>Move that motor&rsquo;s slider all the way to the left (or click the &ldquo;-1&rdquo;) and then press the reset on the ESC again. You will hear three beeps.</li>
<li>After a few seconds the motor will begin to spin. Switch off the ESC, and the motor will stop spinning.</li>
<li>Move the slider back to the middle (or click the &ldquo;0&rdquo;).</li>
<li>Repeat these steps with the next ESC until all three ESCs are done.</li>
</ol>


<p>After calibration:</p>

<ul>
<li>I was able to leave all three ESCs powered on with no movement from the motors.</li>
<li>The motors moved when I moved one of the sliders on the  cockpit software&rsquo;s diagnostic pane. Further, each motor responded to the correct slider.</li>
<li>The servo for the up/down motion of the camera responded correctly to the Q, A, and Z commands.</li>
<li>The motors moved in response to the correct commands on the keyboard, as described by the cockpit software&rsquo;s quick reference guide.</li>
</ul>


<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov_lake_michigan_2.jpg' width='' height='' alt='OpenROV meets Lake Michigan.' title='OpenROV meets Lake Michigan.'><span class='caption-text'>OpenROV meets Lake Michigan.</span></span>
In other words, calibration worked, when I ignored the craziness of the non-calibrated motors while plowing through. RTFM worked!</p>

<h3>Success</h3>

<p>There is great satisfaction in solving an elusive problem. The OpenROV forum proved to be a powerful and useful resource. Next step: <a href="/blog/2014/08/22/openrov-meets-chicago-lake-michigan/">Piloting the OpenROV in Lake Michigan</a> on the following day.</p>

<p><em>Photo acknowledgement: The original version of the ESC photo was published in the <a href="http://openrov.dozuki.com/Guide/How+to+Assemble+OpenROV+2.6/6">OpenROV assembly manual</a>. Thanks OpenROV team!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenROV Assembly Challenges]]></title>
    <link href="http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges/"/>
    <updated>2014-08-19T16:44:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov_rth.jpg' width='' height='' alt='OpenROV fully assembled.' title='OpenROV fully assembled.'><span class='caption-text'>OpenROV fully assembled.</span></span>
I know this problem can be solved. I just haven’t figured it out yet, and I need help from the <a href="http://openrov.com/">OpenROV</a> community to do so.</p>

<p><em>Update: The OpenROV community delivered. Solution: <a href="/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>

<h3>Parts That Work</h3>

<p>Software image updates on the Beaglebone Black work flawlessly thanks to scripts written by <a href="https://github.com/BrianAdams">Brian Adams</a> and <a href="https://github.com/codewithpassion">Dominick Fretz</a>. The cockpit software shows a real-time image from the camera, the LED lights are super-bright, and the lasers hold steady at 10cm apart. My fully assembled OpenROV passes the water submersion test. Yes, it’s waterproof, thanks to O-rings and silicon-based lubricant!</p>

<p>What about the motors? The motors work, almost. Could it be the
electronic speed control (ESC) settings, calibration, or less than
perfect soldering? That&rsquo;s where I need help.</p>

<!--more-->


<h3>Summary of Symptoms</h3>

<p>With the cockpit software running and attached to the OpenROV:</p>

<ul>
<li>If I turn on any of the three ESCs, two of the motors (vertical and port) start running at full blast. The starboard motor remains stationary.</li>
<li>While the V and P motors continue to run at full blast, the starboard motor responds to the cockpit slider controls as expected: +1 makes S run full blast on one direction, -1 sends S full blast in the other direction, and 0 stops the S motor completely. During this exercise, V and P continue at full blast.</li>
<li>Turning off the ESC stops the V and P motors.</li>
<li>When I turn on any of the ESCs, the camera servo jumps slightly, about 10 degrees. And then the V and P motors run full blast.</li>
</ul>


<p>When the cockpit software is not running (and the Google Chrome browser is completely closed):</p>

<ul>
<li>Turning on an ESC has no effect on the motors.</li>
<li>The camera servo jumps slightly, about 10 degrees, as it did with the cockpit software running. But the motors remain stationary.</li>
</ul>


<p>Interesting behavior!</p>

<h3>Double-Checking the ESC Settings</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/esc_program_card.jpg' width='' height='' alt='ESC Program Card' title='ESC Program Card'><span class='caption-text'>ESC Program Card</span></span>
During troubleshooting, my first step was to double-check the electronic speed controller (ESC) settings. Setting the ESCs with the beep-and-button-push method was time consuming. And I was concerned that I may have made a mistake in counting the beeps.</p>

<p>Solution: I bought an ESC program card. Amazon sells them for less than fifteen dollars, well worth the price when you consider the peace of mind that the card brings. The program card shows each ESC setting with a clear 7-segment LED display, much easier than counting beeps!</p>

<p>According to the program card, all of the ESC settings are correct.</p>

<h3>Using a Power Supply Instead of Batteries</h3>

<p>All of the time spent troubleshooting drained the OpenROV batteries. So I devised a way to apply power directly to the OpenROV without batteries.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_power_supply.jpg' width='' height='' alt='Directly connected to power supply.' title='Directly connected to power supply.'><span class='caption-text'>Directly connected to power supply.</span></span></p>

<p>The photo reveals the random condition of my work surface, so here&rsquo;s a verbal description of this hack:</p>

<ul>
<li>In the background, a power supply set to 12 volts</li>
<li><code>+</code> lead (red) connected to the <code>+</code> leads of the battery containers, via a wire acting as a Y-connector.</li>
<li><code>-</code> lead (black) connected to a ground terminal on the OpenROV controller board through a black jumper cable</li>
</ul>


<p>I find that this hack works best if I connect the 12 volt setup first while the Topside Adapter is powered off. Applying power (via USB) to the Topside Adapter turns the entire assembly on.</p>

<p>If you&rsquo;re reading this section and you know a better way for me to connect the power supply, please advise in the comments section below.</p>

<h3>Advice Welcome</h3>

<p>I&rsquo;m not sure where to look next to solve the challenge with the motors. Maybe I skipped a step somewhere during assembly? Advice welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudCamp Chicago: Developer Night]]></title>
    <link href="http://RayHightower.com/blog/2014/07/25/cloudcamp-chicago-developer-night/"/>
    <updated>2014-07-25T15:09:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/25/cloudcamp-chicago-developer-night</id>
    <content type="html"><![CDATA[<p><a href="http://cohesiveft.com">CohesiveFT</a> hosted a CloudCamp Developer Night this week. Speakers were Philip Szalwinski of 8th Light, John Downey of Braintree, Marcy Capron of Polymathic, and me. My presentation, <a href="/blog/2014/06/16/citizen-science-with-openrov/">Citizen Science With OpenROV</a>, was based on the blog post of the same name.</p>

<p>Thank you <a href="https://twitter.com/MargieWalker">Margaret Walker</a> for running a great event. Slides appear below.</p>

<!--more-->


<script async class="speakerdeck-embed" data-id="4d87fa90f65e0131729a0a98c369402e" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Prep for OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov/"/>
    <updated>2014-06-30T14:06:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/nodejs-white.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
<a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV is an underwater robot</a> controlled through a web browser. The server-side of the web app is written in Node.js, running on a <a href="/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">BeagleBone Black</a> inside the OpenROV.</p>

<p>You don&rsquo;t need to know Node.js in order to pilot an OpenROV. And you don&rsquo;t need to do anything in this article to construct an OpenROV from a kit. But if you’re the kind of maker who likes to dig deep into a project, you might enjoy exploring Node.js.</p>

<!--more-->


<h3>Mac OS X and Node.js</h3>

<p>Everything written here applies to Node.js as it runs on Mac OS X. If your local machine runs Linux or Windows, you will need to consult other resources in order to run Node locally.</p>

<h3>Homebrew First</h3>

<p>Make sure you’re running <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a> on your Mac. Homebrew is a seamless way to manage packages on Mac OS X. To install Homebrew&hellip;</p>

<p>```bash
$ ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install">https://raw.github.com/Homebrew/homebrew/go/install</a>)"install</p>

<p>```</p>

<p>After installation, confirm that Homebrew is running properly&hellip;</p>

<p>```bash
$ brew doctor</p>

<p>```</p>

<h3>Installing Node.js</h3>

<p>Now that Homebrew is installed and running, Node.js can be installed with a single line command.</p>

<p>```bash
$ brew install node</p>

<p>```</p>

<p>To confirm that Node.js is installed on your system and to check the version number&hellip;</p>

<p>```bash
$  which node
/usr/local/bin/node</p>

<p>$ node &mdash;version
v0.10.26</p>

<p>$
```</p>

<h3>Hello World in Node.js</h3>

<p>You know the compter science tradition: The first program in any new language has to say &ldquo;Hello World.&rdquo; Here&rsquo;s a sample <code>Hello World</code> program from the official <a href="http://nodejs.org">Node.js</a> web site, slightly modified to suit OpenROV.</p>

<p>First, create a file called <code>helloworld.js</code> and fill it with the following code.</p>

<p>```javascript
// Sample web server from <a href="http://nodejs.org,">http://nodejs.org,</a> slightly modified.</p>

<p>var http = require(&lsquo;http&rsquo;);
http.createServer(function (req, res) {
  res.writeHead(200, {&lsquo;Content-Type&rsquo;: &lsquo;text/plain&rsquo;});
  res.end(&lsquo;Hello World. OpenROV runs Node.js!&rsquo;);
}).listen(1337, &lsquo;127.0.0.1&rsquo;);
console.log(&lsquo;Server running at <a href="http://127.0.0.1:1337/">http://127.0.0.1:1337/</a>&rsquo;);
```</p>

<p>Next, from the same directory where you saved <code>helloworld.js</code>, run the file from the command line like so&hellip;</p>

<p>```bash
$ node helloworld.js
Server running at <a href="http://127.0.0.1:1337/">http://127.0.0.1:1337/</a></p>

<p>$
```</p>

<p>Finally, open up a web browser on your local machine and navigate to <code>http://127.0.0.1:1337</code>. You should see a bare-bones web page similar to this one.</p>

<p><span class='caption-wrapper center'><img class='caption' src='/images/openrov-runs-nodejs.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<p>Now that you have Node.js running locally, you&rsquo;re ready to explore the <a href="http://github.com/openrov">OpenROV repo on GitHub</a>.</p>

<h3>Next Steps</h3>

<p>Future blog posts about Node.js and OpenROV will consider questions like:</p>

<ul>
<li><p>What does Node.js do for OpenROV that other languages can’t do?</p></li>
<li><p>What other languages might we use to control OpenROV? It’s all open source, so our brainstorms could one day turn into actual code running on OpenROV!</p></li>
<li><p>How does Node.js on the BeagleBone Black interact with the Arduino and other OpenROV components?</p></li>
</ul>


<p>Keep exploring!</p>
]]></content>
  </entry>
  
</feed>
