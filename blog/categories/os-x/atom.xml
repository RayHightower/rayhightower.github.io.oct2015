<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os x | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2015-05-30T11:02:41-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pgcli - Command Line Interface for PostgreSQL]]></title>
    <link href="http://RayHightower.com/blog/2015/04/28/pgcli-command-line-interface-for-postgresql/"/>
    <updated>2015-04-28T11:59:44-05:00</updated>
    <id>http://RayHightower.com/blog/2015/04/28/pgcli-command-line-interface-for-postgresql</id>
    <content type="html"><![CDATA[<p>Debugging is a fact of life when building apps with Rails or any other set of tools. All troubleshooting is easier when we can see what‚Äôs going on inside.</p>

<p><a href="http://pgcli.com/">pgcli</a> is a command line tool that lets devs examine PostgreSQL databases from the command line. <code>pgcli</code> offers more powerful features than <code>psql</code> (the default terminal front-end for PostgreSQL) such as:</p>

<ul>
<li>Autocompletion. In fact, <code>pgcli</code> autocompletion is smart enough to only show table names after <code>FROM</code> in a SQL statement.</li>
<li>Syntax highlighting. Find gotchas quicker, just like you would in a text editor.</li>
</ul>


<p>Debugging is easier when you can look inside the black box.</p>

<!--more-->


<h3>Installation</h3>

<p>To install <code>pgcli</code> on Mac OS X, use <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>:</p>

<p>&#8220;` bash
$ brew install pgcli
==> Installing dependencies for pgcli: openssl, postgresql
==> Installing pgcli dependency: openssl
==> Downloading <a href="https://homebrew.bintray.com/bottles/openssl-1.0.2a-1.yosemite.b">https://homebrew.bintray.com/bottles/openssl-1.0.2a-1.yosemite.b</a></p>

<h6>################################################################## 100.0%</h6>

<h1>Homebrew installs dependencies as required&hellip;</h1>

<p>==> Installing pgcli
==> Downloading <a href="https://homebrew.bintray.com/bottles/pgcli-0.16.3.yosemite.bottl">https://homebrew.bintray.com/bottles/pgcli-0.16.3.yosemite.bottl</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring pgcli-0.16.3.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/pgcli/0.16.3: 423 files, 5.2M</p>

<p>$</p>

<p>&#8220;`</p>

<p>Verify installation as follows:</p>

<p>&#8220;` bash
$ which pgcli
/usr/local/bin/pgcli</p>

<p>$ pgcli &mdash;version
Version: 0.16.3</p>

<p>$</p>

<p>&#8220;`</p>

<h3>Using pgcli</h3>

<p>To view a list of available <code>pgcli</code> commands:</p>

<p>&#8220;` bash</p>

<p>$ pgcli &mdash;help
Usage: pgcli [OPTIONS] [DATABASE] [USERNAME]</p>

<p>Options:
  -h, &mdash;host TEXT     Host address of the postgres database.
  -p, &mdash;port INTEGER  Port number at which the postgres instance is listening.
  -U, &mdash;user TEXT     User name to connect to the postgres database.
  -W, &mdash;password      Force password prompt.
  -w, &mdash;no-password   Never prompt for password.
  -v, &mdash;version       Version of pgcli.
  -d, &mdash;dbname TEXT   database name to connect to.
  &mdash;help              Show this message and exit.</p>

<p>$</p>

<p>&#8220;`</p>

<p>To use <code>pgcli</code>:</p>

<p>&#8220;` bash</p>

<p>$ pgcli
Version: 0.16.3
Chat: <a href="https://gitter.im/amjith/pgcli">https://gitter.im/amjith/pgcli</a>
Mail: <a href="https://groups.google.com/forum/#!forum/pgcli">https://groups.google.com/forum/#!forum/pgcli</a>
Home: <a href="http://pgcli.com">http://pgcli.com</a>
rth> \l</p>

<p>&#8220;`</p>

<p><code>\l</code> will list the databases available to this installation of PostgreSQL. Note that the <code>pgcli</code> command prompt shows the currently logged in username. To discover other commands, use <code>\?</code>.</p>

<p>As you experiment with <code>pgcli</code>, notice the command completion and the syntax highlighting. Big time savers relative to <code>psql</code>.</p>

<h3>Acknowledgements</h3>

<p>Thanks <a href="https://twitter.com/adomokos">Attila Domokos</a> and <a href="https://twitter.com/lostghost">Ken Walters</a> for the tweets that led to this <code>pgcli</code> blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using rlwrap with MIT's Scheme REPL]]></title>
    <link href="http://RayHightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl/"/>
    <updated>2015-03-19T17:02:11-05:00</updated>
    <id>http://RayHightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl</id>
    <content type="html"><![CDATA[<p>Users of the Linux or OS X command line know that they can hit the up arrow to view the previously executed command. However, this behavior is missing from the <code>mit-scheme</code> read-evaluate-print-loop (REPL). <code>mit-scheme</code> is the language used in <a href="/blog/2015/02/18/sicp-study-group/">SICP</a>.</p>

<p>For example, hitting the up arrow in the Scheme REPL gives us this non-useful result: <code>^[[A</code>. The previous command is not repeated.</p>

<p>How do we add up-arrow functionality to the <code>mit-scheme</code> REPL? By using <code>rlwrap</code>.</p>

<!--more-->


<h3>Installing rlwrap</h3>

<p>On Mac OS X with <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>, first update Homebrew with <code>$ brew update</code>.</p>

<p>Then install <code>rlwrap</code>.</p>

<p>&#8220;` bash</p>

<p>$ brew install rlwrap
==> Downloading <a href="https://homebrew.bintray.com/bottles/rlwrap-0.42.yosemite.bottle.tar.gz">https://homebrew.bintray.com/bottles/rlwrap-0.42.yosemite.bottle.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring rlwrap-0.42.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/rlwrap/0.42: 29 files, 312K</p>

<p>&#8220;`</p>

<p>You can verify the <code>rlwrap</code> installation as follows.</p>

<p>&#8220;` bash</p>

<p>$ which rlwrap
/usr/local/bin/rlwrap</p>

<p>&#8220;`</p>

<h3>Using rlwrap</h3>

<p>To use <code>rlwrap</code> with <code>scheme</code> do the following.</p>

<p>&#8220;` bash</p>

<p>$ rlwrap scheme</p>

<p>&#8220;`</p>

<h3>Add an Alias to ~/.bash_profile</h3>

<p>To speed things up a bit, we can add an <code>alias</code> to <code>~/.bash_profile</code>.</p>

<p>&#8220;` bash</p>

<h1>for rlwrap &amp; scheme support. Details: <a href="http://rayhightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl/">http://rayhightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl/</a></h1>

<p>alias sicp=&lsquo;rlwrap scheme&rsquo;</p>

<p>&#8220;`</p>

<p>So now when we type <code>sicp</code> at the command line&hellip;</p>

<p><code>`` bash
$ sicp
MIT/GNU Scheme running under OS X
Type</code>^C&#8217; (control-C) followed by `H&#8217; to obtain information about interrupts.</p>

<p>Copyright &copy; 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>

<p>Image saved on Saturday May 17, 2014 at 2:39:25 AM
  Release 9.2 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118 || Edwin 3.116</p>

<p>1 ]=></p>

<p>&#8220;`
Exactly what we expect.</p>

<h3>Conclusion</h3>

<p>And now we have it. The up-arrow behavior that we enjoy at the command line is now in the Scheme REPL. Big savings in time, and better for learning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Vulnerability on Mac OS X and Windows]]></title>
    <link href="http://RayHightower.com/blog/2014/12/18/git-vulnerability-on-mac-os-x/"/>
    <updated>2014-12-18T17:00:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/12/18/git-vulnerability-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Today the <a href="http://git-scm.com/">Git</a> core team announced a security vulnerability and a corresponding fix. Hats off to the <a href="http://mercurial.selenic.com/">Mercurial</a> team (yes, Mercurial!) for finding the problem. Hats off to the <code>Git</code> team for making the announcement, and for delivering a fix so quickly.</p>

<h3>What‚Äôs the Problem?</h3>

<p>If your Git installation remains un-patched, then a malicious person could over-write the <code>.git/config</code> directory in one of your repositories. This would allow them to alter your Git history and make changes in the repo without your knowledge. <a href="http://article.gmane.org/gmane.linux.kernel/1853266">Details</a>.</p>

<p>The vulnerability exists on Mac OS X and Microsoft Windows. This article will discuss solving the problem on Mac OS X only, since that is my primary development platform.</p>

<!--more-->


<p>Mac and Windows users are exposed because their file systems are not case-sensitive by default. Linux users who use a case-sensitive file system are protected. But Linux users might want to apply the patch anyway because (as stated by the Git core team):</p>

<blockquote><p>Even though the issue may not affect Linux users, if you are a hosting service whose users may fetch from your service to Windows or Mac OS X machines, you are strongly encouraged to update to protect such users who use existing versions of Git.
~Git Core Team</p></blockquote>

<h3>Is My Machine Vulnerable?</h3>

<p>I know that my machine was vulnerable because I was running an un-patched version of Git, as seen below.</p>

<p>&#8220;` bash</p>

<p>~$ git &mdash;version
git version 2.1.3</p>

<p>~$</p>

<p>&#8220;`</p>

<h3>How to Upgrade</h3>

<p><a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a> makes it easy to install and maintain Git. First, update Homebrew&hellip;</p>

<p>&#8220;` bash</p>

<p>~$ brew update
Updated Homebrew from d243310d to a6ab9f13.
==> New Formulae
abi-compliance-checker        deis                     glbinding
asciinema             distribution                rbenv-bundle-exec
ctunnel                  game-music-emu           restund
==> Updated Formulae
abcm2ps                         jags
afl-fuzz                    jansson</p>

<p>&hellip;</p>

<p>~$</p>

<p>&#8220;`</p>

<p>Then, upgrade Git&hellip;</p>

<p>&#8220;` bash</p>

<p>~$ brew upgrade git
==> Upgrading 1 outdated package, with result:
git 2.2.1
==> Upgrading git
==> Downloading <a href="https://downloads.sf.net/project/machomebrew/Bottles/git-2.2.1.y">https://downloads.sf.net/project/machomebrew/Bottles/git-2.2.1.y</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring git-2.2.1.yosemite.bottle.tar.gz
==> Caveats
The OS X keychain credential helper has been installed to:
  /usr/local/bin/git-credential-osxkeychain</p>

<p>The &ldquo;contrib&rdquo; directory has been installed to:
  /usr/local/share/git-core/contrib</p>

<p>Bash completion has been installed to:
  /usr/local/etc/bash_completion.d</p>

<p>zsh completion has been installed to:
  /usr/local/share/zsh/site-functions
==> Summary</p>

<pre><code>/usr/local/Cellar/git/2.2.1: 1356 files, 31M
</code></pre>

<p>~$</p>

<p>&#8220;`</p>

<p>&hellip; and finally, verify that the patched version is in use.</p>

<p>&#8220;` bash</p>

<p>~$ git &mdash;version
git version 2.2.1</p>

<p>~$</p>

<p>&#8220;`</p>

<h3>Avoid Conflicts With Apple&rsquo;s Git</h3>

<p>As <a href="https://twitter.com/kcocev">Kristjan Cocev</a> notes in the comments below, Mac OS X comes with its own Git installation. By the time you bought the machine, that pre-installed version is probably out of date. My pre-installed Git was:</p>

<p>&#8220;` bash</p>

<p>~$ /usr/bin/git &mdash;version
git version 1.9.3 (Apple Git-50)</p>

<p>~$</p>

<p>&#8220;`</p>

<p>Apple&rsquo;s pre-installed Git isn&rsquo;t bad, but here&rsquo;s the problem. Depending on how your <code>PATH</code> variable is setup, there might be a conflict between Apple-installed Git and the one you installed via Homebrew.</p>

<p>Here are two alternatives for fixing the conflict before it causes problems.</p>

<ol>
<li>Change your <code>PATH</code> variable so that Homebrew-installed Git is executed long before Apple-installed Git gets reached, OR&hellip;</li>
<li>Rename Apple-installed Git as follows:</li>
</ol>


<p>&#8220;` bash</p>

<p>~$ sudo mv /usr/bin/git /usr/bin/git-apple
Password:</p>

<p>~$</p>

<p>&#8220;`</p>

<p>So now, if you want to use Apple&rsquo;s pre-installed Git (unlikely) you can simply navigate to <code>/usr/bin/git-apple</code>.</p>

<h3>Open Source Rocks</h3>

<p>Again, hats off to everyone in the open source community who pulled together to make this fix happen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Dotfiles]]></title>
    <link href="http://RayHightower.com/blog/2014/04/15/managing-dotfiles/"/>
    <updated>2014-04-15T17:13:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/15/managing-dotfiles</id>
    <content type="html"><![CDATA[<p>Dotfiles, the configuration files used by Unix-like machines, can become disorganized over time. Entropy rules! This article describes my recent attempt to bring order to dotfile chaos. The steps can be summarized as follows:</p>

<ul>
<li>Move the non-private dotfiles (dotfiles that will be viewed by others on Github) into a directory called <code>~/.dotfiles</code>.</li>
<li>From the <code>home</code> directory, create a symbolic link to each dotfile in the <code>~/.dotfiles</code> directory.</li>
<li>Use Git to manage the <code>~/.dotfiles</code> directory, and share it on GitHub.</li>
</ul>


<p>Dotfiles are normally hidden when you try to view them in the Mac OS X Finder. To view them from the command prompt, use <code>$ ls -al</code>.</p>

<!--more-->


<p>&#8220;` bash
~/.dotfiles[master]$ ls -al
total 40
drwxr-xr-x   8 rth  staff   272 Apr 14 01:44 .
drwxr-xr-x+ 71 rth  staff  2414 Apr 14 02:12 ..
-rwxr-xr-x   1 rth  staff  3455 Apr 13 16:01 .bash_profile
drwxr-xr-x  14 rth  staff   476 Apr 14 02:25 .git
-rw-r&mdash;r&mdash;   1 rth  staff  1649 Apr 13 16:44 .gitk
-rw-r&mdash;r&mdash;   1 rth  staff  1760 Apr 13 16:10 .irbrc
-rw-r&mdash;r&mdash;   1 rth  staff   118 Aug 22  2013 .zprofile
-rw-r&mdash;r&mdash;   1 rth  staff   375 Apr 14 01:44 README.mdown</p>

<p>~/.dotfiles[master]$
&#8220;`</p>

<p>The <a href="https://github.com/RayHightower/.dotfiles/blob/master/.bash_profile">.bash_profile</a> in this example has grown to include aliases, path specifications, and a script that shows the current Git branch as part of the command prompt. The file also contains two aliases useful for showing or hiding dotfiles in the Finder: <code>showdots</code> and <code>hidedots</code>.</p>

<h3>Putting Dotfiles in One Directory</h3>

<p>Dotfiles are normally created in the user&rsquo;s home directory. For organization purposes, I moved my non-private dotfiles into a directory called <code>.dotfiles</code>, listed above. Unix makes this easy. First, move to the home directory and create <code>~/.dotfiles</code>.</p>

<p>&#8220;` bash
~$ cd ~</p>

<p>~$ mkdir .dotfiles</p>

<p>~$</p>

<p>&#8220;`</p>

<p><em>Note: Dotfiles can sometimes include private information. If you don&rsquo;t want to share information in a particular dotfile, don&rsquo;t put it on GitHub!</em></p>

<p>In this example, we&rsquo;ll only move one file, <code>.bash_profile</code>.</p>

<p>&#8220;` bash</p>

<p>~$ cd .dotfiles/</p>

<p>$ mv ../.bash_profile .</p>

<p>$</p>

<p>&#8220;`</p>

<h3>Symbolic Links</h3>

<p>Symbolic links ensure that executables can find our dotfiles as needed.</p>

<p>&#8220;` bash</p>

<p>$ cd ~</p>

<p>$ ln -s ~/.dotfiles/.bash_profile</p>

<p>$ ls -al
total 8
drwxr-xr-x   3 rth  staff   102 Apr 14 19:48 .
drwxr-xr-x+ 73 rth  staff  2482 Apr 14 19:47 ..
lrwxr-xr-x   1 rth  staff    34 Apr 14 19:48 .bash_profile &ndash;> /Users/rth/.dotfiles/.bash_profile</p>

<p>$</p>

<p>&#8220;`</p>

<p>In the above example, we created a symbolic link called <code>.bash_profile</code> to the real <code>~/.dotfiles/.bash_profile</code> located in the <code>.dotfiles</code> directory. That way, any program that&rsquo;s looking for the <code>.bash_profile</code> file in the home directory will find what it needs, even though the file is somewhere else.</p>

<h3>Why Use Git to Manage Dotfiles?</h3>

<p>Git is a great tool for managing files that change over time. Dotfiles can change as we install new software or tweak our development environment. If we make a mistake, or if an installation script makes a mistake, we can use Git to roll back in history to a pre-mistake version of the dotfile.</p>

<h3>Don&rsquo;t Make All Dotfiles Public</h3>

<p>There are some dotfiles that you don&rsquo;t want to share publicly. For example, <code>.bash_history</code> contains all of the commands that have been executed in the shell. Do you really want the world that you sometimes <code>$ ssh myuserid@[embarassingdomainname].com</code>? Probably not. If you think that a dotfile might contain personal or confidential information, no need to broadcast it.</p>

<h3>Learning More About Dotfiles</h3>

<p>Most of my dotfiles, like <code>.bash_profile</code>, don&rsquo;t contain anything private. In fact, most of what I know about dotfiles has come from other developers via books, user groups, blogs, and spelunking through GitHub. Dotfile collections by <a href="https://github.com/hashrocket/dotmatrix">Hashrocket</a> and <a href="https://github.com/thoughtbot/dotfiles">Thoughtbot</a> are  especially good. My <code>~/.dotfiles</code> directory is available for public viewing on <a href="https://github.com/RayHightower/.dotfiles">GitHub</a>.</p>

<p>If you&rsquo;re doing something especially cool with your dotfiles, let&rsquo;s hear about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How .gitignore Works]]></title>
    <link href="http://RayHightower.com/blog/2014/03/25/how-gitignore-works/"/>
    <updated>2014-03-25T18:20:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/03/25/how-gitignore-works</id>
    <content type="html"><![CDATA[<p>Earlier today I ran into a Git issue within a RubyMotion project. I added a directory to the project&rsquo;s <code>.gitignore</code> file, but Git seemed to ignore my ignore. Expressed more clearly, Git continued to track a directory that I explicitly told it to ignore.</p>

<p>What?</p>

<p>Either there was a bug in Git, or my understanding of <code>.gitignore</code> was incomplete. It was time for me to dig in and learn more about <code>.gitignore</code>.</p>

<!--more-->


<h3>What I Learned About .gitignore</h3>

<p>The root cause of my problem: Once Git has begun tracking a file or directory, adding it to <code>.gitignore</code> changes nothing. Git will continue to track the file unless we explicitly tell Git to stop tracking the file.</p>

<p>&#8220;` bash</p>

<p>$ git rm &mdash;cached [filename]</p>

<p>$</p>

<p>&#8220;`</p>

<p>Or, if you want to stop tracking an entire directory (like me in this case)&hellip;</p>

<p>&#8220;` bash</p>

<p>$ git rm -r &mdash;cached [directoryname]</p>

<p>$</p>

<p>&#8220;`</p>

<p>The <code>-r</code> flag will tell Git to stop tracking all of the sub-directories and files within <code>directoryname</code>, recursively.</p>

<p>Git was behaving exactly as designed.</p>

<h3>Penalty</h3>

<p>I should have known this a long time ago. My penalty: A public admission :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
