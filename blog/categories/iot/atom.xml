<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IoT | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/iot/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-09-15T11:49:20-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage That OpenROV Tether, Or Else]]></title>
    <link href="http://RayHightower.com/blog/2014/09/10/manage-that-openrov-tether/"/>
    <updated>2014-09-10T18:40:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/09/10/manage-that-openrov-tether</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov_tether_management_slip_ring.jpg' width='' height='' alt='Tether management, one way that works.' title='Tether management, one way that works.'><span class='caption-text'>Tether management, one way that works.</span></span>
<em>Note: This article has been updated with more photos and details describing slip ring installation.</em></p>

<p>Youthful exuberance drove me to pilot my <a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a> before I built a good tether management system. Bad idea! It&rsquo;s better to have a tether management plan (any plan) before you pilot your OpenROV.</p>

<p>This article describes a tether management system that works for me. Other OpenROVers have devices that work, too. Take a look at a few and eventually you will find one that fits you.</p>

<h3>Off-the-Shelf Parts</h3>

<p>This tether management system is constructed entirely from off-the-shelf parts. The main component is an <a href="http://www.homedepot.com/p/KAB-Enterprise-Co-Ltd-20-ft-16-3-Cord-Reel-with-4-Outlets-CR002/100661463">extension cord reel sold by Home Depot</a> for about $14.00. Buy it, gut it, add the slip ring using three screws (also from Home Depot) and you’re good to go.</p>

<!--more-->


<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_lake_michigan.png' width='' height='' alt='Exploring Lake Michigan with OpenROV.' title='Exploring Lake Michigan with OpenROV.'><span class='caption-text'>Exploring Lake Michigan with OpenROV.</span></span></p>

<h3>Slip Ring</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/adafruit_slip_ring.jpg' width='' height='' alt='Adafruit slip ring.' title='Adafruit slip ring.'><span class='caption-text'>Adafruit slip ring.</span></span>
The slip ring is central to this solution. A slip ring allows an electrical spool to spin while electrical contacts remain intact. This slip ring was purchased from <a href="https://www.adafruit.com/products/736?gclid=CJDMiPma1cACFQoEaQod1iwAFQ">Adafruit</a> for about $18.00.</p>

<h3>How to Install the Slip Ring</h3>

<p>First, pull the entire orange cable out of the extension cord reel. It would be great to keep the whole orange cable as part of the tether, but then we wouldn’t have room for the original tether (twisted pair). Cut the orange cable so that only one meter remains attached to the reel assembly.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/openrov_tether_management_internals.jpg' width='' height='' alt='Front view, back view, internal view.' title='Front view, back view, internal view.'><span class='caption-text'>Front view, back view, internal view.</span></span></p>

<p>Next, take the extension cord reel apart. Two phillips-head screws hold the device together. Remove the two screws, and the two orange disks will fall apart.</p>

<p>Now let’s focus on the disk without the electrical plugs. You will need to cut a hole in the exact center of this disk. The hole will need to be large enough to let the thicker part of the slip ring through, while allowing enough of an edge for the flange screws. The photos give a clearer picture than the words in this paragraph.</p>

<p>After you insert the slip ring, drill holes for the three slip ring mounting screws. One way to do this: Drill one hole first, insert the screw, tighten the nut, and then measure/drill the remaining holes. You’re more likely to align all of the holes correctly this way.</p>

<h3>Loctite Threadlocker</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/slip_ring_loctite.jpg' width='' height='' alt='Loctite oozing from the screws.' title='Loctite oozing from the screws.'><span class='caption-text'>Loctite oozing from the screws.</span></span>
<a href="http://www.loctiteproducts.com/threadlockers.shtml">Loctite</a> makes a threadlocker, a gummy substance that keeps screws from jiggling loose. They also make super glue; that&rsquo;s not what you want for this project. If you use Loctite&rsquo;s threadlocker on the slip ring screws, they will remain tight until you remove them on purpose.</p>

<h3>Connecting Inside the Reel</h3>

<p>Take a look inside the reel. You’ll see black, green, and white cables inside. You won’t need to do anything with the black cable. Splice the green line from the slip ring to the green line inside the reel, and splice the white slip ring line with the white reel line. Your technique may vary, but I used a combination hook splice, solder, hot glue, and heat shrink tubing. If you wear a belt and suspenders your pants will never fall down!</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/openrov_extra_tab.jpg' width='' height='' alt='Extra tab inside the reel, before and after removal.' title='Extra tab inside the reel, before and after removal.'><span class='caption-text'>Extra tab inside the reel, before and after removal.</span></span></p>

<h3>Gotcha: Removing the Extra Tab</h3>

<p>After initial assembly, I noticed that there was an extra tab inside of the reel. I don’t know the original purpose for the tab, but since it appeared to interfere with tether operation, it had to go. Wire clippers and a dremel tool made quick work of the tab. The before &amp; after photos tell the story.</p>

<h3>Attaching the Tether &amp; Topside Adapter</h3>

<p>Now that you have a functioning reel with a slip ring, attach the twisted pair tether to the 1-meter orange extension cable. Hook splice, solder, hot glue, and heat shrink did the trick for me.</p>

<p>The topside adapter can be attached to the top of the reel with Velcro, as shown in the photos throughout this article. Plug the green and white cables from the outer slip ring into the topside adapter, and you&rsquo;re ready to test the new tether management system.</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/nanuk_935_openrov.jpg' width='' height='' alt='Nanuk 935 with OpenROV.' title='Nanuk 935 with OpenROV.'><span class='caption-text'>Nanuk 935 with OpenROV.</span></span>
What should we do with the slip ring&rsquo;s extra lines? I tied mine together for future use. I may cut them if I decide that they&rsquo;re not useful. If you have other ideas, feel free to post in the comments below.</p>

<h3>Everything Fits</h3>

<p>The new tether management system is small enough to share space with an OpenROV inside a <a href="http://nanukcase.com/productdetails.asp?node=205">Nanuk 935 case</a>. The Nanuk case has wheels, a foam interior, and it is rugged and small enough to fly as an airline carry-on.</p>

<p>Whip everything out and you&rsquo;re ready to explore.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_tether_management_laptop.jpg' width='' height='' alt='Ready to explore Lake Michigan.' title='Ready to explore Lake Michigan.'><span class='caption-text'>Ready to explore Lake Michigan.</span></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenROV Meets Chicago's Lake Michigan]]></title>
    <link href="http://RayHightower.com/blog/2014/08/22/openrov-meets-chicago-lake-michigan/"/>
    <updated>2014-08-22T19:27:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/22/openrov-meets-chicago-lake-michigan</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_chicago_lake_michigan.jpg' width='' height='' alt='OpenROV meets  Lake Michigan.' title='OpenROV meets  Lake Michigan.'><span class='caption-text'>OpenROV meets  Lake Michigan.</span></span>
<a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a> #1227 went for a spin in Lake Michigan this week. Success! Here are a few first-voyage observations:</p>

<!--more-->


<ul>
<li>The electronics chassis is truly waterproof. Same for the battery compartments. Waterproofing was my biggest concern during assembly. Hats off to the OpenROV team for an excellent set of assembly instructions.</li>
<li>Condensation builds up in the electronics chassis during operation. A quick review of the OpenROV forum tells me that I should add a desiccant bag to the compartment. Or pack the unit in low humidity.</li>
<li>The OpenROV is a little back-heavy. The back dips lower than the front during operation. I should add some weights to the front of the unit.</li>
<li><a href="/blog/2014/09/10/manage-that-openrov-tether/">Tether management is a <em>must</em></a>. After one voyage (can you really call a
simple dip in the lake a voyage?) my OpenROV tether is a mess. Time to
build a way to manage the tether.</li>
</ul>


<p>What an exciting way to explore Node.js, BeagleBone Black, and the Maker Movement all at once.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenROV Assembly Challenges]]></title>
    <link href="http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges/"/>
    <updated>2014-08-19T16:44:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov_rth.jpg' width='' height='' alt='OpenROV fully assembled.' title='OpenROV fully assembled.'><span class='caption-text'>OpenROV fully assembled.</span></span>
I know this problem can be solved. I just haven’t figured it out yet, and I need help from the <a href="http://openrov.com/">OpenROV</a> community to do so.</p>

<p><em>Update: The OpenROV community delivered. Solution: <a href="/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>

<h3>Parts That Work</h3>

<p>Software image updates on the Beaglebone Black work flawlessly thanks to scripts written by <a href="https://github.com/BrianAdams">Brian Adams</a> and <a href="https://github.com/codewithpassion">Dominick Fretz</a>. The cockpit software shows a real-time image from the camera, the LED lights are super-bright, and the lasers hold steady at 10cm apart. My fully assembled OpenROV passes the water submersion test. Yes, it’s waterproof, thanks to O-rings and silicon-based lubricant!</p>

<p>What about the motors? The motors work, almost. Could it be the
electronic speed control (ESC) settings, calibration, or less than
perfect soldering? That&rsquo;s where I need help.</p>

<!--more-->


<h3>Summary of Symptoms</h3>

<p>With the cockpit software running and attached to the OpenROV:</p>

<ul>
<li>If I turn on any of the three ESCs, two of the motors (vertical and port) start running at full blast. The starboard motor remains stationary.</li>
<li>While the V and P motors continue to run at full blast, the starboard motor responds to the cockpit slider controls as expected: +1 makes S run full blast on one direction, -1 sends S full blast in the other direction, and 0 stops the S motor completely. During this exercise, V and P continue at full blast.</li>
<li>Turning off the ESC stops the V and P motors.</li>
<li>When I turn on any of the ESCs, the camera servo jumps slightly, about 10 degrees. And then the V and P motors run full blast.</li>
</ul>


<p>When the cockpit software is not running (and the Google Chrome browser is completely closed):</p>

<ul>
<li>Turning on an ESC has no effect on the motors.</li>
<li>The camera servo jumps slightly, about 10 degrees, as it did with the cockpit software running. But the motors remain stationary.</li>
</ul>


<p>Interesting behavior!</p>

<h3>Double-Checking the ESC Settings</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/esc_program_card.jpg' width='' height='' alt='ESC Program Card' title='ESC Program Card'><span class='caption-text'>ESC Program Card</span></span>
During troubleshooting, my first step was to double-check the electronic speed controller (ESC) settings. Setting the ESCs with the beep-and-button-push method was time consuming. And I was concerned that I may have made a mistake in counting the beeps.</p>

<p>Solution: I bought an ESC program card. Amazon sells them for less than fifteen dollars, well worth the price when you consider the peace of mind that the card brings. The program card shows each ESC setting with a clear 7-segment LED display, much easier than counting beeps!</p>

<p>According to the program card, all of the ESC settings are correct.</p>

<h3>Using a Power Supply Instead of Batteries</h3>

<p>All of the time spent troubleshooting drained the OpenROV batteries. So I devised a way to apply power directly to the OpenROV without batteries.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_power_supply.jpg' width='' height='' alt='Directly connected to power supply.' title='Directly connected to power supply.'><span class='caption-text'>Directly connected to power supply.</span></span></p>

<p>The photo reveals the random condition of my work surface, so here&rsquo;s a verbal description of this hack:</p>

<ul>
<li>In the background, a power supply set to 12 volts</li>
<li><code>+</code> lead (red) connected to the <code>+</code> leads of the battery containers, via a wire acting as a Y-connector.</li>
<li><code>-</code> lead (black) connected to a ground terminal on the OpenROV controller board through a black jumper cable</li>
</ul>


<p>I find that this hack works best if I connect the 12 volt setup first while the Topside Adapter is powered off. Applying power (via USB) to the Topside Adapter turns the entire assembly on.</p>

<p>If you&rsquo;re reading this section and you know a better way for me to connect the power supply, please advise in the comments section below.</p>

<h3>Advice Welcome</h3>

<p>I&rsquo;m not sure where to look next to solve the challenge with the motors. Maybe I skipped a step somewhere during assembly? Advice welcome!</p>

<p><em>Update: As noted at the beginning of this article, this problem has been solved. Solution: <a href="/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallella Quick Start Guide (with gotchas)]]></title>
    <link href="http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/"/>
    <updated>2014-07-07T13:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='/images/parallella_screenshot.png' width='' height='' alt='Parallella screenshot, 1080p.' title='Parallella screenshot, 1080p.'><span class='caption-text'>Parallella screenshot, 1080p.</span></span>
Parallella is a single-board supercomputer smaller than a deck of cards. While today’s fastest laptops contain four processor cores, Parallella has <em>eighteen</em> (2 <a href="http://arm.com/">ARM</a> cores plus an <a href="http://www.adapteva.com/epiphanyiii/">Epiphany</a> chip with 16 <a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computing">RISC</a> cores). The maker of Parallella, <a href="http://adapteva.com">Adapteva</a>, is on a mission to democratize parallel computing. The company&rsquo;s tag line is <em>Supercomputing for Everyone</em>.</p>

<!--more-->


<p>Everything in this post is based on the <a href="http://www.parallella.org/quick-start/">official quick start guide created by the Parallella team</a>. These instructions are tailored for a Mac running OS X Mavericks (10.9.3) and a Parallella-16 equipped with the Zynq 7010 chip. I ran into some <em>gotchas</em> during my first Parallella experience. The snags (and solutions) are documented here.</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella.jpg' width='' height='' alt='Parallella. Tiny and powerful.' title='Parallella. Tiny and powerful.'><span class='caption-text'>Parallella. Tiny and powerful.</span></span></p>

<h3>Tools Required</h3>

<p>You will need the following items in order to burn an SD card for your
Parallella:</p>

<ul>
<li>Micro-SD card, 16GB or greater.</li>
<li>Desktop or laptop computer with a micro-SD card reader, or an SD-card reader with a micro adapter. These instructions are tailored for a Mac. A Linux or Windows machine will work with minor modifications in the procedure.</li>
<li>High-speed internet connection, for downloading Parallella&rsquo;s Ubuntu
image and related files.</li>
<li>Micro-USB-to-USB adapter, for the keyboard and mouse. Parallella is equipped with two micro-USB ports.</li>
<li>Micro-HDMI to HDMI cable or adapter.</li>
<li>Parallella (of course!)</li>
</ul>


<p>Adapteva sells an accessories kit containing an SD card, power adapter, micro-HDMI to HDMI cable, and USB-to-micro-USB adapter. Unless you already have these items, buying the kit may save you time.</p>

<h3>These Steps Could Break Your Primary Machine</h3>

<p>Since you&rsquo;re experimenting with Parallella, we can assume that you are an advanced user. Your computer is already backed up, or you&rsquo;re running these steps on a test machine. And you know <a href="/sudo-disclaimer/">the power and pitfalls of sudo</a>. Technology evolves rapidly, and everything you read here could change by the time you read it.</p>

<h3>Comparison with Raspberry Pi or Beaglebone Black</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella_fan.jpg' width='' height='' alt='Bits get hot. Use a fan.' title='Bits get hot. Use a fan.'><span class='caption-text'>Bits get hot. Use a fan.</span></span>
How does the Parallella compare with other single-board computers, like the <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> or <a href="/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>? The first difference noticed at boot-time: Parallella runs hot! So hot, in fact, that the unit comes with a heat sink and the recommendation to add a fan. I’ve never needed a fan with a Pi or a ‘Bone.</p>

<p>Of course, the Parallella runs hotter because it has more processing power packed tightly together in limited space. Since Parallella is designed to run tasks in parallel, we can expect certain programs to perform faster than they would on the Pi or &lsquo;Bone. Future posts will explore Parallella&rsquo;s performance using languages designed for concurrency, languages like <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Go</a> and <a href="/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a>. Now, let’s get started with Parallella.</p>

<h3>Getting the Parallella OS</h3>

<p>Parallella runs a customized version of Ubuntu installed on a micro-SD card. Burning the SD card takes a long time, so it makes sense to start that process first.</p>

<p>Download the files that you will need to burn onto the SD card. I&rsquo;m running Mac OS X on my primary machine, and I&rsquo;m configuring a Parallella-16 with a Zynq 7010 and an HDMI display. Therefore, the files needed for this configuration are:</p>

<ul>
<li><a href="http://downloads.parallella.org/ubuntu/dists/trusty/image/ubuntu-14.04-140611.img.gz">Ubuntu 14.04 for Parallella</a> (released June 11, 2014)</li>
<li><a href="http://downloads.parallella.org/boot/linux/kernel-hdmi-default.tgz">Linux kernel with HDMI support</a></li>
<li><a href="https://github.com/parallella/parallella-hw/blob/master/fpga/bitstreams/parallella_e16_hdmi_gpiose_7010.bit.bin?raw=true">Parallella-16 Zynq 7010 with HDMI display</a></li>
</ul>


<p>Unzip the files and place them in a directory that&rsquo;s handy. You&rsquo;ll need them for the next step. With Mac OS X, you can unzip the files by double-clicking them in <code>Finder</code>.</p>

<p>Note: You might need different files depending on the current date (Parallella software is in a rapid state of flux) and your exact equipment. If your configuration is different, you can make the adjustments described in Parallella&rsquo;s official guide.</p>

<h3>Burn the SD Card</h3>

<p>Insert your SD card into your Mac&rsquo;s SD card reader, and use the Mac OS X <code>diskutil list</code> command to determine the designation of the SD card. If you use portable hard drives with your primary machine, the SD card designation could change from time to time, so it&rsquo;s important to perform this step each time you burn a card.</p>

<p>```bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                       </em>15.9 GB     disk1
   1:               Windows_NTFS Untitled 1             15.9 GB     disk1s1</p>

<p>$
```</p>

<p>From this <code>diskutil</code> report, we can see that we want to burn the SD image to <code>/dev/disk1</code>. The other device is the hard drive for my primary machine. Burning the wrong device means destroying data.</p>

<p>To burn the SD card&hellip;</p>

<ol>
<li>Change into the directory where you downloaded the Ubuntu image.</li>
<li>Unmount the destination partition on the SD card.</li>
<li>Use the the <code>dd</code> command to copy the Ubuntu image to the SD card.</li>
</ol>


<p>To execute the above steps as <code>bash</code> commands, do the following:</p>

<p>```bash
$ cd [directory containing the ubuntu image file]</p>

<p>$ diskutil unmountDisk /dev/disk1</p>

<p>$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
```</p>

<p>The <code>dd</code> command takes a <em>long</em> time to run, over 56 minutes on my machine. Here&rsquo;s a quick run-through of the command options:</p>

<ul>
<li><code>sudo</code> gives you <a href="/sudo-disclaimer/">super powers</a>.</li>
<li><code>dd</code> is the &ldquo;copy and convert&rdquo; command. The letters &ldquo;dd&rdquo; have nothing to do with what the tool actually does. It&rsquo;s just a command name. And like so many things in computer science, the name might be based on a pun.</li>
<li><code>if=</code> specifies the input file. You can include the full path, or if the file is in your current directory, you can omit the path as shown in this example.</li>
<li><code>of=</code> specifies the output file. We know that the SD card is located at <code>/dev/disk</code> so that&rsquo;s where the results of this command are headed.  Note that your destination directory may differ from this one.</li>
<li><code>bs=</code> specifies the block size used for the destination file.</li>
</ul>


<h3>About Block Size</h3>

<p>The Mac section of the official Parallella guide recommends a block size of size of 1 megabyte, while the Linux instructions recommend 64 kilobytes (the option <code>bs=64k</code> in the <code>dd</code> command). I initially used <code>bs=1m</code> on my Mac, and I ran into problems. When I used <code>bs=64k</code>, everything worked fine. Note that I eventually traced my problem to something other than block size (details below) but since the 64k setting still works, I&rsquo;ve left it intact. If I find out why Linux and OS X are using different block sizes, I&rsquo;ll post the information here.</p>

<h3>Checking dd Progress</h3>

<p><span class='caption-wrapper center'><img class='caption' src='/images/dd_progress.png' width='' height='' alt='Activity Monitor' title='Activity Monitor'><span class='caption-text'>Activity Monitor</span></span>
Waiting an hour for the <code>dd</code> command to run can be disconcerting because the machine does not give any feedback on progress. No gas gauge, spinning indicator, nothing. How do we know if the write process is working?</p>

<p>Here&rsquo;s how to check progress. Run Apple&rsquo;s <code>Activity Monitor</code>, and look for <code>dd</code> on the list of processes, as shown in the Activity Monitor screenshot. The number of bytes written will increase slowly while <code>dd</code> burns the Ubuntu image onto the SD card. With the current version of Ubuntu, roughly 7.4GB will be written to the SD. At completion, <code>dd</code> will disappear from the Activity Monitor list and you&rsquo;ll see the following at the command line.</p>

<p>```bash
$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
121280+0 records in
121280+0 records out
7948206080 bytes transferred in 3363.824531 secs (2362848 bytes/sec)</p>

<p>$</p>

<p>```</p>

<p>As you can see from the report, it took 3363.824531 seconds (just over 56 minutes) for <code>dd</code> to burn the Ubuntu image onto the SD card. That&rsquo;s a long time to wait with zero feedback. Activity Monitor will tell you what&rsquo;s going on.</p>

<h3>Confirm Partitions</h3>

<p>To confirm that the partitions have been created and that Ubuntu has been written to the SD card, use <code>diskutil list</code> again.</p>

<p>```bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        </em>15.9 GB    disk1
   1:                 DOS_FAT_32 BOOT                    134.2 MB   disk1s1
   2:                      Linux                         7.3 GB     disk1s2</p>

<p>$
```</p>

<p>As expected, <code>/dev/disk0</code> remains unchanged. We want it that way because that&rsquo;s where our primary machine&rsquo;s operating system resides. <code>/dev/disk1</code> (your actual SD card designation may be different) is the target disk we&rsquo;re after. Two new partitions are on the SD card, a FAT32 partition named <code>BOOT</code> and a Linux partition.</p>

<p>Next we need to copy some supporting files to the new <code>BOOT</code> partition.</p>

<h3>Copying Additional Files to the SD Card</h3>

<p>Now that Ubuntu resides on the SD card, it&rsquo;s time to add the files that support HDMI video and the FPGAs. Here&rsquo;s how.</p>

<p>The additional files will need to be copied to <code>/BOOT</code> on the SD card. While it might make sense to reach the <code>BOOT</code> partition as <code>/dev/disk1</code>, you will actually reach it via <code>/Volumes/BOOT</code>.</p>

<p>We target <code>/dev/disk1</code> when burning the Ubuntu image, but to copy the supporting files we target <code>/Volumes/BOOT</code>. Both designations point to the same place, the SD card. Why the name switch?</p>

<p>I don&rsquo;t know why two different designations are used for the same SD card. I only know that it works. You can expect to see an update posted here if I find an explanation. Or if you have an answer, feel free to post in the comments below.</p>

<p>Before we copy over the files, let&rsquo;s see what&rsquo;s on the <code>BOOT</code> partition on the SD card.</p>

<p>```bash
~$ cd /Volumes/BOOT/</p>

<p>/Volumes/BOOT$ ls -al
total 12
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .
drwxrwxrwt@ 4 root  admin   136 Jul  5 23:44 ..
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .Trashes
-rwxrwxrwx  1 rth   staff  4096 Jul  5 23:44 ._.Trashes
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .fseventsd</p>

<p>/Volumes/BOOT$
```</p>

<h3>Gotcha #1: The FPGA Bitstream File</h3>

<p>First, change into the directory where you stored the additional Parallella files, and copy the FPGA bitstream file to <code>/Volumes/BOOT</code>.</p>

<p>```bash</p>

<p>$ cp parallella_e16_hdmi_gpiose_7010.bit.bin /Volumes/BOOT/</p>

<p>$ cd /Volumes/BOOT/</p>

<p>$ mv parallella_e16_hdmi_gpiose_7010.bit.bin parallella.bit.bin</p>

<p>$</p>

<p><code>``
First gotcha: I made the mistake of simply copying the</code>parallella_e16_hdmi_gpiose_7010.bit.bin<code>file without renaming it to</code>parallella.bit.bin<code>. Parallella will only boot when it sees a file with this filename on the SD card's</code>BOOT<code>partition. The original file name will probably change as the software gets updated. With each change, we will need to make sure that the file is renamed</code>parallella.bit.bin` on the Parallella.</p>

<p>Obvious in hindsight, but it took me awhile to track that one down!</p>

<h3>Copy the Last Two Files</h3>

<p>Two files were decompressed from <code>kernel-hdmi-default.tgz</code>: <code>devicetree.dtb</code> and <code>uImage</code>. Change into the directory where the files were decompressed, and copy them to <code>/Volumes/BOOT</code>.</p>

<p>```bash
$ cp devicetree.dtb /Volumes/BOOT/</p>

<p>$ cp uImage /Volumes/BOOT/</p>

<p>$
```</p>

<p>Here’s what the BOOT partition should look like when you’re done..</p>

<p>```bash
/Volumes/BOOT$ ls -al
total 12853
drwxrwxrwx@ 1 rth   staff     1024 Jul  6 12:14 .
drwxrwxrwt@ 4 root  admin      136 Jul  6 12:11 ..
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff      512 Jul  6 12:11 .Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:11 .<em>.Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>devicetree.dtb
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:14 .<em>parallella.bit.bin
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>uImage
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .fseventsd
-rwxrwxrwx@ 1 rth   staff     8607 Jul  6 12:13 devicetree.dtb
-rwxrwxrwx@ 1 rth   staff  2083744 Jul  6 12:14 parallella.bit.bin
-rwxrwxrwx@ 1 rth   staff  4468792 Jul  6 12:13 uImage</p>

<p>/Volumes/BOOT$
```</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/eject_boot.png' width='' height='' alt='Eject the SD card.' title='Eject the SD card.'><span class='caption-text'>Eject the SD card.</span></span></p>

<h3>Eject the SD Card, Insert in Parallella</h3>

<p>Now you&rsquo;re ready to eject the SD card from the Mac and insert it in the Parallella. Plug in the HDMI cable, keyboard, mouse, and Ethernet connection. Power up the Parallella, and welcome to the next <em>gotcha</em>.</p>

<h3>Gotcha #2: Powered USB Required</h3>

<p>Parallella booted to a beautiful GUI, but the system would not respond to the keyboard or mouse. After swapping a few keyboard/mouse combinations, I finally tried a powered USB hub. The powered hub worked.</p>

<p>Through trial and error I learned that the Parallella can handle a single keyboard plugged into the micro-USB port. However, if two devices are plugged in via USB, a powered hub is required. A passive USB hub will not work. A combination keyboard, one with both a keyboard and a trackpad, will also need a powered USB hub.</p>

<h3>Default Login Credentials</h3>

<p>Default login credentials for Parallella are&hellip;</p>

<ul>
<li>username = linaro</li>
<li>password = linaro</li>
</ul>


<h3>SSH, Vim, Git, etc.</h3>

<p>You can SSH into the Parallella from the network&hellip;</p>

<p>```bash
~$ ssh <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x6c;&#x69;&#110;&#97;&#114;&#111;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#49;&#x2e;&#x31;&#x33;&#51;">&#x6c;&#105;&#x6e;&#97;&#114;&#111;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#x2e;&#49;&#49;&#46;&#x31;&#51;&#x33;</a>
<a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#x3a;&#108;&#x69;&#110;&#x61;&#x72;&#x6f;&#64;&#49;&#57;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#49;&#x31;&#x2e;&#49;&#51;&#x33;">&#x6c;&#105;&#110;&#97;&#114;&#x6f;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#x31;&#x31;&#46;&#x31;&#51;&#51;</a>&rsquo;s password:
Welcome to Linaro 14.04 (GNU/Linux 3.12.0-g0bc9c3a-dirty armv7l)</p>

<ul>
<li>Documentation:  <a href="https://wiki.linaro.org/">https://wiki.linaro.org/</a>
Last login: Sun Jul  6 17:34:17 2014 from wisdomgroup-mbp13
linaro-nano:~>
```</li>
</ul>


<p>&hellip; Vim is operational&hellip;</p>

<p><code>bash
linaro-nano:~&gt; which vim
/usr/bin/vim
linaro-nano:~&gt; vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan  2 2014 19:49:14)
linaro-nano:~&gt;
</code></p>

<p>&hellip; and Git works fine.</p>

<p><code>bash
linaro-nano:~&gt; which git
/usr/bin/git
linaro-nano:~&gt; git --version
git version 1.9.1
linaro-nano:~&gt;
</code></p>

<h3>Scrot for Screenshots</h3>

<p>If you want to take a screenshot of the Parallella display, use <code>scrot</code>.  It comes with the Ubuntu installation. Type <code>scrot</code> at the command line and hit enter. Five seconds later, the entire screen will be captured and stored in a file called <code>[time stamp]_1920x1080_scrot.png</code> in the current directory.</p>

<h3>Conclusion</h3>

<p>After waiting a year for Parallella to arrive, I&rsquo;m excited to have the device up and running. Future posts will explore the &ldquo;why?&rdquo; behind parallel computing. Thanks Adapteva for helping to democratize supercomputing. Awesome times are ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Prep for OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov/"/>
    <updated>2014-06-30T14:06:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/nodejs-white.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
<a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV is an underwater robot</a> controlled through a web browser. The server-side of the web app is written in Node.js, running on a <a href="/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">BeagleBone Black</a> inside the OpenROV.</p>

<p>You don&rsquo;t need to know Node.js in order to pilot an OpenROV. And you don&rsquo;t need to do anything in this article to construct an OpenROV from a kit. But if you’re the kind of maker who likes to dig deep into a project, you might enjoy exploring Node.js.</p>

<!--more-->


<h3>Mac OS X and Node.js</h3>

<p>Everything written here applies to Node.js as it runs on Mac OS X. If your local machine runs Linux or Windows, you will need to consult other resources in order to run Node locally.</p>

<h3>Homebrew First</h3>

<p>Make sure you’re running <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a> on your Mac. Homebrew is a seamless way to manage packages on Mac OS X. To install Homebrew&hellip;</p>

<p>```bash
$ ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install">https://raw.github.com/Homebrew/homebrew/go/install</a>)"install</p>

<p>```</p>

<p>After installation, confirm that Homebrew is running properly&hellip;</p>

<p>```bash
$ brew doctor</p>

<p>```</p>

<h3>Installing Node.js</h3>

<p>Now that Homebrew is installed and running, Node.js can be installed with a single line command.</p>

<p>```bash
$ brew install node</p>

<p>```</p>

<p>To confirm that Node.js is installed on your system and to check the version number&hellip;</p>

<p>```bash
$  which node
/usr/local/bin/node</p>

<p>$ node &mdash;version
v0.10.26</p>

<p>$
```</p>

<h3>Hello World in Node.js</h3>

<p>You know the compter science tradition: The first program in any new language has to say &ldquo;Hello World.&rdquo; Here&rsquo;s a sample <code>Hello World</code> program from the official <a href="http://nodejs.org">Node.js</a> web site, slightly modified to suit OpenROV.</p>

<p>First, create a file called <code>helloworld.js</code> and fill it with the following code.</p>

<p>```javascript
// Sample web server from <a href="http://nodejs.org,">http://nodejs.org,</a> slightly modified.</p>

<p>var http = require(&lsquo;http&rsquo;);
http.createServer(function (req, res) {
  res.writeHead(200, {&lsquo;Content-Type&rsquo;: &lsquo;text/plain&rsquo;});
  res.end(&lsquo;Hello World. OpenROV runs Node.js!&rsquo;);
}).listen(1337, &lsquo;127.0.0.1&rsquo;);
console.log(&lsquo;Server running at <a href="http://127.0.0.1:1337/">http://127.0.0.1:1337/</a>&rsquo;);
```</p>

<p>Next, from the same directory where you saved <code>helloworld.js</code>, run the file from the command line like so&hellip;</p>

<p>```bash
$ node helloworld.js
Server running at <a href="http://127.0.0.1:1337/">http://127.0.0.1:1337/</a></p>

<p>$
```</p>

<p>Finally, open up a web browser on your local machine and navigate to <code>http://127.0.0.1:1337</code>. You should see a bare-bones web page similar to this one.</p>

<p><span class='caption-wrapper center'><img class='caption' src='/images/openrov-runs-nodejs.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<p>Now that you have Node.js running locally, you&rsquo;re ready to explore the <a href="http://github.com/openrov">OpenROV repo on GitHub</a>.</p>

<h3>Next Steps</h3>

<p>Future blog posts about Node.js and OpenROV will consider questions like:</p>

<ul>
<li><p>What does Node.js do for OpenROV that other languages can’t do?</p></li>
<li><p>What other languages might we use to control OpenROV? It’s all open source, so our brainstorms could one day turn into actual code running on OpenROV!</p></li>
<li><p>How does Node.js on the BeagleBone Black interact with the Arduino and other OpenROV components?</p></li>
</ul>


<p>Keep exploring!</p>
]]></content>
  </entry>
  
</feed>
