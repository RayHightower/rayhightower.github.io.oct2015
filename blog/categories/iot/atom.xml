<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IoT | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/iot/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-07-22T00:00:46-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parallella Quick Start Guide (with gotchas)]]></title>
    <link href="http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/"/>
    <updated>2014-07-07T13:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='/images/parallella_screenshot.png' width='' height='' alt='Parallella screenshot, 1080p.' title='Parallella screenshot, 1080p.'><span class='caption-text'>Parallella screenshot, 1080p.</span></span>
Parallella is a single-board supercomputer smaller than a deck of cards. While today’s fastest laptops contain four processor cores, Parallella has <em>eighteen</em> (2 <a href="http://arm.com/">ARM</a> cores plus an <a href="http://www.adapteva.com/epiphanyiii/">Epiphany</a> chip with 16 <a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computing">RISC</a> cores). The maker of Parallella, <a href="http://adapteva.com">Adapteva</a>, is on a mission to democratize parallel computing. The company&rsquo;s tag line is <em>Supercomputing for Everyone</em>.</p>

<!--more-->


<p>Everything in this post is based on the <a href="http://www.parallella.org/quick-start/">official quick start guide created by the Parallella team</a>. These instructions are tailored for a Mac running OS X Mavericks (10.9.3) and a Parallella-16 equipped with the Zynq 7010 chip. I ran into some <em>gotchas</em> during my first Parallella experience. The snags (and solutions) are documented here.</p>

<h3>Tools Required</h3>

<p>You will need the following items in order to burn an SD card for your
Parallella:</p>

<ul>
<li>Micro-SD card, 16GB or greater.</li>
<li>Desktop or laptop computer with a micro-SD card reader, or an SD-card reader with a micro adapter. These instructions are tailored for a Mac. A Linux or Windows machine will work with minor modifications in the procedure.</li>
<li>High-speed internet connection, for downloading Parallella&rsquo;s Ubuntu
image and related files.</li>
<li>Micro-USB-to-USB adapter, for the keyboard and mouse. Parallella is equipped with two micro-USB ports.</li>
<li>Micro-HDMI to HDMI cable or adapter.</li>
<li>Parallella (of course!)</li>
</ul>


<p>Adapteva sells an accessories kit containing an SD card, power adapter, micro-HDMI to HDMI cable, and USB-to-micro-USB adapter. Unless you already have these items, buying the kit may save you time.</p>

<h3>These Steps Could Break Your Primary Machine</h3>

<p>Since you&rsquo;re experimenting with Parallella, we can assume that you are an advanced user. Your computer is already backed up, or you&rsquo;re running these steps on a test machine. And you know <a href="/sudo-disclaimer/">the power and pitfalls of sudo</a>. Technology evolves rapidly, and everything you read here could change by the time you read it.</p>

<h3>Comparison with Raspberry Pi or Beaglebone Black</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella_fan.jpg' width='' height='' alt='Bits get hot. Use a fan.' title='Bits get hot. Use a fan.'><span class='caption-text'>Bits get hot. Use a fan.</span></span>
How does the Parallella compare with other single-board computers, like the <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> or <a href="/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>? The first difference noticed at boot-time: Parallella runs hot! So hot, in fact, that the unit comes with a heat sink and the recommendation to add a fan. I’ve never needed a fan with a Pi or a ‘Bone.</p>

<p>Of course, the Parallella runs hotter because it has more processing power packed tightly together in limited space. Since Parallella is designed to run tasks in parallel, we can expect certain programs to perform faster than they would on the Pi or &lsquo;Bone. Future posts will explore Parallella&rsquo;s performance using languages designed for concurrency, languages like <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Go</a> and <a href="/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a>. Now, let’s get started with Parallella.</p>

<h3>Getting the Parallella OS</h3>

<p>Parallella runs a customized version of Ubuntu installed on a micro-SD card. Burning the SD card takes a long time, so it makes sense to start that process first.</p>

<p>Download the files that you will need to burn onto the SD card. I&rsquo;m running Mac OS X on my primary machine, and I&rsquo;m configuring a Parallella-16 with a Zynq 7010 and an HDMI display. Therefore, the files needed for this configuration are:</p>

<ul>
<li><a href="http://downloads.parallella.org/ubuntu/dists/trusty/image/ubuntu-14.04-140611.img.gz">Ubuntu 14.04 for Parallella</a> (released June 11, 2014)</li>
<li><a href="http://downloads.parallella.org/boot/linux/kernel-hdmi-default.tgz">Linux kernel with HDMI support</a></li>
<li><a href="https://github.com/parallella/parallella-hw/blob/master/fpga/bitstreams/parallella_e16_hdmi_gpiose_7010.bit.bin?raw=true">Parallella-16 Zynq 7010 with HDMI display</a></li>
</ul>


<p>Unzip the files and place them in a directory that&rsquo;s handy. You&rsquo;ll need them for the next step. With Mac OS X, you can unzip the files by double-clicking them in <code>Finder</code>.</p>

<p>Note: You might need different files depending on the current date (Parallella software is in a rapid state of flux) and your exact equipment. If your configuration is different, you can make the adjustments described in Parallella&rsquo;s official guide.</p>

<h3>Burn the SD Card</h3>

<p>Insert your SD card into your Mac&rsquo;s SD card reader, and use the Mac OS X <code>diskutil list</code> command to determine the designation of the SD card. If you use portable hard drives with your primary machine, the SD card designation could change from time to time, so it&rsquo;s important to perform this step each time you burn a card.</p>

<p>```bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                       </em>15.9 GB     disk1
   1:               Windows_NTFS Untitled 1             15.9 GB     disk1s1</p>

<p>$
```</p>

<p>From this <code>diskutil</code> report, we can see that we want to burn the SD image to <code>/dev/disk1</code>. The other device is the hard drive for my primary machine. Burning the wrong device means destroying data.</p>

<p>To burn the SD card&hellip;</p>

<ol>
<li>Change into the directory where you downloaded the Ubuntu image.</li>
<li>Unmount the destination partition on the SD card.</li>
<li>Use the the <code>dd</code> command to copy the Ubuntu image to the SD card.</li>
</ol>


<p>To execute the above steps as <code>bash</code> commands, do the following:</p>

<p>```bash
$ cd [directory containing the ubuntu image file]</p>

<p>$ diskutil unmountDisk /dev/disk1</p>

<p>$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
```</p>

<p>The <code>dd</code> command takes a <em>long</em> time to run, over 56 minutes on my machine. Here&rsquo;s a quick run-through of the command options:</p>

<ul>
<li><code>sudo</code> gives you <a href="/sudo-disclaimer/">super powers</a>.</li>
<li><code>dd</code> is the &ldquo;copy and convert&rdquo; command. The letters &ldquo;dd&rdquo; have nothing to do with what the tool actually does. It&rsquo;s just a command name. And like so many things in computer science, the name might be based on a pun.</li>
<li><code>if=</code> specifies the input file. You can include the full path, or if the file is in your current directory, you can omit the path as shown in this example.</li>
<li><code>of=</code> specifies the output file. We know that the SD card is located at <code>/dev/disk</code> so that&rsquo;s where the results of this command are headed.  Note that your destination directory may differ from this one.</li>
<li><code>bs=</code> specifies the block size used for the destination file.</li>
</ul>


<h3>About Block Size</h3>

<p>The Mac section of the official Parallella guide recommends a block size of size of 1 megabyte, while the Linux instructions recommend 64 kilobytes (the option <code>bs=64k</code> in the <code>dd</code> command). I initially used <code>bs=1m</code> on my Mac, and I ran into problems. When I used <code>bs=64k</code>, everything worked fine. Note that I eventually traced my problem to something other than block size (details below) but since the 64k setting still works, I&rsquo;ve left it intact. If I find out why Linux and OS X are using different block sizes, I&rsquo;ll post the information here.</p>

<h3>Checking dd Progress</h3>

<p><span class='caption-wrapper center'><img class='caption' src='/images/dd_progress.png' width='' height='' alt='Activity Monitor' title='Activity Monitor'><span class='caption-text'>Activity Monitor</span></span>
Waiting an hour for the <code>dd</code> command to run can be disconcerting because the machine does not give any feedback on progress. No gas gauge, spinning indicator, nothing. How do we know if the write process is working?</p>

<p>Here&rsquo;s how to check progress. Run Apple&rsquo;s <code>Activity Monitor</code>, and look for <code>dd</code> on the list of processes, as shown in the Activity Monitor screenshot. The number of bytes written will increase slowly while <code>dd</code> burns the Ubuntu image onto the SD card. With the current version of Ubuntu, roughly 7.4GB will be written to the SD. At completion, <code>dd</code> will disappear from the Activity Monitor list and you&rsquo;ll see the following at the command line.</p>

<p>```bash
$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
121280+0 records in
121280+0 records out
7948206080 bytes transferred in 3363.824531 secs (2362848 bytes/sec)</p>

<p>$</p>

<p>```</p>

<p>As you can see from the report, it took 3363.824531 seconds (just over 56 minutes) for <code>dd</code> to burn the Ubuntu image onto the SD card. That&rsquo;s a long time to wait with zero feedback. Activity Monitor will tell you what&rsquo;s going on.</p>

<h3>Confirm Partitions</h3>

<p>To confirm that the partitions have been created and that Ubuntu has been written to the SD card, use <code>diskutil list</code> again.</p>

<p>```bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        </em>15.9 GB    disk1
   1:                 DOS_FAT_32 BOOT                    134.2 MB   disk1s1
   2:                      Linux                         7.3 GB     disk1s2</p>

<p>$
```</p>

<p>As expected, <code>/dev/disk0</code> remains unchanged. We want it that way because that&rsquo;s where our primary machine&rsquo;s operating system resides. <code>/dev/disk1</code> (your actual SD card designation may be different) is the target disk we&rsquo;re after. Two new partitions are on the SD card, a FAT32 partition named <code>BOOT</code> and a Linux partition.</p>

<p>Next we need to copy some supporting files to the new <code>BOOT</code> partition.</p>

<h3>Copying Additional Files to the SD Card</h3>

<p>Now that Ubuntu resides on the SD card, it&rsquo;s time to add the files that support HDMI video and the FPGAs. Here&rsquo;s how.</p>

<p>The additional files will need to be copied to <code>/BOOT</code> on the SD card. While it might make sense to reach the <code>BOOT</code> partition as <code>/dev/disk1</code>, you will actually reach it via <code>/Volumes/BOOT</code>.</p>

<p>We target <code>/dev/disk1</code> when burning the Ubuntu image, but to copy the supporting files we target <code>/Volumes/BOOT</code>. Both designations point to the same place, the SD card. Why the name switch?</p>

<p>I don&rsquo;t know why two different designations are used for the same SD card. I only know that it works. You can expect to see an update posted here if I find an explanation. Or if you have an answer, feel free to post in the comments below.</p>

<p>Before we copy over the files, let&rsquo;s see what&rsquo;s on the <code>BOOT</code> partition on the SD card.</p>

<p>```bash
~$ cd /Volumes/BOOT/</p>

<p>/Volumes/BOOT$ ls -al
total 12
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .
drwxrwxrwt@ 4 root  admin   136 Jul  5 23:44 ..
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .Trashes
-rwxrwxrwx  1 rth   staff  4096 Jul  5 23:44 ._.Trashes
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .fseventsd</p>

<p>/Volumes/BOOT$
```</p>

<h3>Gotcha #1: The FPGA Bitstream File</h3>

<p>First, change into the directory where you stored the additional Parallella files, and copy the FPGA bitstream file to <code>/Volumes/BOOT</code>.</p>

<p>```bash</p>

<p>$ cp parallella_e16_hdmi_gpiose_7010.bit.bin /Volumes/BOOT/</p>

<p>$ cd /Volumes/BOOT/</p>

<p>$ mv parallella_e16_hdmi_gpiose_7010.bit.bin parallella.bit.bin</p>

<p>$</p>

<p><code>``
First gotcha: I made the mistake of simply copying the</code>parallella_e16_hdmi_gpiose_7010.bit.bin<code>file without renaming it to</code>parallella.bit.bin<code>. Parallella will only boot when it sees a file with this filename on the SD card's</code>BOOT<code>partition. The original file name will probably change as the software gets updated. With each change, we will need to make sure that the file is renamed</code>parallella.bit.bin` on the Parallella.</p>

<p>Obvious in hindsight, but it took me awhile to track that one down!</p>

<h3>Copy the Last Two Files</h3>

<p>Two files were decompressed from <code>kernel-hdmi-default.tgz</code>: <code>devicetree.dtb</code> and <code>uImage</code>. Change into the directory where the files were decompressed, and copy them to <code>/Volumes/BOOT</code>.</p>

<p>```bash
$ cp devicetree.dtb /Volumes/BOOT/</p>

<p>$ cp uImage /Volumes/BOOT/</p>

<p>$
```</p>

<p>Here’s what the BOOT partition should look like when you’re done..</p>

<p>```bash
/Volumes/BOOT$ ls -al
total 12853
drwxrwxrwx@ 1 rth   staff     1024 Jul  6 12:14 .
drwxrwxrwt@ 4 root  admin      136 Jul  6 12:11 ..
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff      512 Jul  6 12:11 .Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:11 .<em>.Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>devicetree.dtb
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:14 .<em>parallella.bit.bin
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>uImage
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .fseventsd
-rwxrwxrwx@ 1 rth   staff     8607 Jul  6 12:13 devicetree.dtb
-rwxrwxrwx@ 1 rth   staff  2083744 Jul  6 12:14 parallella.bit.bin
-rwxrwxrwx@ 1 rth   staff  4468792 Jul  6 12:13 uImage</p>

<p>/Volumes/BOOT$
```</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/eject_boot.png' width='' height='' alt='Eject the SD card.' title='Eject the SD card.'><span class='caption-text'>Eject the SD card.</span></span></p>

<h3>Eject the SD Card, Insert in Parallella</h3>

<p>Now you&rsquo;re ready to eject the SD card from the Mac and insert it in the Parallella. Plug in the HDMI cable, keyboard, mouse, and Ethernet connection. Power up the Parallella, and welcome to the next <em>gotcha</em>.</p>

<h3>Gotcha #2: Powered USB Required</h3>

<p>Parallella booted to a beautiful GUI, but the system would not respond to the keyboard or mouse. After swapping a few keyboard/mouse combinations, I finally tried a powered USB hub. The powered hub worked.</p>

<p>Through trial and error I learned that the Parallella can handle a single keyboard plugged into the micro-USB port. However, if two devices are plugged in via USB, a powered hub is required. A passive USB hub will not work. A combination keyboard, one with both a keyboard and a trackpad, will also need a powered USB hub.</p>

<h3>Default Login Credentials</h3>

<p>Default login credentials for Parallella are&hellip;</p>

<ul>
<li>username = linaro</li>
<li>password = linaro</li>
</ul>


<h3>SSH, Vim, Git, etc.</h3>

<p>You can SSH into the Parallella from the network&hellip;</p>

<p>```bash
~$ ssh <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x6c;&#x69;&#110;&#x61;&#x72;&#x6f;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#56;&#46;&#x31;&#x31;&#46;&#49;&#x33;&#51;">&#108;&#105;&#110;&#97;&#x72;&#111;&#64;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#49;&#49;&#46;&#49;&#x33;&#51;</a>
<a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x6c;&#x69;&#x6e;&#x61;&#x72;&#111;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#49;&#49;&#x2e;&#49;&#x33;&#x33;">&#108;&#105;&#x6e;&#x61;&#114;&#111;&#64;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#x31;&#x31;&#x2e;&#x31;&#x33;&#51;</a>&rsquo;s password:
Welcome to Linaro 14.04 (GNU/Linux 3.12.0-g0bc9c3a-dirty armv7l)</p>

<ul>
<li>Documentation:  <a href="https://wiki.linaro.org/">https://wiki.linaro.org/</a>
Last login: Sun Jul  6 17:34:17 2014 from wisdomgroup-mbp13
linaro-nano:~>
```</li>
</ul>


<p>&hellip; Vim is operational&hellip;</p>

<p><code>bash
linaro-nano:~&gt; which vim
/usr/bin/vim
linaro-nano:~&gt; vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan  2 2014 19:49:14)
linaro-nano:~&gt;
</code></p>

<p>&hellip; and Git works fine.</p>

<p><code>bash
linaro-nano:~&gt; which git
/usr/bin/git
linaro-nano:~&gt; git --version
git version 1.9.1
linaro-nano:~&gt;
</code></p>

<h3>Scrot for Screenshots</h3>

<p>If you want to take a screenshot of the Parallella display, use <code>scrot</code>.  It comes with the Ubuntu installation. Type <code>scrot</code> at the command line and hit enter. Five seconds later, the entire screen will be captured and stored in a file called <code>[time stamp]_1920x1080_scrot.png</code> in the current directory.</p>

<h3>Conclusion</h3>

<p>After waiting a year for Parallella to arrive, I&rsquo;m excited to have the device up and running. Future posts will explore the &ldquo;why?&rdquo; behind parallel computing. Thanks Adapteva for helping to democratize supercomputing. Awesome times are ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Prep for OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov/"/>
    <updated>2014-06-30T14:06:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/30/node-dot-js-prep-for-openrov</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/nodejs-white.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
<a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV is an underwater robot</a> controlled through a web browser. The server-side of the web app is written in Node.js, running on a <a href="/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">BeagleBone Black</a> inside the OpenROV.</p>

<p>You don&rsquo;t need to know Node.js in order to pilot an OpenROV. And you don&rsquo;t need to do anything in this article to construct an OpenROV from a kit. But if you’re the kind of maker who likes to dig deep into a project, you might enjoy exploring Node.js.</p>

<!--more-->


<h3>Mac OS X and Node.js</h3>

<p>Everything written here applies to Node.js as it runs on Mac OS X. If your local machine runs Linux or Windows, you will need to consult other resources in order to run Node locally.</p>

<h3>Homebrew First</h3>

<p>Make sure you’re running <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a> on your Mac. Homebrew is a seamless way to manage packages on Mac OS X. To install Homebrew&hellip;</p>

<p>```bash
$ ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install">https://raw.github.com/Homebrew/homebrew/go/install</a>)"install</p>

<p>```</p>

<p>After installation, confirm that Homebrew is running properly&hellip;</p>

<p>```bash
$ brew doctor</p>

<p>```</p>

<h3>Installing Node.js</h3>

<p>Now that Homebrew is installed and running, Node.js can be installed with a single line command.</p>

<p>```bash
$ brew install node</p>

<p>```</p>

<p>To confirm that Node.js is installed on your system and to check the version number&hellip;</p>

<p>```bash
$  which node
/usr/local/bin/node</p>

<p>$ node &mdash;version
v0.10.26</p>

<p>$
```</p>

<h3>Hello World in Node.js</h3>

<p>You know the compter science tradition: The first program in any new language has to say &ldquo;Hello World.&rdquo; Here&rsquo;s a sample <code>Hello World</code> program from the official <a href="http://nodejs.org">Node.js</a> web site, slightly modified to suit OpenROV.</p>

<p>First, create a file called <code>helloworld.js</code> and fill it with the following code.</p>

<p>```javascript
// Sample web server from <a href="http://nodejs.org,">http://nodejs.org,</a> slightly modified.</p>

<p>var http = require(&lsquo;http&rsquo;);
http.createServer(function (req, res) {
  res.writeHead(200, {&lsquo;Content-Type&rsquo;: &lsquo;text/plain&rsquo;});
  res.end(&lsquo;Hello World. OpenROV runs Node.js!&rsquo;);
}).listen(1337, &lsquo;127.0.0.1&rsquo;);
console.log(&lsquo;Server running at <a href="http://127.0.0.1:1337/">http://127.0.0.1:1337/</a>&rsquo;);
```</p>

<p>Next, from the same directory where you saved <code>helloworld.js</code>, run the file from the command line like so&hellip;</p>

<p>```bash
$ node helloworld.js
Server running at <a href="http://127.0.0.1:1337/">http://127.0.0.1:1337/</a></p>

<p>$
```</p>

<p>Finally, open up a web browser on your local machine and navigate to <code>http://127.0.0.1:1337</code>. You should see a bare-bones web page similar to this one.</p>

<p><span class='caption-wrapper center'><img class='caption' src='/images/openrov-runs-nodejs.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<p>Now that you have Node.js running locally, you&rsquo;re ready to explore the <a href="http://github.com/openrov">OpenROV repo on GitHub</a>.</p>

<h3>Next Steps</h3>

<p>Future blog posts about Node.js and OpenROV will consider questions like:</p>

<ul>
<li><p>What does Node.js do for OpenROV that other languages can’t do?</p></li>
<li><p>What other languages might we use to control OpenROV? It’s all open source, so our brainstorms could one day turn into actual code running on OpenROV!</p></li>
<li><p>How does Node.js on the BeagleBone Black interact with the Arduino and other OpenROV components?</p></li>
</ul>


<p>Keep exploring!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Back to Making Things]]></title>
    <link href="http://RayHightower.com/blog/2014/06/28/get-back-to-making-things/"/>
    <updated>2014-06-28T16:25:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/28/get-back-to-making-things</id>
    <content type="html"><![CDATA[<blockquote><p>You know what the trouble is? We used to make things in this country, build things. Now we just put our hand in the next guy’s pocket.
<br/>~Frank Sobatka</p></blockquote>

<p><span class='caption-wrapper right'><img class='caption' src='/images/zero-to-maker.gif' width='' height='' alt='' title=''><span class='caption-text'></span></span>
David Lang is a maker. After a stint with a struggling Silicon Valley startup, David teamed up with former NASA engineer <a href="http://openrov.com/profile/1gupl83kvnk8f">Eric Stackpole</a> to build an underwater robot called <a href="/blog/2014/06/16/citizen-science-with-openrov/">OpenROV</a>. That&rsquo;s a two-sentence oversimplification of David&rsquo;s maker journey, detailed in his book: <a href="http://shop.oreilly.com/product/0636920028284.do">Zero to Maker: Learn (Just Enough) to Make (Just About) Anything</a>.</p>

<p>The book starts off like a novel, with the exploration of the mysterious Hall City Cave and an 1840s-era gold robbery. Fast-forward to the present day where a multi-disciplinary team of makers joins forces to create an inexpensive vehicle for underwater exploration.</p>

<p>The author was not a born maker. But through force of will, discipline, and the right mentorship, he grew from non-maker to co-founder of the OpenROV company in roughly one year.</p>

<!--more-->


<h3>Making is a Team Sport</h3>

<p><em>Zero to Maker</em> will not teach you how to use tools, what to make, or what manuals to read. But it will put you on the path to learning. For example, the author shares his first experience at a <a href="http://makerfaire.com/">Maker Faire</a>, a gathering for people who make things. Many of the exhibitors have spent decades honing their skills, while some are brand new and full of enthusiasm. Everyone shares knowledge in the Maker community. And as a result, everyone grows.</p>

<p>Maker Spaces are places where tools and expertise are shared on a regular basis. <a href="https://www.noisebridge.net/">Noisebridge</a> is a maker space in San Francisco where the author got some of his early experience with specialized tools. <a href="http://pumpingstationone.org/">Pumping Station One</a> and <a href="http://www.sshchicago.org/">Southside Hackerspace Chicago</a> shoot for similar goals in Chicago.</p>

<p>The author points out that no matter what you&rsquo;re trying to make, chances are that someone else has made something similar and they can share experience with you. Likewise, you have experience that other makers may find valuable, even on day one of your maker journey. Sometimes we don&rsquo;t know what we know. Maker communities remove the friction so that knowledge can be shared more freely.</p>

<h3>The IKEA Effect</h3>

<p>Why is the maker movement so powerful? The author explores this question in one very interesting section of the book. As it turns out, Researchers at the Harvard Business School think they have the answer. When we put our sweat and effort into building a project, we perceive the project to be more valuable. The researchers refer to this phenomenon as the IKEA effect. If we sweat to build something, it becomes valuable to us.</p>

<h3>Recommendation</h3>

<p>If you are a maker, or if you want to become a maker, this book is worth reading. And once you&rsquo;re done reading, go make something!</p>

<p><em>Note: A version of this article is also posted at <a href="http://www.chicagoruby.org/book-reviews/">http://www.chicagoruby.org/book-reviews/</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet of Things at ACM]]></title>
    <link href="http://RayHightower.com/blog/2014/06/27/internet-of-things-at-acm/"/>
    <updated>2014-06-27T18:08:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/27/internet-of-things-at-acm</id>
    <content type="html"><![CDATA[<p>How many motors are in the typical automobile? The knee-jerk response might be “one, the big metal thing under the hood”. Upon further reflection, we may recall the motors that operate many devices in today’s automobile: windshield wipers, power windows, door locks, sun roof, reclining seats, and so on. Power devices were once luxury equipment. Today, since motors have fallen in price, most cars include these <em>luxury</em> items as standard equipment.</p>

<p>We take motors for granted, therefore motors have disappeared. And now, as it becomes possible to add a computer and an IP address to almost anything electronic, we bring about the Internet of Things (IoT). Computers are disappearing too.</p>

<!--more-->


<h3>ACM Presents Disruptive IoT</h3>

<p>Steven Loving is a director at <a href="http://www.arrayent.com/">Arrayent</a>. Arrayent makes a platform for companies that want their products to be IoT-aware. For example, a garage door company that wants to offer iPhone control to their customers can do so without re-inventing TCP/IP themselves. Arrayent handles the IoT portion so the maker can focus on their core business. Steven shared his vision of the IoT future at <a href="http://www.meetup.com/chicagoacm/events/184091062/">Tuesday&rsquo;s ACM meeting</a>. Some of his ideas are summarized here.</p>

<h3>Don&rsquo;t Leave Home Without It</h3>

<p><em>Don&rsquo;t leave home without it</em> was once the catch phrase of a major charge card. Today, many of us leave home with just three things in our pockets:</p>

<ul>
<li>Wallet</li>
<li>Keys</li>
<li>Smartphone</li>
</ul>


<p>As near-field communication (or one of its descendants) becomes prevalent, we may only need the smartphone.</p>

<h3>Products Don&rsquo;t Matter Any More?</h3>

<p>Products don&rsquo;t matter any more? I immediately wanted to argue against this idea. Everyone wants quality products, right? The point: As manufacturing techniques become common knowledge, companies need to come up with new ways to differentiate themselves from the competition.</p>

<p>Connected products are special. For example, consider an ordinary sump pump. How does a buyer distinguish one from another? If one sump pump contains a tiny embedded Linux system with an IP address, it can alert the owner when water has approached a dangerous level, if there is a power outage, or if flood conditions are simply too strong for the pump to handle. Bad news does not get better with time, and if the sump pump can send bad news early, the owners can take corrective action while there&rsquo;s still time to do so.</p>

<h3>Mobile First</h3>

<p>A great quote from the presentation&hellip;</p>

<blockquote><p>Do you know anybody building a product with an LCD on it? Shoot them.  I have an LCD in my pocket. It&rsquo;s called a phone.
<br/>~Steven Loving</p></blockquote>

<p>In other words, the mobile-first strategy that many developers apply to apps also applies to IoT.</p>

<p>Side note: Clearly, Apple gets it. That&rsquo;s one reason why they released <a href="https://developer.apple.com/homekit/">HomeKit</a>.</p>

<h3>Incumbent Companies Are Scrambling</h3>

<p>Why are cable companies offering security services in addition to standard packages of television and movies? Because users are moving to Netflix and Amazon Prime. Cable companies that offer internet service must come up with other services if they expect to survive. IoT might offer a way. Self-installed home monitoring services will give customers a reason to stick with their old cable provider. Of course, this will force security companies like ADT to come up with something new, too.</p>

<h3>IoT Progression</h3>

<p>What opportunities will become available when every device has an IP
address? Tuesday&rsquo;s presenter predicts the following sequence of
events:</p>

<ol>
<li>Connected products.</li>
<li>Connected systems &ndash; products talking to other products.</li>
<li>Communities of systems talking to each other.</li>
<li>Network effects.</li>
</ol>


<p>We&rsquo;re currently experiencing &#35;1 and &#35;2. What will happen as &#35;3 and &#35;4 begin to roll out? We cannot be sure. However, we can be certain that this will be an exciting time for software developers, electrical engineers, and entrepreneurs who build companies in those areas.</p>

<h3>Thanks Chicago ACM</h3>

<p>Thanks again Chicago ACM for putting on a great program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Citizen Science With OpenROV]]></title>
    <link href="http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov/"/>
    <updated>2014-06-16T17:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/06/16/citizen-science-with-openrov</id>
    <content type="html"><![CDATA[<blockquote><p>In the early days of robots people said, &lsquo;Oh, let&rsquo;s build a robot&rsquo; and what&rsquo;s the first thought? You make a robot look like a human and do human things. That&rsquo;s so 1950s. We are so past that.
<br/>~Neil deGrasse Tyson</p></blockquote>

<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov-uw.jpg' width='' height='' alt='OpenROV: Underwater robot running Node.js.' title='OpenROV: Underwater robot running Node.js.'><span class='caption-text'>OpenROV: Underwater robot running Node.js.</span></span>
<a href="http://openrov.com">OpenROV</a> is an underwater robot, roughly the size of a toaster, and definitely not human-shaped. The device is controlled through a Node.js-based web app. Former NASA researcher Eric Stackpole and Make Magazine columnist David Lang are on a mission to democratize ocean exploration in the same way that Jobs and Woz sparked the democratization of  computing. Eric and David pooled their talents to launch OpenROV, building on the foundation laid by Moore’s Law and the open source software movement.</p>

<p>OpenROV&rsquo;s ingredients are an impressive mix of open source goodness&hellip;</p>

<ul>
<li>BeagleBone Black &ndash; an open-source single-board computer, smaller than a deck of cards, running Linux.</li>
<li>Linux &ndash; specifically, the Ubuntu distribution.</li>
<li>Node.js &ndash; platform for building web applications, based on Google’s V8 JavaScript engine. Thanks to Node.js, any laptop running a web browser can control the OpenROV.</li>
<li>Arduino &ndash; inexpensive micro-controller commonly used in robotics projects.</li>
<li>TCP/IP &ndash; the communication protocol of the Internet. TCP/IP handles all communications (commands, video) between the OpenROV and the pilot’s laptop.</li>
</ul>


<p>The OpenROV team has released all of their <a href="https://github.com/openrov">schematics and source code</a> to the open source community, hence the word “open” in the company name. If you think the open source aspects of OpenROV are exciting, wait until you hear about the company&rsquo;s main mission: Underwater exploration.</p>

<!--more-->


<p>Eric and David were kind enough to invite me to their lab/manufacturing facility in Berkeley, California recently. Thank you, OpenROV makers!</p>

<h3>Remotely Operated Vehicles</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/controller.jpg' width='' height='' alt='Laptop, browser, and game controller.' title='Laptop, browser, and game controller.'><span class='caption-text'>Laptop, browser, and game controller.</span></span>
ROV is short for remotely operated vehicle, an underwater robot. Scientists use ROVs to study marine life. Oil companies use ROVs for underwater construction and inspections. Industry-grade ROVs are priced at $30,000 on the low-end, while a <a href="http://www.mbari.org/twenty/Tiburon.htm">custom ROV can cost several million dollars</a>.</p>

<p>The OpenROV team was convinced that they could design and build an ROV small enough to fit in a suitcase, and easy enough for a citizen scientist to assemble and maintain. Targeting the general public meant achieving a relatively low price point: under one thousand dollars ($1,000.00).</p>

<p>They did it. The device is successful, and you can <a href="http://store.openrov.com/">buy an OpenROV</a> kit today for $849.00.</p>

<p>Movements are controlled via a USB-connected video game controller. A Bluetooth-equipped controller should work just as well. Some users will prefer the laptop keyboard; that works too.</p>

<p>In other words, the computer that you’re using to read this article can probably control the OpenROV.</p>

<h3>Citizen Science</h3>

<p>Our world will always need professional scientists, people working in academia and in industry to push the frontier of knowledge. Some scientific problems require the attention of PhD-level professionals, while other problems are better solved through crowdsourcing. Enter the <a href="http://en.wikipedia.org/wiki/Citizen_science">citizen scientist</a>.</p>

<p>Professional scientists are good at analyzing data, because that&rsquo;s what they have trained themselves to do. But data gathering requires less training than analysis. Citizen science and crowdsourcing work when there&rsquo;s an overwhelming volume of data to gather. Or when the breakthrough is beyond the reach of current scientific knowledge.</p>

<p>Citizen scientists may be constrained by money, but they tend to be unconstrained by expertise. Therefore they are likely to try solutions that experts would never consider. <a href="http://en.wikipedia.org/wiki/Wright_brothers">Orville and Wilbur Wright</a> were citizen scientists. Professional scientists pursued solutions for fixed-wing flight prior to the Wright brothers' success. But since the flight problem defied the known science of the day, new approaches were required.</p>

<p>Amusingly, successful citizen scientists can be outwitted by their own expertise, just like the professionals. For example&hellip;</p>

<blockquote><p>No flying machine will ever fly from New York to Paris &hellip;[because] no known motor can run at the requisite speed for four days without stopping.
<br/>~Orville Wright</p></blockquote>

<p>Shifting back to the 21st century: Thousands of citizen scientists are using OpenROV to explore oceans and lakes more thoroughly than ever before.</p>

<h3>Open Source On-Site</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/ui-discussion-2.jpg' width='' height='' alt='Enthusiasts collaborate on the next UI.' title='Enthusiasts collaborate on the next UI.'><span class='caption-text'>Enthusiasts collaborate on the next UI.</span></span>
On the day I visited the OpenROV factory, other underwater enthusiasts were on-site, working with company engineers on product improvements. One enthusiast is a professional pilot of manned submersibles, underwater vehicles large enough to hold people. This pilot has traveled as deep as 2,000 meters below the ocean&rsquo;s surface! &ldquo;We&rsquo;re always looking at amperage&rdquo;, she said in a discussion with another enthusiast. A spike in amperage could indicate a ground fault, and batteries drain rapidly when that happens. You do not want to be stuck underwater when the batteries run out.</p>

<p>Another member of the open source community, an engineering veteran with decades of experience at <a href="http://apple.com">Apple</a> and <a href="http://oracle.com">Oracle</a>, translates the operator&rsquo;s feedback into code that might drive the next OpenROV user interface.</p>

<p>That&rsquo;s how open source works at OpenROV.</p>

<h3>Hardware Testing</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/testing-motor-controller.jpg' width='' height='' alt='Testing new hardware.' title='Testing new hardware.'><span class='caption-text'>Testing new hardware.</span></span>
I offered to leave when the OpenROV team prepared to test some new components. After working in tech for decades, I&rsquo;ve learned to respect a company&rsquo;s right to protect secrets.</p>

<p>&ldquo;You forget that this is all open source,&rdquo; they told me. &ldquo;The schematics are already online, so there&rsquo;s nothing to hide. Come and watch the test.&rdquo;</p>

<p>Yes, they had to remind me about the real meaning of open source!</p>

<p>Four OpenROV makers gathered around a tank of water to test a new motor, controller, and propeller combination. They measured power utilization, propulsion, and temperature. Power utilization is important because the batteries need to last. Temperature matters because we don&rsquo;t want the OpenROV to melt underwater (or fry the fish). And propulsion matters because if the unit can&rsquo;t move, what&rsquo;s the point?</p>

<p>From the reaction of the team, it looks like they found some good components for the next batch of OpenROV kits.</p>

<h3>Strong Minds Coming Together</h3>

<p>The mood in the OpenROV lab is a blend of excitement and technical expertise. Some of the people in the lab are members of the company. Others are adventurers fascinated with this inexpensive, effective way to explore. All are united in the quest to do something awesome with technology.</p>

<p>OpenROV is what we get when the thirst for exploration blends with the open source movement. What a wonderful combination.</p>
]]></content>
  </entry>
  
</feed>
