<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-05-31T10:47:39-07:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading to Git 2.0]]></title>
    <link href="http://RayHightower.com/blog/2014/05/30/upgrading-to-git-2-dot-0/"/>
    <updated>2014-05-30T11:33:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/05/30/upgrading-to-git-2-dot-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/git_200.png">
Developers of Git are making a serious effort to improve intuitiveness for first-time users. Of course, all users benefit from intuitive tools. When our tools <em>just work</em>, we spend less time sifting through documentation and more time solving problems for our customers.</p>

<!--more-->


<h3>How to Upgrade</h3>

<p>If you‚Äôre on Mac OS X, make sure you‚Äôre using <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>. It‚Äôs the easiest way to install and manage Unix libraries on the Mac.</p>

<p>It‚Äôs usually a good idea to check your current version before upgrading.</p>

<p>```bash
$ git &mdash;version
git version 1.9.2</p>

<p>$</p>

<p>```
Next, make sure that Homebrew is current.</p>

<p>```bash
$ brew doctor</p>

<p>Warning: Your Homebrew is outdated.
You haven&rsquo;t updated for at least 24 hours, this is a long time in brewland!
To update Homebrew, run <code>brew update</code>.</p>

<p>$</p>

<p>```</p>

<p>My Homebrew was outdated, so I used <code>brew update</code> to grab the new packages.</p>

<p>```bash
$ brew update
Updated Homebrew from b46160b8 to afff2b23.
==> New Formulae
aces_container                    git-number                      picolisp
apache-spark                    homebrew/versions/mongodb24       probatron4j</p>

<p>&hellip;</p>

<p>$</p>

<p>```</p>

<p>Next, use Homebrew to upgrade Git.</p>

<p>```bash
$ brew upgrade git
==> Upgrading 1 outdated package, with result:
git 2.0.0
==> Upgrading git
==> Downloading <a href="https://downloads.sf.net/project/machomebrew/Bottles/git-2.0.0.mavericks.bottle.tar.gz">https://downloads.sf.net/project/machomebrew/Bottles/git-2.0.0.mavericks.bottle.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring git-2.0.0.mavericks.bottle.tar.gz
==> Caveats
The OS X keychain credential helper has been installed to:
  /usr/local/bin/git-credential-osxkeychain</p>

<p>The &lsquo;contrib&rsquo; directory has been installed to:
  /usr/local/share/git-core/contrib</p>

<p>Bash completion has been installed to:
  /usr/local/etc/bash_completion.d</p>

<p>zsh completion has been installed to:
  /usr/local/share/zsh/site-functions
==> Summary
üç∫  /usr/local/Cellar/git/2.0.0: 1324 files, 31M</p>

<p>$
```</p>

<p>Finished. Let&rsquo;s check the Git version to confirm that the upgrade went properly.</p>

<p>```bash
$ git &mdash;version
git version 2.0.0</p>

<p>$</p>

<p>```</p>

<p>Future articles will examine the this latest version of Git in detail. For now, enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How .gitignore Works]]></title>
    <link href="http://RayHightower.com/blog/2014/03/25/how-gitignore-works/"/>
    <updated>2014-03-25T18:20:00-07:00</updated>
    <id>http://RayHightower.com/blog/2014/03/25/how-gitignore-works</id>
    <content type="html"><![CDATA[<p>Earlier today I ran into a Git issue within a RubyMotion project. I added a directory to the project&rsquo;s <code>.gitignore</code> file, but Git seemed to ignore my ignore. Expressed more clearly, Git continued to track a directory that I explicitly told it to ignore.</p>

<p>What?</p>

<p>Either there was a bug in Git, or my understanding of <code>.gitignore</code> was incomplete. It was time for me to dig in and learn more about <code>.gitignore</code>.</p>

<!--more-->


<h3>What I Learned About .gitignore</h3>

<p>The root cause of my problem: Once Git has begun tracking a file or directory, adding it to <code>.gitignore</code> changes nothing. Git will continue to track the file unless we explicitly tell Git to stop tracking the file.</p>

<p>```bash
$ git rm &mdash;cached [filename]</p>

<p>$
```</p>

<p>Or, if you want to stop tracking an entire directory (like me in this case)&hellip;</p>

<p>```bash
$ git rm -r &mdash;cached [directoryname]</p>

<p>$
```</p>

<p>The <code>-r</code> flag will tell Git to stop tracking all of the sub-directories and files within <code>directoryname</code>, recursively.</p>

<p>Git was behaving exactly as designed.</p>

<h3>Penalty</h3>

<p>I should have known this a long time ago. My penalty: A public admission :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew, Ruby, and Git]]></title>
    <link href="http://RayHightower.com/blog/2013/12/06/homebrew-ruby-and-git/"/>
    <updated>2013-12-06T17:30:00-08:00</updated>
    <id>http://RayHightower.com/blog/2013/12/06/homebrew-ruby-and-git</id>
    <content type="html"><![CDATA[<p>I encountered some interesting behavior between <a href="http://brew.sh/">Homebrew</a> and Ruby this afternoon. I can describe what happened, but I don&rsquo;t yet understand why. Perhaps another member of the dev community can shed some light.</p>

<h3>Upgrading to Git 1.8.5</h3>

<p>Earlier today I learned that Git 1.8.5 was available. So I decided to upgrade. Since I use Homebrew for package management, it was time for <code>$ brew doctor</code> and <code>$ brew update</code> as well.</p>

<p><code>``bash
$ brew doctor
Error: Homebrew doesn't know what compiler versions ship with your version
of Xcode (5.0.2). Please</code>brew update<code>and if that doesn't help, file
an issue with the output of</code>brew &mdash;config`:
  <a href="https://github.com/mxcl/homebrew/issues">https://github.com/mxcl/homebrew/issues</a></p>

<p>Thanks!
Warning: Your Homebrew is outdated.
You haven&rsquo;t updated for at least 24 hours, this is a long time in brewland!
To update Homebrew, run <code>brew update</code>.</p>

<p>~/Code/Ruby/apps$
```</p>

<p><code>$ brew doctor</code> has spoken. Time to update Homebrew.</p>

<!--more-->


<h3>Homebrew First. Git Later.</h3>

<p>Updating Homebrew is as simple as <code>$ brew update</code>, right?</p>

<p><code>``bash
~$ brew update
Warning: Could not tap homebrew/dupes/ant over mxcl/master/ant
Warning: Could not tap homebrew/dupes/cvs over mxcl/master/cvs
Error: undefined method</code>to_sym' for nil:NilClass
Please report this bug:</p>

<pre><code>https://github.com/mxcl/homebrew/wiki/troubleshooting
</code></pre>

<p>/usr/local/Library/Homebrew/cmd/update.rb:123:in <code>report'
/usr/local/Library/Homebrew/cmd/update.rb:121:in</code>each_line'
/usr/local/Library/Homebrew/cmd/update.rb:121:in <code>report'
/usr/local/Library/Homebrew/cmd/update.rb:35:in</code>update'
/usr/local/Library/brew.rb:95:in `send'
/usr/local/Library/brew.rb:95</p>

<p>~/Code/Ruby/apps$
<code>``
</code>$ brew update` choked. Further, Homebrew said that I should report a bug. But something smelled fishy. I decided to try running Homebrew under Ruby 2.0.0 instead of Ruby 1.9.3, the default on my system. Running <a href="/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a> makes bouncing between Ruby versions a snap.</p>

<p>```bash
~$ rvm use 2.0.0</p>

<p>```</p>

<p>That did the trick. <code>$ brew update</code> worked fine, and <code>$ brew doctor</code>
confirmed it.</p>

<p>```bash
~$ brew update
Updated Homebrew from 69a83176 to 691c72bf.</p>

<p>‚Ä¶</p>

<p>~$ brew doctor
Your system is ready to brew.</p>

<p>```</p>

<h3>Back to Git</h3>

<p>Now that the yak is well-shaved, we&rsquo;re ready to upgrade Git.</p>

<p>```bash
~$ brew upgrade git
==> Upgrading 1 outdated package, with result:
git 1.8.5.1
==> Upgrading git
==> Downloading <a href="https://downloads.sf.net/project/machomebrew/Bottles/git-1.8.5.1.mountain_lion.bottle.tar.gz">https://downloads.sf.net/project/machomebrew/Bottles/git-1.8.5.1.mountain_lion.bottle.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring git-1.8.5.1.mountain_lion.bottle.tar.gz
==> Caveats
The OS X keychain credential helper has been installed to:
  /usr/local/bin/git-credential-osxkeychain</p>

<p>The &lsquo;contrib&rsquo; directory has been installed to:
  /usr/local/share/git-core/contrib</p>

<p>Bash completion has been installed to:
  /usr/local/etc/bash_completion.d</p>

<p>zsh completion has been installed to:
  /usr/local/share/zsh/site-functions
==> Summary
  /usr/local/Cellar/git/1.8.5.1: 1333 files, 30M
```</p>

<p>Mission accomplished. Git has been upgraded to 1.8.5.</p>

<p>```bash
~$ git &mdash;version
git version 1.8.5.1</p>

<p>~$
```</p>

<h3>Why This Matters</h3>

<p>I&rsquo;m posting this article as a note to my future self. Error messages sometimes lie. They don&rsquo;t mean to lie, but an error messsage can only give you its best guess based on what it <em>thinks</em> is happening on your system. It&rsquo;s up to the developer to sniff out the rest of the clues.</p>

<p>After decades in this industry, I&rsquo;m still learning this lesson :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
