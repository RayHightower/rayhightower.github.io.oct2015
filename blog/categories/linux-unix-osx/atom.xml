<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux-Unix-OSX | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/linux-unix-osx/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2013-12-01T18:55:10-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS X and RubyMotion, Finishing Up]]></title>
    <link href="http://RayHightower.com/blog/2013/11/11/os-x-and-rubymotion-finishing-up/"/>
    <updated>2013-11-11T19:03:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/11/os-x-and-rubymotion-finishing-up</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/show-package-contents.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
There is something I neglected to cover in a previous blog post, <a href="/blog/2013/11/01/building-an-os-x-app-with-rubymotion/">Building an OS X App With RubyMotion</a>. Once you&rsquo;ve written the OS X app, where do you find the executable, and how do you add it to the <code>Applications</code> folder on the Mac?</p>

<p>Long-time Mac enthusiasts may already know how to do this. The information is included here for completeness.</p>

<h3>Find, Drag, and Drop</h3>

<p>First thing to note: A Mac app named [random-app].app is actually a directory, even though it appears to be a file when viewed in the <code>Applications</code> folder. If you&rsquo;re curious, right-click on any app in the <code>Applications</code> folder and choose <code>Show Package Contents</code> from the speed menu.</p>

<!--more-->


<p>After compilation, RubyMotion puts all of the executables in the app&rsquo;s <code>build/</code> directory. Using Finder, drag the folder named <code>[your-app-name].app</code> into the <code>Applications</code> folder.</p>

<p>Or, if you prefer the command line…</p>

<p><code>bash
$ cd [root-directory-of-your-app]
$ cp build/MacOSX-10.8-Development/[your-app-name].app /Applications
$
</code></p>

<p>It doesn&rsquo;t really matter whether we copy the file or move it.  RubyMotion creates a new one with every build, when we type <code>rake</code>.</p>

<h3>Launch at Login</h3>

<p>I want the EjectDisks utility to be always available, so it would be good to have it launch automatically at login. That behavior is managed in the <code>Users and Groups</code> preference pane, shown below:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/launch-at-login.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<p>Click the <code>+</code> sign, navigate to the app you want to launch at login time (in this case, EjectDisks) and select it. Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prep for Parallella's 64 Cores: Installing Go on Mac OS X]]></title>
    <link href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/"/>
    <updated>2013-06-22T12:58:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/parallella.jpg" width="450" height="257" alt="Parallella 64-core supercomputer" title="Parallella 64-core supercomputer" align="right" imgcap="Parallella Board">
The idea of owning a 64-core parallel system for two hundred dollars (yes, $200.00) is exciting. <a href="http://www.parallella.org/introduction/">Parallella</a> is working to make that happen, perhaps as early as August 2013. To prepare for that day, I&rsquo;ve decided to introduce myself to the Go language.</p>

<!--more-->


<h3>What is Go?</h3>

<p><a href="http://golang.org">The Go language</a> is designed for parallel systems. Why does Go exist? One developer sums it up this way:</p>

<blockquote><p>Go was created at Google, by Google, for Google-size problems.<br/>~Dave Astels</p></blockquote>

<p>Google writes software that runs on thousands of machines in parallel. As the number of concurrent operations increases, new challenges are encountered. Google addressed those challenges by creating Go.</p>

<h3>Why Does a Rubyist Learn Go?</h3>

<p>The team at <a href="http://wisdomgroup.com">WisdomGroup</a> writes web and mobile apps, mainly in Ruby. So why am I learning Go?</p>

<p>Because the best developers are polyglot. When we learn a new language, we cause ourselves to see old problems in new ways and we strengthen our ability to solve new problems. It&rsquo;s like cross-training for  athletes. In the end, we become better developers.</p>

<h3>How to Install Go on Mac OS X</h3>

<ol>
<li><a href="https://code.google.com/p/go/downloads/list">Download the binary of Go that matches your system</a> <i>but don't install it yet</i>. You will need to complete the rest of these steps before installation. For my 2010 i5-based 15-inch MacBook Pro, I chose <code>go1.1.1.darwin-amd64.pkg</code>. I was concerned about the reference to <code>amd64</code> in the name. But the description includes <code>Mac OS X (x86 64-bit)</code>, and the binary worked for me.</li>
<br/>
<li>If you are upgrading from a previous version of Go, you will need to remove the old Go directory. You can do this while the new binary is downloading in the background:</li>

```bash
$ rm -rf /usr/local/go
```

<li>Define the <code>GOROOT</code> and <code>GOPATH</code> environmental variables. My system uses <code>~/.bash_profile</code> to define environmental variables, so I added the following lines to the end of that file:

```bash
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GOPATH=~/Code/gocode
```
Note: I'm using the default <code>GOROOT</code> variable, but your <code>GOPATH</code> may differ from mine. I store all of my source code in a subdirectory of home:<code>~/Code</code>. My complete Go directory structure is given below. By looking at my structure, you can adjust these steps to fit your system.</li>
<br/>
<li>Tell your terminal session to recognize the new environmental variables. You can either restart terminal, or if your environmental variables are in <code>~/.bash_profile</code> like mine, you can do the following:</li>

```bash
$ source ~/.bash_profile
```
<li>Run the package installation program, <code>go1.1.1.darwin-amd64.pkg</code>, that was downloaded in Step 1.</li>
</ol>


<p>Now, let&rsquo;s Go for a test drive.</p>

<h3>Creating a Go Workspace</h3>

<p>Before you can run a Go program on your system, you have to create a Go workspace. A workspace is a directory structure that contains source code and binaries that a Go program needs in order to compile and execute.</p>

<p>We can examine the Go Workspace on my system with the Unix <code>tree</code> command:</p>

<p>```bash
~/Code/gocode$ tree
.
└── src</p>

<pre><code>└── github.com
    └── rayhightower
        └── hello
            └── hello.go
</code></pre>

<p>4 directories, 1 file</p>

<p>~/Code/gocode$
```</p>

<p>Here&rsquo;s a brief description of the directories:</p>

<ul>
<li>Code = root directory for all source code on my system. Yours may differ.</li>
<li>gocode = where I store all of the Go code on my system. I&rsquo;m following the structure recommended by the Go documentation. I may alter this as I learn more about the language.</li>
<li>src = source code</li>
<li>github.com = directory named after the place where I store repos</li>
<li>rayhightower = my GitHub profile name</li>
<li>hello = directory named for our first Go application</li>
<li>hello.go = the Go source file for our <code>Hello World</code> program</li>
</ul>


<p>All structure below the <code>gocode</code> directory is mandated by Go.</p>

<h3>Writing &lsquo;Hello World!&rsquo; in Go</h3>

<p>Google&rsquo;s official installation instructions include a simple &lsquo;Hello World&rsquo; program for testing the installation. A slightly modified version appears below:</p>

<p>```go
package main</p>

<p>import &ldquo;fmt&rdquo;</p>

<p>func main() {</p>

<pre><code>fmt.Printf("\n****** Hey Parallella enthusiasts: Learn Go! ******\n")
</code></pre>

<p>}
```</p>

<h3>Compiling and Running</h3>

<p>We drop the code into a file called <code>hello.go</code> in the <code>hello</code> directory. To compile the program:</p>

<p>```bash
~/Code/gocode/src/github.com/rayhightower/hello$ go install</p>

<p>~/Code/gocode/src/github.com/rayhightower/hello$
<code>``
If the Go compiler responds with a blank prompt (like above) then the program compiled successfully and a</code>bin<code>directory has been created inside the Go workspace. Run the</code>tree<code>command from the</code>gocode` directory to see how the structure has changed:</p>

<p>```bash
~/Code/gocode$ tree
.
├── bin
│   └── hello
└── src</p>

<pre><code>└── github.com
    └── rayhightower
        └── hello
            └── hello.go
</code></pre>

<p>5 directories, 2 files</p>

<p>~/Code/gocode$
```</p>

<p>The newly created <code>bin/</code> directory contains our <code>hello</code> executable. And now, let&rsquo;s cut the suspense and <em>run the program</em>. To do so, change into the <code>bin/</code> directory and type <code>./hello</code>.</p>

<p>```bash
~/Code/gocode/src/github.com/rayhightower/hello$ cd ~/Code/gocode/bin</p>

<p>~/Code/gocode/bin$ ./hello</p>

<p><strong><strong><strong> Hey Parallella enthusiasts: Learn Go! </strong></strong></strong></p>

<p>~/Code/gocode/bin$
```
Success!</p>

<h3>It&rsquo;s Not Official, But It Makes Sense</h3>

<p>As of this writing, Parallella does not officially support the Go language. So why go through all of this trouble? Because&hellip;</p>

<ul>
<li>A 64-core Parallella is just too cool to pass up. And it&rsquo;s open source.</li>
<li>Go is designed for parallel systems. And it&rsquo;s open source.</li>
<li>Open source devs are working on a Go compiler for Parallella right now. If you&rsquo;re reading this, and you&rsquo;re one of the devs, thank you!</li>
</ul>


<p>The Go-Parallella match makes sense. It&rsquo;s always good to skate where the puck is going.</p>

<h3>Next Steps</h3>

<p>Now it&rsquo;s time to explore the Go language. The real adventure begins when the 64-core Parallella arrives. Looking forward to it!</p>

<h3>Acknowledgements</h3>

<p>I was inspired to explore Go by <a href="https://twitter.com/blakesmith">Blake Smith&rsquo;s</a> presentation at <a href="http://www.meetup.com/ChicagoSC/events/120658422/">8th Light</a>. <a href="http://twitter.com/wondible">Justin Love</a> introduced me to Parallella last month at ChicagoRuby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali Linux for Pentesting]]></title>
    <link href="http://RayHightower.com/blog/2013/05/31/kali-linux-pentesting/"/>
    <updated>2013-05-31T00:15:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/05/31/kali-linux-pentesting</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/kali-linux-desktop.png" width="400" height="303" title="Kali Linux - The quieter you become, the more you are able to hear." alt="Kali Linux - The quieter you become, the more you are able to hear." align="right">
<a href="http://getbraintree.com">Braintree</a> hosted a <a href="http://www.meetup.com/braintreepayments/events/119511632/">Hax &lsquo;n Snax</a> event this afternoon. Devs from around Chicago gathered together to hack on code, socialize, trade ideas, and hone skills. Thanks Braintree for putting on a great event.</p>

<p>My Hax &lsquo;n Snax time was spent interacting with other devs and experimenting with a Linux distro that I just discovered, Kali Linux.</p>

<h3>What is Kali Linux?</h3>

<p><a href="http://www.kali.org/">Kali</a> is a fairly new Linux distro designed for digital forensics and penetration testing. If you&rsquo;re looking for a general purpose Linux distro, <a href="http://ubuntu.com">Ubuntu</a> would be a better choice. Kali is the successor of BackTrack. The developers of Kali and BackTrack, <a href="http://www.offensive-security.com/">Offensive Software</a>, state that &ldquo;Kali is a more mature, secure, and enterprise-ready version of BackTrack Linux.&rdquo; You can download it at <a href="http://kali.org">Kali.org</a>.</p>

<!--more-->


<h3>Parallels Installation Gotcha</h3>

<p>I&rsquo;m running Kali Linux inside of Parallels version 7 on Mac OS X 10.8.3 (Mountain Lion). The Linux installation proceeded normally, but when I rebooted the virtual machine, Linux wouldn&rsquo;t come up. Instead, I got the perpetual display of timeouts shown below.</p>

<center><img src="http://RayHightower.com/images/time-out.png" width="754" height="645" title="Kali Linux time out" alt="Kali Linux time out" align="center"></center>


<p>Google led me to a solution on a blog called <a href="http://redrise.wordpress.com/2013/04/02/installing-kali-in-parallels-desktop-7/">redrise</a>. The solution: To make Kali run on Parallels, uncheck the check box labeled &ldquo;Show battery in Linux&rdquo;, as shown below.</p>

<center><img src="http://RayHightower.com/images/show-battery-in-linux.png" width="798" height="653" title="Kali - Show battery in Linux" alt="Kali - Show battery in Linux" align="center"></center>


<p>I&rsquo;m not sure why a battery indicator would prevent Kali from booting in Parallels, but the solution worked. When I installed Kali on VMWare, the OS ran without special configuration changes.</p>

<h3>The Kali Linux Tools</h3>

<p>Kali comes with over 300 penetration tools. It&rsquo;s open source, so if you see room for improvement, <a href="http://git.kali.org/gitweb/">fork the repo</a> and go to work. If your ideas are strong enough, the developers might accept your pull request. There&rsquo;s even a version of Kali for <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>. Take a look at the GUI.</p>

<center><img src="http://RayHightower.com/images/kali-linux-security-tools.png" width="798" height="653" title="Kali Linux Security Tools" alt="Kali Linux Security Tools" align="center"></center>


<h3>Using Wireshark on Kali Linux</h3>

<p>Kali includes sniffer tools that can capture WiFi traffic. If the WiFi traffic is &ldquo;protected&rdquo; (note the quotes) with an older method like wireless encryption protocol (WEP), Kali&rsquo;s tools can crack the encryption.</p>

<center><img src="http://RayHightower.com/images/wireshark-kali-linux.png" width="600" height="492" title="Kali Linux Wireshark" alt="Kali Linux Wireshark" align="center"></center>


<p>A screenshot from Wireshark appears above. Wireshark sits and observes network traffic. If a packet looks interesting, drill down to discover the packet&rsquo;s source, destination, and contents.</p>

<h3>Summary</h3>

<p>Kali enables developers and network professionals to protect themselves and their clients from attacks. Kali is powerful, and with great power comes great responsibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ack 2.0: Written in Perl, Useful With Ruby]]></title>
    <link href="http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby/"/>
    <updated>2013-04-20T17:12:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/04/20/ack-written-in-perl-useful-with-ruby</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/ack.png" align="right" height="237" width="230" alt="Ack Linux Mac OS X" title="Ack Linux Mac OS X"></p>

<p><a href="http://beyondgrep.com/">Ack</a> is an open source command line tool that lets developers search large trees of source code very quickly. If you are looking for a method definition in a haystack of files, Ack will find that needle for you. Many devs regard Ack as a replacement for <a href="http://en.wikipedia.org/wiki/Grep">grep</a>.</p>

<p>The Elmhurst <a href="http://chicagoruby.org">ChicagoRuby</a> meetings are always a source of unexpected learning. Today ChicagoRuby welcomed <a href="http://twitter.com/petdance">Andy Lester</a>, creator of Ack. Andy released Ack 2.0 two days ago. He shared some of the latest features in an impromptu demo.</p>

<!--more-->


<h4>Why Ack?</h4>

<p>Have you ever been working on a project, only to be interrupted when you need to look for something? It could be a method name, a variable declaration, or a string of text in a comment. A minor distraction costs you the time it takes to search plus the time required to re-focus.</p>

<p>All of us are more productive when we stay <em>in the zone</em>. Ack helps devs to maintain focus and thereby produce better results.</p>

<h4>First, Install Perl</h4>

<p>Ack requires the <a href="http://en.wikipedia.org/wiki/Perl">Perl</a> programming language. Perl comes pre-installed on Mac OS X and most Linux distros. If you&rsquo;re running on a &lsquo;nix platform, you probably have Perl already.</p>

<p>Windows installations are beyond the scope of this article. If you&rsquo;re running Windows, you might consider a Linux VM for Ruby and Rails-related work.</p>

<h4>Installing Ack on Mac OS X</h4>

<p>Installing Ack is so easy that it almost feels wrong: Grab Ack in a single Perl file and drop it in your <code>~/bin/</code> directory. That&rsquo;s it.</p>

<p>Ack can also be installed via <a href="http://mxcl.github.io/homebrew/">Homebrew</a>, but I prefer the <em>drop it in ~/bin</em> installation since everything is contained in one file. Here&rsquo;s a more detailed version of the steps:</p>

<ol>
<li>If you don&rsquo;t have one already, create <code>~/bin/</code> as a subdirectory of your home directory.</li>
<li>Grab a the single-file copy of Ack from <a href="http://beyondgrep.com/">http://beyondgrep.com/ </a></li>
<li>Drop the single-file copy of Ack into a file called <code>~/bin/ack</code></li>
<li>Make sure that <code>$HOME/bin:</code> appears at the beginning of your <code>$PATH</code> environment variable.</li>
</ol>


<p>At this point you should be running Ack v2.0 or later. To verify:</p>

<p>```bash
~/bin$ ack &mdash;version
ack 2.02 (git commit f3c8827)
Running under Perl 5.12.4 at /usr/bin/perl</p>

<p>Copyright 2005-2013 Andy Lester.</p>

<p>This program is free software.  You may modify or distribute it
under the terms of the Artistic License v2.0.</p>

<p>~/bin$
```</p>

<p>Installation complete. Now, let&rsquo;s take Ack for a spin.</p>

<h4>Using Ack at the Command Line</h4>

<p>For a sample project, let&rsquo;s use <code>demo_app</code> from Michael Hartl&rsquo;s <a href="http://rubyonrailstutorial.com">Ruby on
Rails Tutorial</a>. Imagine that you want
to find every file in the project that references <code>user_id</code>. How would
you do that?
<img src="http://RayHightower.com/images/ack_user_id.png" align="center" height="650" width="887" alt="Ack command line demo" title="Ack command line demo"></p>

<p>Fast, clear, and highlighted in color. Bonus: If you&rsquo;re a Vim user,
try <a href="https://github.com/mileszs/ack.vim">ack.vim</a> if you want to run Ack
without leaving your editor.</p>

<h4>The Bottom Line</h4>

<p>Ack helps devs to find things quicker without leaving the zone. Try it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Take a Raspberry Pi Screenshot]]></title>
    <link href="http://RayHightower.com/blog/2013/03/19/how-to-take-a-raspberry-pi-screenshot/"/>
    <updated>2013-03-19T20:43:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/03/19/how-to-take-a-raspberry-pi-screenshot</id>
    <content type="html"><![CDATA[<p>After you get a <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> up and running, you may want to take a few screenshots so you can share the experience with others. Here&rsquo;s how.</p>

<!--more-->


<h4>Install Scrot</h4>

<p>First, install the screenshot utility, <code>scrot</code>. Open up the LXTerminal
and type the following at the prompt:</p>

<p><code>bash
$ sudo apt-get install scrot
</code></p>

<h4>Use Scrot</h4>

<p>To take a screenshot of the whole screen:
<code>bash
$ sudo scrot
</code>
By default, the screenshot will be stored in the current directory in a file named for the numerical date and time with a <code>.png</code> extension.</p>

<p>To take a screenshot after a 10-second delay:
<code>bash
$ sudo scrot -d10
</code></p>

<h4>Learn More About Scrot</h4>

<p>To display a list of Scrot commands:
<code>bash
$ sudo scrot -h
</code>
That&rsquo;s it!</p>
]]></content>
  </entry>
  
</feed>
