<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-01-03T02:42:02-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BeagleBone Black Running Ubuntu: Part 1]]></title>
    <link href="http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1/"/>
    <updated>2014-01-02T15:59:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/01/02/beaglebone-black-ubuntu-part-1</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='/images/beaglebone-black-ubuntu-ruby-rails.jpg' width='' height='' alt='BeagleBone Black running Ubuntu, Ruby, &amp; Rails.' title='BeagleBone Black running Ubuntu, Ruby, &amp; Rails.'><span class='caption-text'>BeagleBone Black running Ubuntu, Ruby, &amp; Rails.</span></span></p>

<p>The above screenshot shows a BeagleBone Black running Ubuntu, Ruby, and Rails. Why Ubuntu? The Bone comes pre-installed with <a href="http://www.angstrom-distribution.org/">Ångström</a>. Why not stick with Ångström?</p>

<p>My opinion: The factory standard is fine, but it&rsquo;s always good to have options. Here&rsquo;s why I decided to try Ubuntu on the BeagleBone Black:</p>

<ul>
<li>Ubuntu documentation is plentiful. Books, blogs, and videos are readily available.</li>
<li>The Ubuntu community is huge. When a dev runs into an Ubuntu-related snag, it&rsquo;s likely that another dev has encountered a similar problem, and they can collaborate on a solution.</li>
<li>Ubuntu is the distro that I&rsquo;m most familiar with. <a href="http://wisdomgroup.com">WisdomGroup</a> uses Ubuntu for multiple projects. With a common operating system, knowledge gained in one environment is immediately useful in another.</li>
<li>Prepping for <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a>, the 64-core single-board computer that will cost about two hundred bucks. The Parallella is currently in short supply. When it becomes available, it will run Ubuntu. Experience with other single-board computers, especially those running Ubuntu, will prove useful.</li>
</ul>


<p>This article will show how to install Ubuntu on the BeagleBone Black. <em>Gotchas</em> will be pointed out along the way. Where possible, I will explain the reasons behind my decisions so that you can make different choices if you like.</p>

<!--more-->


<p>For a comparable examination of the Raspberry Pi, take a look at <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Ruby on Raspberry Pi</a>.</p>

<h3>Sudo Disclaimer: You Could Destroy Everything</h3>

<p>Procedures described here will ask you to use the <code>sudo</code> command. <a href="http://xkcd.com/149/">Sudo endows users with great power</a>. You could destroy all of the data on your computer by using <code>sudo</code> incorrectly. Further, since technology changes rapidly, everything you see here could be out of date by the time you read this. Please be careful, and double-check these steps through your own sources.</p>

<h3>First Gotcha: Ubuntu 13 on the Bone</h3>

<p>As of this writing, Ubuntu 12 runs well on the BeagleBone Black, but Ubuntu 13 does not. My Ubuntu 13 installation appeared to be successful, but the Ubuntu 13 GUI hung up immediately after login. The Ubuntu 13 command line interface worked fine.</p>

<p>A quick search on Google reveals that others encountered similar roadblocks with version 13. One successful Bone/13 installation was used via SSH, not interactively via keyboard and GUI. Hopefully this will change with future updates. Or, since we&rsquo;re dealing in the open source world, maybe I can pitch in and help.</p>

<p>Due to the issues encountered with version 13, everything in this article will focus on Ubuntu 12.</p>

<h3>Materials Needed for Installing Ubuntu 12</h3>

<p>In addition to the BeagleBone Black, the following items should be gathered before installation:</p>

<ul>
<li>Micro SD card of at least 8GB. It&rsquo;s possible to perform the installation with a 4GB card, but that won&rsquo;t leave much room for Ubuntu applications.</li>
<li>SD card reader/writer. Recent versions of Apple&rsquo;s MacBook Pro come with an SD reader/writer built in.</li>
<li>SD to Micro-SD card adapter. The Bone is designed for micro SD, and the MacBook Pro is designed for full-sized SD. Some micro SD packages come with the adapter.</li>
<li>A monitor that accepts HDMI input.</li>
<li>Micro HDMI to HDMI adapter. The Bone uses micro HDMI for video output, but your monitor probably uses full-sized HDMI.</li>
<li>External 5V power adapter for the Bone. Personally, I trust the standard 5v power input more than I trust the power provided via USB. One never knows if USB can provide sufficient (and stable) amperage for a circuit board. Power fluctuations can lead to strange behavior, including video flickering.</li>
<li>Ethernet cable with RJ-45 ends.</li>
<li>A fast internet connection.</li>
</ul>


<h3>Hombrew Required</h3>

<p>Homebrew is the easiest way to install &lsquo;nix utilities on Mac OS X. We need Homebrew in order to install some of the utilities needed to burn the SD card. The one-line Homebrew installation command is given on the  <a href="http://brew.sh/">Homebrew site</a>.</p>

<p>Each time we use Homebrew, we run <code>$ brew doctor</code> and <code>$ brew update</code> to make sure the packages are up-to-date.</p>

<p><code>``bash
$ brew doctor
Warning: Your Homebrew is outdated.
You haven't updated for at least 24 hours, this is a long time in brewland!
To update Homebrew, run</code>brew update`.</p>

<p>$ brew update
Updated Homebrew from a2e44659 to 4c7bc9ec.</p>

<p>$ brew doctor
Your system is ready to brew.
```</p>

<h3>The xz Extraction Utility</h3>

<p>Disk image files are downloaded in a compressed format. We need the <code>xz</code> utility in order to extract the files into something usable. If you already have Homebrew installed, this command will install <code>xz</code> for you.</p>

<p><code>bash
$ brew install xz
</code></p>

<h3>Test the BeagleBone Black First</h3>

<p>Power up your BeagleBone Black and make sure it runs with the built-in Ångström Linux installation. One great thing about the Bone is that it will <a href="/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">boot to the Ångström GUI</a> straight out of the box, with no prior configuration.</p>

<p>If the GUI boots, then you&rsquo;re in good shape.</p>

<p>If the GUI doesn&rsquo;t boot, it may have been damaged in a prior experiement. Embarassing note: I started looking for a way to install Ubuntu on the Bone because I broke my Ångström installation. What can I say&hellip; I learn more from destructive experiments. Faced with a non-booting Bone, I had two choices.</p>

<ol>
<li>Re-build Ångström.</li>
<li>Try something different, like Ubuntu.</li>
</ol>


<p>Option two worked well!</p>

<h3>Prep the SD Card</h3>

<p>Apple&rsquo;s Disk Utility is a convenient tool for wiping the SD card.  Standard warnings about any disk utility apply. Double-check everything, and make sure you&rsquo;re wiping the right volume, or you could lose all of your data.</p>

<p>Next, download the Ubuntu 12.04 image from <a href="http://s3.armhf.com/debian/precise/bone/ubuntu-precise-12.04.3-armhf-3.8.13-bone30.img.xz">http://armhf.com</a>.</p>

<p>Extract the image using the <code>xz</code> utility.
<code>bash
$ xz ubuntu-precise-12.04.3-armhf-3.8.13-bone30.img.xz
</code></p>

<p>The extracted image will have a <code>.img</code> file extension. We will use the <code>dd</code> utility to burn the disk image to the SD card. But first, we need to determine the designation of the SD card.</p>

<p>Additional details for all of the above are at <a href="http://www.armhf.com/index.php/boards/beaglebone-black/#precise">http://armhf.com</a>.</p>

<h3>Find the SD Card Designation</h3>

<p>In order to burn the SD card, we need to make sure we target it correctly. Here&rsquo;s how to figure out which device to target.</p>

<p><code>$ diskutil list</code> will show all of the partitions mounted on the system.</p>

<p><code>bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *500.3 GB   disk0
   1:                        EFI                         209.7 MB   disk0s1
   2:                  Apple_HFS Macintosh HD            499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *8.0 GB     disk1
</code>
I happen to know that my SD Card is 8.0 GB in capacity, and my system also has a 500 GB SSD. The goal is to burn the SD card while leaving the 500 GB SSD (home of the Mac OS X operating system and all of my data) intact. From the <code>$ diskutil list</code> report, I can see that the SD card&rsquo;s designation <em>in my system</em> is <code>/dev/disk1</code>.</p>

<p>Note the italicized words <em>in my system</em>. Your system is probably different, especially if you have a DVD drive or a second hard drive. I have neither of those. The SD card&rsquo;s designation will be different in each system where it is mounted depending on the number and location of the drives that are already there.</p>

<p>Now that we know the SD card&rsquo;s designation, we can unmount it. We unmount the drive (but leave the card inserted in the reader) so that it can be written with the Ubuntu disk image.</p>

<p><code>bash
$ diskutil unmountDisk /dev/disk1
Unmount of all volumes on disk1 was successful
</code></p>

<p>Looks like the SD card was unmounted successfully. Now we can write the
Ubuntu image with the <code>dd</code> utility.</p>

<h3>Writing the Ubuntu Image</h3>

<p>The following command will write the decompressed Ubuntu image to the SD
card.</p>

<p>```bash
$ sudo dd bs=1m if=ubuntu-precise-12.04.3-armhf-3.8.13-bone30.img of=/dev/disk1</p>

<p>```</p>

<p>Note that it may take up to an hour for the image to be written.</p>

<p>One drawback of using the command line is that there is no gauge to tell you how much progress the utility is making. Fortunately, I stumbled upon a way to measure progress at <a href="http://elinux.org">eLinux.org</a>. While the command line utility is running, and while that window has focus, type <code>control-T</code>. A few seconds later, the terminal window will show a brief activity report.</p>

<p>Here&rsquo;s a report from the first time I struck <code>Control-T</code> &hellip;</p>

<p><code>bash
load: 2.03  cmd: dd 75608 uninterruptible 0.00u 0.54s
40+0 records in
39+0 records out
</code></p>

<p>We can strike <code>Control-T</code> again to receive additional updates. The numbers will tell us if we are making progress. Don&rsquo;t get carried away with <code>Control-T</code>. A watched pot never boils :&ndash;)</p>

<h3>Booting with the New SD Card</h3>

<p>The terminal will return to the command prompt after the Ubuntu image has been written to the SD card. Now it&rsquo;s time to boot with the new image.</p>

<ol>
<li>Eject the SD card from the Mac.</li>
<li>Remove power from the BeagleBone Black, and insert the micro SD card.</li>
<li>Note the location of the &ldquo;boot&rdquo; button on the Bone. It&rsquo;s the micro switch closest to the USB port. We will need to hold this switch down while powering up the Bone.</li>
</ol>


<p>A few notes about item #3. It takes some juggling to hold down a micro switch while plugging in power to the board. I found it easier to plug the power adapter into a powered-off surge suppressor, hold down the microswitch, and then power-on the surge suppressor with my elbow.  Sounds ridiculous, but it worked.</p>

<p>About sixty seconds after boot, the Linux penguin appeared in the upper left corner of the Bone display. And then the login prompt appeared.</p>

<p>Another note about the &ldquo;boot&rdquo; switch: It looks like the Bone will boot into the SD&rsquo;s operating system without the micro switch if the switch was used in the previous boot. I havn&rsquo;t rebooted enough times to test this, yet.</p>

<h3>Default Credentials for Ubuntu on BeagleBone Black</h3>

<p>Ubuntu&rsquo;s default BeagleBone Black login credentials are shown here because I always end up hunting for these when I need them. It&rsquo;s much easier to have information at one&rsquo;s fingertips.</p>

<p><code>bash
login: ubuntu
pw: ubuntu
</code></p>

<h3>End of Part One</h3>

<p>This marks the end of part one of this post about BeagleBone Black and Ubuntu.</p>

<p>Part two will cover&hellip;</p>

<ul>
<li>Getting the GUI running, including a disk resizing <em>gotcha</em>.</li>
<li>Installing Ruby, including an RVM <em>gotcha</em>.</li>
<li>Installing Rails, and how to handle a JavaScript runtime <em>gotcha</em>.</li>
</ul>


<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew, Ruby, and Git]]></title>
    <link href="http://RayHightower.com/blog/2013/12/06/homebrew-ruby-and-git/"/>
    <updated>2013-12-06T17:30:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/12/06/homebrew-ruby-and-git</id>
    <content type="html"><![CDATA[<p>I encountered some interesting behavior between <a href="http://brew.sh/">Homebrew</a> and Ruby this afternoon. I can describe what happened, but I don&rsquo;t yet understand why. Perhaps another member of the dev community can shed some light.</p>

<h3>Upgrading to Git 1.8.5</h3>

<p>Earlier today I learned that Git 1.8.5 was available. So I decided to upgrade. Since I use Homebrew for package management, it was time for <code>$ brew doctor</code> and <code>$ brew update</code> as well.</p>

<p><code>``bash
$ brew doctor
Error: Homebrew doesn't know what compiler versions ship with your version
of Xcode (5.0.2). Please</code>brew update<code>and if that doesn't help, file
an issue with the output of</code>brew &mdash;config`:
  <a href="https://github.com/mxcl/homebrew/issues">https://github.com/mxcl/homebrew/issues</a></p>

<p>Thanks!
Warning: Your Homebrew is outdated.
You haven&rsquo;t updated for at least 24 hours, this is a long time in brewland!
To update Homebrew, run <code>brew update</code>.</p>

<p>~/Code/Ruby/apps$
```</p>

<p><code>$ brew doctor</code> has spoken. Time to update Homebrew.</p>

<!--more-->


<h3>Homebrew First. Git Later.</h3>

<p>Updating Homebrew is as simple as <code>$ brew update</code>, right?</p>

<p><code>``bash
~$ brew update
Warning: Could not tap homebrew/dupes/ant over mxcl/master/ant
Warning: Could not tap homebrew/dupes/cvs over mxcl/master/cvs
Error: undefined method</code>to_sym' for nil:NilClass
Please report this bug:</p>

<pre><code>https://github.com/mxcl/homebrew/wiki/troubleshooting
</code></pre>

<p>/usr/local/Library/Homebrew/cmd/update.rb:123:in <code>report'
/usr/local/Library/Homebrew/cmd/update.rb:121:in</code>each_line'
/usr/local/Library/Homebrew/cmd/update.rb:121:in <code>report'
/usr/local/Library/Homebrew/cmd/update.rb:35:in</code>update'
/usr/local/Library/brew.rb:95:in `send'
/usr/local/Library/brew.rb:95</p>

<p>~/Code/Ruby/apps$
<code>``
</code>$ brew update` choked. Further, Homebrew said that I should report a bug. But something smelled fishy. I decided to try running Homebrew under Ruby 2.0.0 instead of Ruby 1.9.3, the default on my system. Running <a href="/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a> makes bouncing between Ruby versions a snap.</p>

<p>```bash
~$ rvm use 2.0.0</p>

<p>```</p>

<p>That did the trick. <code>$ brew update</code> worked fine, and <code>$ brew doctor</code>
confirmed it.</p>

<p>```bash
~$ brew update
Updated Homebrew from 69a83176 to 691c72bf.</p>

<p>…</p>

<p>~$ brew doctor
Your system is ready to brew.</p>

<p>```</p>

<h3>Back to Git</h3>

<p>Now that the yak is well-shaved, we&rsquo;re ready to upgrade Git.</p>

<p>```bash
~$ brew upgrade git
==> Upgrading 1 outdated package, with result:
git 1.8.5.1
==> Upgrading git
==> Downloading <a href="https://downloads.sf.net/project/machomebrew/Bottles/git-1.8.5.1.mountain_lion.bottle.tar.gz">https://downloads.sf.net/project/machomebrew/Bottles/git-1.8.5.1.mountain_lion.bottle.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring git-1.8.5.1.mountain_lion.bottle.tar.gz
==> Caveats
The OS X keychain credential helper has been installed to:
  /usr/local/bin/git-credential-osxkeychain</p>

<p>The &lsquo;contrib&rsquo; directory has been installed to:
  /usr/local/share/git-core/contrib</p>

<p>Bash completion has been installed to:
  /usr/local/etc/bash_completion.d</p>

<p>zsh completion has been installed to:
  /usr/local/share/zsh/site-functions
==> Summary
  /usr/local/Cellar/git/1.8.5.1: 1333 files, 30M
```</p>

<p>Mission accomplished. Git has been upgraded to 1.8.5.</p>

<p>```bash
~$ git &mdash;version
git version 1.8.5.1</p>

<p>~$
```</p>

<h3>Why This Matters</h3>

<p>I&rsquo;m posting this article as a note to my future self. Error messages sometimes lie. They don&rsquo;t mean to lie, but an error messsage can only give you its best guess based on what it <em>thinks</em> is happening on your system. It&rsquo;s up to the developer to sniff out the rest of the clues.</p>

<p>After decades in this industry, I&rsquo;m still learning this lesson :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awesome_print_motion for RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/11/25/awesome-print-motion-for-rubymotion/"/>
    <updated>2013-11-25T15:08:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/25/awesome-print-motion-for-rubymotion</id>
    <content type="html"><![CDATA[<h3>The Problem</h3>

<p>Let&rsquo;s say we&rsquo;re building a version of Atari&rsquo;s <a href="/blog/2013/02/26/atari-pong-rubymotion-objective-c/">Pong in RubyMotion</a>. We&rsquo;re debugging an issue with the paddles; they don&rsquo;t line up the way we want them to. Time to examine the playing field via the RubyMotion console.</p>

<p><code>bash
pong-rm $ rake
</code></p>

<p>Mouse over the playing field and <code>Command-click</code> to grab the entire playing field object in the RubyMotion console. Confirm that you grabbed the object by typing <code>self</code> at the console prompt.</p>

<p>```ruby
(UIView(#9d820c0, [[0.0, 0.0], &hellip;)> self</p>

<p>=> UIView(#9d820c0, [[0.0, 0.0], [480.0, 320.0]]), child of UIView(#c876920)
```</p>

<p>And then, to see what objects are on the playing field, use
<code>self.subviews</code> to show the subviews array of the current object.</p>

<p><code>ruby
(UIView(#9d820c0, [[0.0, 0.0], ...)&gt; self.subviews
=&gt; [UIView(#9d82430, [[357.0, 175.0], [50.0, 50.0]]), child of
UIView(#9d820c0), PaddleView(#9d82580, [[410.0, 190.0], [20.0, 100.0]]),
child of UIView(#9d820c0), PaddleView(#9d82970, [[10.0, 190.0], [20.0,
100.0]]), child of UIView(#9d820c0), ScoreLabel(#9d82a80, [[110.0, 9.0],
[20.0, 42.0]], text: "1"), child of UIView(#9d820c0),
ScoreLabel(#9d83c90, [[350.0, 9.0], [20.0, 42.0]], text: "0"), child of
UIView(#9d820c0)]
(UIView(#9d820c0, [[0.0, 0.0], ...)&gt;
</code></p>

<p>This blob of text is difficult for the human brain to parse. Now, let&rsquo;s try it with the <code>awesome_print_motion</code> gem.</p>

<!--more-->


<p>```ruby
(UIView(#9d820c0, [[0.0, 0.0], &hellip;)> ap(self.subviews)
[</p>

<pre><code>[0] UIView(#9d82430, [[308.0, 118.0], [50.0, 50.0]]), child of UIView(#9d820c0),
[1] PaddleView(#9d82580, [[410.0, 190.0], [20.0, 100.0]]), child of UIView(#9d820c0),
[2] PaddleView(#9d82970, [[10.0, 190.0], [20.0, 100.0]]), child of UIView(#9d820c0),
[3] ScoreLabel(#9d82a80, [[110.0, 9.0], [39.0, 42.0]], text: "61"), child of UIView(#9d820c0),
[4] ScoreLabel(#9d83c90, [[350.0, 9.0], [20.0, 42.0]], text: "0"), child of UIView(#9d820c0)
</code></pre>

<p>]
=> nil
(UIView(#9d820c0, [[0.0, 0.0], &hellip;)></p>

<p>```</p>

<p>Much easier to read. The structure of the <code>subviews</code> array is clear. Each element of the array has an easy-to-read index. Debugging time is reduced.</p>

<h3>How to Install awesome_print_motion</h3>

<p>RubyMotion uses bundler. So we start by refering to <code>awesome_print_motion</code> in our gemfile.</p>

<p><code>ruby
gem 'awesome_print_motion'
</code></p>

<p>In the app&rsquo;s <code>Rakefile</code>, there are two possible ways to proceed. The preferred way is to use the following lines to tell the app to require every gem mentioned in Bundler&rsquo;s Gemfile:</p>

<p><code>ruby
begin
  require 'bundler'
  Bundler.require
rescue LoadError
end
</code></p>

<p>The older way is to manually add a <code>require</code> statement to the Rakefile.</p>

<p><code>ruby
require 'ap'
</code>
Personally, I prefer the newer way because it automatically
requires all of the gems mentioned in the <code>Gemfile</code>. The odds of a
typo-induced error are reduced.</p>

<h3>How to Use awesome_print_motion</h3>

<p>To use the new gem, start the app and explore away. Any time you want to
run output through the <code>awesome_print_motion</code> gem, send the code as a
parameter to the <code>ap</code> method like so&hellip;</p>

<p>```ruby</p>

<blockquote><p>ap(self.subviews)
```
&hellip; and the output will be easier to read.</p></blockquote>

<h3>Acknowledgements</h3>

<p>Thank you <a href="http://www.dvorkin.net/">Michael Dvorkin</a> for adding RubyMotion support to your <a href="http://rubygems.org/gems/awesome_print">awesome_print</a> gem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion to Build Something Useful]]></title>
    <link href="http://RayHightower.com/blog/2013/11/23/using-rubymotion-to-build-something-useful/"/>
    <updated>2013-11-23T14:11:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/23/using-rubymotion-to-build-something-useful</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.meetup.com/Chicago-RubyMotion/">Chicago RubyMotion User Group</a> held its inaugural meeting this week. Thank you <a href="http://twitter.com/dastels">Dave Astels</a> for organizing the group and for asking me to present. Thanks also to <a href="http://devbootcamp.com">Dev Bootcamp</a> for hosting the event.</p>

<p>Slides are embedded here:</p>

<center><script async class="speakerdeck-embed" data-id="f0c21e7036e10131765f62eb06398856" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<!--more-->


<h3>Doing RubyMotion in Chicago? Be There!</h3>

<p>If you&rsquo;re using RubyMotion and you&rsquo;re located in the Chicago area, check out the <a href="http://www.meetup.com/Chicago-RubyMotion/">Chicago RubyMotion</a> group. The group attracts devs who are running into the same challenges as you. Devs who work with other devs tend to learn more over time.</p>

<p>See you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an OS X App With RubyMotion]]></title>
    <link href="http://RayHightower.com/blog/2013/11/01/building-an-os-x-app-with-rubymotion/"/>
    <updated>2013-11-01T00:15:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/11/01/building-an-os-x-app-with-rubymotion</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/time-machine-backup-disks.png' width='' height='' alt='Redundancy rocks.' title='Redundancy rocks.'><span class='caption-text'>Redundancy rocks.</span></span>
<a href="/blog/2012/10/29/building-ios-apps-with-ruby-motion/">RubyMotion</a>&rsquo;s OS X support enabled me to solve a small problem yesterday.  Here&rsquo;s the story.</p>

<h3>Background on Backup</h3>

<p>No matter how much money we spend on computers, the data we create is worth more. The best data protection employs several levels of redundancy.</p>

<p>My backup system starts with Apple&rsquo;s <a href="http://www.apple.com/findouthow/mac/#timemachinebasics">Time Machine</a>, which handles first level backups painlessly in the background. Time machine is even more effective when multiple disks are used. I like to combine that with online solutions. Redundancy is a good thing.</p>

<p>USB-attached drives work great with Time Machine. I found that Time Machine was inconsistent over WiFi, and when it failed, troubleshooting took too much time. That was a few years ago and things have probably improved since then. I&rsquo;ve never had to troubleshoot a USB-attached Time Machine drive. USB just works. Except when it doesn&rsquo;t. And that&rsquo;s where RubyMotion proved helpful.</p>

<!--more-->


<h3>Disconnecting USB in a Hurry</h3>

<p>My only problem with USB-attached drives comes when I need to leave my desk in a hurry. You may have seen this message before:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/disk-not-ejected-properly.png' width='' height='' alt='In a hurry to eject?' title='In a hurry to eject?'><span class='caption-text'>In a hurry to eject?</span></span></p>

<p>All three of my USB drives are attached through a single USB hub. Yanking the cable while running for a meeting is… bad! Forgetting to eject even one of the USB drives is also bad.</p>

<p>I solved the problem about a year ago by writing a command line tool that ejects all three drives with one double-click of an icon. Yesterday I deciced to improve my command line tool with RubyMotion.</p>

<h3>Ejecting in a Hurry</h3>

<p><code>EjectDisks</code> is a simple OS X program written with the RubyMotion toolchain for Mac OS X. It uses the <code>osx-status-bar-app-template</code> gem created by <a href="https://github.com/kickcode/osx-status-bar-app-template">Elliott Draper</a>. Here&rsquo;s a 10-second demo.</p>

<center><iframe name="eject-disks-osx" src="http://RayHightower.com//player.vimeo.com/video/78349497" width="560" height="315" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<h3>The Code</h3>

<p>The latest version of the EjectDisk code is on <a href="https://github.com/RayHightower/EjectDisks">GitHub</a>. The <code>app_delegate.rb</code> file appears below.</p>

<p>```ruby
class AppDelegate
  attr_accessor :status_menu</p>

<p>  def applicationDidFinishLaunching(notification)</p>

<pre><code>@app_name = NSBundle.mainBundle.infoDictionary['CFBundleDisplayName']

@status_menu = NSMenu.new

@status_item = NSStatusBar.systemStatusBar.statusItemWithLength(NSVariableStatusItemLength).init
@status_item.setMenu(@status_menu)
@status_item.setHighlightMode(true)
@status_item.setTitle(@app_name)

@status_menu.addItem createMenuItem("About #{@app_name}", 'orderFrontStandardAboutPanel:')
@status_menu.addItem createMenuItem("Custom Action", 'pressAction')
@status_menu.addItem createMenuItem("Eject Three Disks", 'ejectThreeDisks')
@status_menu.addItem createMenuItem("Say Something", 'sayDroid')
@status_menu.addItem createMenuItem("Sing", 'singSomething')
@status_menu.addItem createMenuItem("Greetings", 'greetings')
@status_menu.addItem createMenuItem("Quit", 'terminate:')
</code></pre>

<p>  end</p>

<p>  def createMenuItem(name, action)</p>

<pre><code>NSMenuItem.alloc.initWithTitle(name, action: action, keyEquivalent: '')
</code></pre>

<p>  end</p>

<p>  def pressAction</p>

<pre><code>alert = NSAlert.alloc.init
alert.setMessageText "Action triggered from status bar menu"
alert.addButtonWithTitle "OK"
alert.runModal
</code></pre>

<p>  end</p>

<p>  def sayDroid</p>

<pre><code>%x(say -v cello droid)
</code></pre>

<p>  end</p>

<p>  def singSomething</p>

<pre><code>%x(say -v cello da da da da da da da da da da da da da da da da da da da da da da da da da da)
</code></pre>

<p>  end</p>

<p>  def greetings</p>

<pre><code>%x(say -v cello Greetings to the members of Chippewa Valley Code Camp &amp;)
alert = NSAlert.alloc.init
alert.setMessageText "Greetings to the members of Chippewa Valley Code Camp!"
alert.addButtonWithTitle "OK"
alert.runModal
</code></pre>

<p>  end</p>

<p>  def ejectThreeDisks</p>

<pre><code>alert = NSAlert.alloc.init
response = %x(/usr/sbin/diskutil eject SiiGBlack) + "\n"
response += %x(/usr/sbin/diskutil eject Ultra3TB) + "\n"
response += %x(/usr/sbin/diskutil eject WDSilver) + "\n"
alert.setMessageText response
alert.addButtonWithTitle "OK"
alert.runModal
</code></pre>

<p>  end
end
```</p>

<h3>Next Steps</h3>

<p>Not everything in the EjectDisks tool is business-related. Do we really need to include a greeting to the members of the <a href="http://chippewavalleycodecamp.com/">Chippewa Valley Code Camp</a>?  Yes, we do!</p>

<p>On the serious side, the app should handle disk ejection as a background process. It&rsquo;s not good to tie up the system for a simple task. Look for a forked process in a future version of the app.</p>

<p><em>Update: This article should have included instructions on how to run the executable on any Mac OS X system without having RubyMotion installed. The omission is corrected in a later blog post, <a href="/blog/2013/11/11/os-x-and-rubymotion-finishing-up/">OS X and RubyMotion, Finishing Up</a>.</em></p>
]]></content>
  </entry>
  
</feed>
