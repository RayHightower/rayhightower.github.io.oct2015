<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2015-02-16T13:16:56-06:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Looking Inside the Pygments Plugin]]></title>
    <link href="http://RayHightower.com/blog/2014/12/31/looking-inside-pygments/"/>
    <updated>2014-12-31T16:18:29-06:00</updated>
    <id>http://RayHightower.com/blog/2014/12/31/looking-inside-pygments</id>
    <content type="html"><![CDATA[<p>This blog uses <a href="https://rubygems.org/gems/pygments.rb">pygments.rb</a> for syntax highlighting. Recently <code>pygments.rb</code> stopped working, so I had to dig inside to determine the problem and apply a solution.</p>

<p>Full disclosure: Pygments didn&rsquo;t simply stop working. I applied updates related to Octopress and Lunr.js, and then it stopped working. So the root cause is me! Rather than back-out the updates, I decided to push forward because Lunr.js will improve the search experience for visitors. Search options will be discussed in a future post.</p>

<h3>Starting With the Error Message</h3>

<p>As with all <a href="http://octopress.org/">Octopress</a> based blogs, the <code>$ rake generate</code> command creates a new set of static pages every time the command gets run. Normally the process is smooth. Here&rsquo;s the error message that resulted this morning.</p>

<p>&#8220;` bash</p>

<p>~$ rake generate</p>

<p>&hellip;</p>

<p>jekyll 2.0.3 | Error:  Pygments can&rsquo;t parse unknown language: </p>.</p>

<p>$</p>

<p>&#8220;`</p>

<p>What unknown language? Something was fishy. Fortunately, <code>pygments</code> is an open source plugin. Solving the problem was non-trivial, but doable.</p>

<!--more-->


<h3>Exploring Pygments Internals</h3>

<p>Google, Stack Overflow, and the Octopress documentation gave clues on where to explore. Adding a few lines to <code>source/plugins/pygments_code.rb</code> provided insights on what <code>pygments</code> was &ldquo;thinking&rdquo;.</p>

<p>&#8220;` ruby</p>

<p>require &lsquo;pygments&rsquo;
require &lsquo;fileutils&rsquo;
require &lsquo;digest/md5&rsquo;</p>

<p>PYGMENTS_CACHE_DIR = File.expand_path(&lsquo;../../.pygments-cache&rsquo;, <strong>FILE</strong>)
FileUtils.mkdir_p(PYGMENTS_CACHE_DIR)</p>

<p>module HighlightCode
  def self.highlight(str, lang)</p>

<pre><code># Next three lines let us see what pygments "thinks".
print "\n\nrth_str = #{str}"
print "\nrth_lang = #{lang}"
print "\nrth_file = #{__FILE__}\n\n"

...
</code></pre>

<p>end</p>

<p>&#8220;`</p>

<h3>Observing the Results, Applying a Solution</h3>

<p>Next step: Run <code>$ rake generate</code> and see what happens. Turns out that the lastest version of <code>pygments</code> halted for two reasons:</p>

<ul>
<li>Some of my older blog posts did not contain a space between the triple-backtick characters and the name of the language being highlighted. Earlier versions of <code>pygments</code> did not care, but the current version is a stickler.</li>
<li><code>pygments</code> appears to want a blank line between any triple-backtick line and any other text in the blog post.</li>
</ul>


<p>Vim-fu allowed me to apply solutions with minimal manual work. And now <code>pygments</code> works well.</p>

<p>On to search, to be discussed in a future blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be Awesome. Tackle Big League Problems at WindyCityRails]]></title>
    <link href="http://RayHightower.com/blog/2014/08/05/be-awesome-tackle-big-league-problems-at-windycityrails/"/>
    <updated>2014-08-05T16:21:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/05/be-awesome-tackle-big-league-problems-at-windycityrails</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/big_league_problems_windycityrails.jpg' width='' height='' alt='Be awesome.' title='Be awesome.'><span class='caption-text'>Be awesome.</span></span>
Do you see yourself in any of these scenarios?</p>

<ul>
<li><p>You have already built a successful Rails app. Now that you&rsquo;re &ldquo;done&rdquo;, you know you can make it better, but you&rsquo;re not sure how. You want to take your skills to the next level.</p></li>
<li><p>You recently graduated from <a href="http://devbootcamp.com">Dev Bootcamp</a>, <a href="http://thestarterleague.com">Starter League</a>, <a href="http://www.mobilemakers.co/">Mobile Makers</a> or another school. You&rsquo;re ready to meet and interact with your next generation of mentors.</p></li>
<li><p>You are no longer a beginner. You have seen <em>advanced</em> developers in action, and you are determined to get there yourself.</p></li>
<li><p>Software development is relatively new to you, and you built a successful track record in another profession. You want to meet people who can help you accelerate through the beginner phase so you can launch something useful.</p></li>
</ul>


<p>Common thread: It&rsquo;s time to unleash the awesomeness in your bones. You want to take your skills to the next level, and you are ready to tackle <em>Big League Problems</em>. <a href="http://windycityrails.org">WindyCityRails</a> is for you.</p>

<!--more-->


<h3>What are Big League Problems?</h3>

<p>You might think of a big league problem as a good problem. For example, the Rails app you built is pulling in customers, and you&rsquo;re bumping into the limits of your software architecture. Who knew that so many people would buy from you?</p>

<p>Now&hellip; How do you scale? Do you buy more hardware, change your architecture, choose a new platform, or some combination of these? <a href="http://www.windycityrails.org/schedule/#williams">Dr. Nic Williams</a>, <a href="http://www.windycityrails.org/schedule/#shirai">Brian Shirai</a>, <a href="http://www.windycityrails.org/schedule/#light">Evan Light</a>, <a href="http://www.windycityrails.org/schedule/#menard">Mark Menard</a> deal with scaling problems. Learn from them.</p>

<p>Maybe you built a gem to solve a problem for yourself, and now you want to release your gem to the world. What legal questions do you need to consider? Did Rails face similar challenges in the beginning? <a href="http://www.windycityrails.org/schedule/#saper">Daliah Saper</a> is an attorney who specializes in intellectual property and other open source software issues. Put her team to work for you.</p>

<p>How about security? Have you outgrown the <code>Devise</code> gem? Or do you simply need to know more about <code>Devise</code> internals so that you can use it more effectively? Maybe it&rsquo;s time to abandon username/password logins altogether and go with SQRL. <a href="http://www.windycityrails.org/schedule/#love">Justin Love</a> and <a href="http://www.windycityrails.org/schedule/#mazza">Lucas Mazza</a> might have some ideas for you.</p>

<h3>Awesome Speakers. Awesome Audience.</h3>

<p>This year&rsquo;s WindyCityRails features the most powerful collection of speakers we&rsquo;ve ever assembled. Check out the <a href="http://www.windycityrails.org/schedule/">complete list of WindyCityRails speakers</a> and ask yourself what you can learn from each one.</p>

<p>Even better: Only 300 WindyCityRails tickets will be sold. Our speakers enjoy interacting with audience members throughout the conference. As professionals, they are always learning, too! So if you want some face time with people who understand Big League Problems (and more importantly, Big League Solutions) WindyCityRails is the place for you to be.</p>

<h3>Get Tickets Now</h3>

<p>Tickets are selling fast. Get yours now at <a href="http://www.windycityrails.org/register/">http://www.windycityrails.org/register/</a>. Use the promo code AWESOME to save $75.00 on the standard price.</p>

<p>We look forward to seeing you at WindyCityRails!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion and Memoization]]></title>
    <link href="http://RayHightower.com/blog/2014/04/12/recursion-and-memoization/"/>
    <updated>2014-04-12T10:48:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/12/recursion-and-memoization</id>
    <content type="html"><![CDATA[<blockquote><p>To iterate is human, to recurse divine.
&nbsp;<br/>
~ L. Peter Deutsch</p></blockquote>

<p>Recursion is available in many high-level languages, including Ruby. Recursive solutions can be joyfully elegant. At the same time, the pursuit of elegance can lead to unexpected performance pitfalls.</p>

<p>Fortunately, we can use optimization techniques to address performance problems before they occur. Memoization is one technique in our arsenal.</p>

<!--more-->


<h3>Before Memoization</h3>

<p>Memoization was designed to solve a particular kind of problem. Consider a method called <code>fibo(n)</code> that calculates the <em>nth</em> number of the <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci</a> sequence.</p>

<p>&#8220;` ruby</p>

<h1>Calculate the nth Fibonacci number, f(n).</h1>

<p>def fibo (n)
  if n &lt;= 1</p>

<pre><code>return n
</code></pre>

<p>  else</p>

<pre><code>value = fibo(n-1) + fibo(n-2)
return value
</code></pre>

<p>  end
end</p>

<h1>Display the Fibonacci sequence.</h1>

<p>(1..40).each do |number|
  puts &ldquo;fibo(#{number}) = #{fibo(number)}&rdquo;
end</p>

<p>&#8220;`</p>

<p>The example runs, but performance slows down as <em>n</em> gets larger. Why? Because this method re-calculates all preceeding Fibonacci numbers every time it calculates a new <code>fibo(n)</code>. When we calculate Fibonacci numbers manually, we know better. Humans are smart enough to refer to earlier work. But the <code>fibo(n)</code> method does not manage time very well.</p>

<p>Is it possible for the <code>fibo(n)</code> method to remember the results of earlier calculations so that it can avoid doing work that is already done? Yes, through <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>.</p>

<h3>Memoization</h3>

<p>Memoization means recording the results of earlier calculations so that we don&rsquo;t have to repeat the calculations later. If our code depends on the results of earlier calculations, and if the same calculations are performed over-and-over again, then it makes sense to store interim results (jot results down on a &lsquo;memo&rsquo; = memoization) so that we can avoid repeating the math.</p>

<p>The Fibonacci example can be improved through memoization as follows.</p>

<ul>
<li>Create a place to store temporary results.</li>
<li>Before performing a calculation, find out if the calculation has
already been done. If so, use the stored result.</li>
<li>If this is our first time calculating a particular <code>fibo(n)</code>, store
the results for future use.</li>
</ul>


<p>Here&rsquo;s how memoization is implemented in the Fibonacci example:</p>

<p>&#8220;` ruby</p>

<h1>Fibonacci numbers WITH memoization.</h1>

<h1>Initialize the memoization array.</h1>

<p>@scratchpad = []
@max_fibo_size = 50
(1..@max_fibo_size).each do |i|
  @scratchpad[i] = :notcalculated
end</p>

<h1>Calculate the nth Fibonacci number, f(n).</h1>

<p>def fibo (n)
  if n > @max_fibo_size</p>

<pre><code>return "n must be #{@max_fibo_size} or less."
</code></pre>

<p>  elsif n &lt;= 1</p>

<pre><code>return n
</code></pre>

<p>  elsif @scratchpad[n] != :notcalculated</p>

<pre><code>return @scratchpad[n]
</code></pre>

<p>  else</p>

<pre><code>@scratchpad[n] = fibo(n-1) + fibo(n-2)
return @scratchpad[n]
</code></pre>

<p>  end
end</p>

<h1>Display the Fibonacci sequence.</h1>

<p>(1..50).each do |number|
  puts &ldquo;fibo(#{number}) = #{fibo(number)}&rdquo;
end</p>

<p>&#8220;`</p>

<p>Walking through the code&hellip; First we create a memoization array, a place to store the pre-calculated values. In this example, <code>@scratchpad[]</code> serves as our memoization array.</p>

<p>The <code>fibo(n)</code> method is similar to the one in the earlier example, with a few subtle differences. First, we need to determine whether we&rsquo;ve already calculated a particular value. Since we initialized all elements of the <code>@scratchpad</code> array with the <code>:notcalculated</code> symbol, it&rsquo;s easy to figure out where work needs to be done. If a Fibonacci number <code>fibo(n)</code> has already been calculated, we return the value stored at <code>@scratchpad[n]</code>. Otherwise, we calculate the new <code>fibo(n)</code> and store that value at <code>@scratchpad[n]</code> for later use.</p>

<h3>Performance Comparison</h3>

<p>The performance of the two programs is compared in this 1-minute video.</p>

<center><iframe src="//player.vimeo.com/video/91841948" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<p>As the video shows, memoization is a performance booster.</p>

<h3>Sample Code</h3>

<p>Sample code related to this article can be found on <a href="https://github.com/RayHightower/fibonacci">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew Fundamentals]]></title>
    <link href="http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals/"/>
    <updated>2014-02-12T14:20:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/02/12/homebrew-fundamentals</id>
    <content type="html"><![CDATA[<p>Spend enough time developing software on Mac OS X, and you will eventually need to install libraries that were written for Unix, but not specifically for OS X. Fortunately we have <a href="http://brew.sh/">Homebrew</a>, which makes it easier to install Unix libraries on the Mac.</p>

<h3>Why Homebrew?</h3>

<p>Before installing any new software, it is helpful to have a clear view of <em>why</em> we need it.</p>

<p>Homebrew is a package manager. It differs from earlier package managers like <a href="http://www.finkproject.org/">Fink</a> and <a href="http://www.macports.org/">MacPorts</a> because it is written in Ruby and based on Git. The Ruby/Git foundation means that developers from around the planet can easily contribute to Homebrew&rsquo;s growth.</p>

<p>Before package managers, developers who needed a particular library would have to:</p>

<ul>
<li>Manually download source code for the library.</li>
<li>Manually compile using <code>gcc</code> or another compiler.</li>
<li>Resolve dependencies manually.</li>
</ul>


<p>Manually, manually, manually&hellip; The old way was long and error-prone. <a href="https://twitter.com/mxcl">Max Howell</a> created Homebrew to download, compile, and resolve dependencies automatically. Now developers can focus more attention on solving problems that are directly related to their work.</p>

<!--more-->


<h3>How to Install Homebrew</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/xcode-app-store.png' width='' height='' alt='Homebrew depends on Xcode.' title='Homebrew depends on Xcode.'><span class='caption-text'>Homebrew depends on Xcode.</span></span>
Some parts of Homebrew require Xcode, Apple&rsquo;s environment for developing software on Mac OS X. Make sure you have Xcode installed on your Mac. Xcode is available for free in the Mac App Store.</p>

<p>With Xcode installed, you can install Homebrew by pasting the following
command into a terminal window.</p>

<p>&#8220;` bash
$ ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/Homebrew/homebrew/go/install">https://raw.github.com/Homebrew/homebrew/go/install</a>)&#8221;install</p>

<p>&#8220;`
The script will walk you through the installation process. If you would like to read the script before installation, you can visit the <a href="https://github.com/Homebrew/homebrew">Homebrew repo on Github</a>.</p>

<h3>Installing Packages</h3>

<p>A list of <a href="https://github.com/Homebrew/homebrew/tree/master/Library/Formula">available Homebrew packages</a> is maintained on GitHub.</p>

<p>To install a package, say <code>imagemagick</code> for example&hellip;</p>

<p><code>bash
$ brew install imagemagick
</code></p>

<p>Before Homebrew, installing <code>imagemagick</code> was long and arduous. With Homebrew, the installation and compilation steps still take awhile. But dependencies are resolved by Homebrew, and little user interaction is required after the first step.</p>

<h3>Maintaining Homebrew</h3>

<p>Developers from around the world contribute to Homebrew, so the tool gets improved often. To check the health of your Homebrew installation, use <code>brew doctor</code>.</p>

<p><code>`` bash
$ brew doctor
Warning: Your Homebrew is outdated.
You haven't updated for at least 24 hours, this is a long time in brewland!
To update Homebrew, run</code>brew update`.</p>

<p>$</p>

<p>&#8220;`</p>

<p><code>brew update</code> will apply recent updates.</p>

<p>&#8220;` bash
$ brew update
Updated Homebrew from f83642fc to cfad513e.
==> New Formulae
&hellip;
==> Updated Formulae
&hellip;
==> Deleted Formulae
&hellip;</p>

<p>$</p>

<p>&#8220;`</p>

<h3>Looking at Packages</h3>

<p>There are several ways to view the packages that have been installed on a system via Homebrew. Use <code>brew list</code> at the command prompt to get a quick view of what Homebrew has installed.</p>

<p>Even better: <code>brew server</code> will launch a local <a href="http://www.sinatrarb.com/">Sinatra</a> app, and then you can point a browser to <code>http://localhost:4567</code> for a web-enabled view of the installed packages.</p>

<p>&#8220;` bash
$ brew server
View our tasting menu at <a href="http://localhost:4567/">http://localhost:4567/</a>
Use &ldquo;Control-C&rdquo; to exit.</p>

<p>[2014-02-12 16:33:18] INFO  WEBrick 1.3.1
[2014-02-12 16:33:18] INFO  ruby 1.8.7 (2012-02-08) [universal-darwin12.0]
== Sinatra/1.3.3 has taken the stage on 4567 for development with backup from WEBrick
[2014-02-12 16:33:18] INFO  WEBrick::HTTPServer#start: pid=96694 port=4567
&#8220;`</p>

<p><span class='caption-wrapper center'><img class='caption' src='/images/brew-server.png' width='' height='' alt='Browsing locally-installed Homebrew packages.' title='Browsing locally-installed Homebrew packages.'><span class='caption-text'>Browsing locally-installed Homebrew packages.</span></span></p>

<h3>Making Your Own Packages</h3>

<p>Homebrew is Ruby-based, so Rubyists can create their own packages.  Details can be found in the (continuously updated) <a href="https://github.com/Homebrew/">Homebrew repo on GitHub</a>.</p>

<h3>Conclusion</h3>

<p>Enjoy Homebrew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Rubinius Using RVM]]></title>
    <link href="http://RayHightower.com/blog/2014/02/06/installing-rubinius-using-rvm/"/>
    <updated>2014-02-06T18:17:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/02/06/installing-rubinius-using-rvm</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/rubinius.png">
<a href="http://rubini.us/">Rubinius</a> is an implementation of the Ruby language designed for concurrency. The lead developer of Rubinius, <a href="http://twitter.com/brixen">Brian Shirai</a>, will present Rubinius at ChicagoRuby on March 4, 2014. ChicagoRuby will follow-up with a Rubinius-themed hack night on March 12th. <a href="http://www.meetup.com/ChicagoRuby/events/114749352/">Details</a>.</p>

<p>To prepare for the Rubinius events, some people may choose to install Rubinius locally. RVM makes the process smooth.</p>

<!--more-->


<h3>RVM Recap</h3>

<p><a href="http://rayhightower.com/blog/2013/05/16/upgrading-ruby-with-rvm/">Ruby Version Manager (RVM)</a> is an awesome tool that enables developers to:</p>

<ul>
<li>install multiple versions of Ruby on one system,</li>
<li>bounce between the different versions, and</li>
<li>to do all of that with minimal headaches.</li>
</ul>


<p>Similar tools exist, but RVM is the one that has always worked for me.  If you don&rsquo;t have RVM installed, detailed installation instructions can be found at <a href="http://rvm.io">http://rvm.io</a>.</p>

<h3>Get the Latest RVM</h3>

<p>These instructions work on Mac OS X v10.8.5. The same steps will probably work on Linux, except for the references to Homebrew.</p>

<p>First, make sure you&rsquo;re running the latest version of RVM.</p>

<p>&#8220;` bash</p>

<p>$ rvm get head
Downloading <a href="https://get.rvm.io">https://get.rvm.io</a>
Downloading <a href="https://github.com/wayneeseguin/rvm/archive/master.tar.gz">https://github.com/wayneeseguin/rvm/archive/master.tar.gz</a></p>

<p>Upgrading the RVM installation in /Users/rth/.rvm/</p>

<pre><code>RVM PATH line found in /Users/rth/.bashrc /Users/rth/.zshrc.
RVM sourcing line found in /Users/rth/.bash_profile /Users/rth/.zprofile.
Migrating environment ruby-1.9.2-p290 to use with 'gem-wrappers' gem.

 …

 Installing gem-wrappers gem in 3 gemsets.
</code></pre>

<p>Upgrade of RVM in /Users/rth/.rvm/ is complete.</p>

<pre><code> …
</code></pre>

<p>In case of problems: <a href="http://rvm.io/help">http://rvm.io/help</a> and <a href="https://twitter.com/rvm_io">https://twitter.com/rvm_io</a></p>

<p>RVM reloaded!</p>

<p>$</p>

<p>&#8220;`</p>

<h3>Next, Install Rubinius</h3>

<p>As of this writing, Rubinius can operate in 1.8 language mode (the default) or 1.9 language mode. Installing in 1.9 mode requires an additional command line flag, shown below.</p>

<p>&#8220;` bash</p>

<p>$ rvm install rbx &mdash;1.9</p>

<p>&#8220;`</p>

<h3>Testing the Rubinius Installation</h3>

<p>First, let&rsquo;s make sure that RVM shows the new Rubinius (rbx) installation.</p>

<p>&#8220;` bash</p>

<p>$ rvm list</p>

<p>rvm rubies</p>

<p>=> rbx-2.2.4 [ x86_64 ]
   ruby-1.9.2-p290 [ x86_64 ]
 * ruby-1.9.3-p484 [ x86_64 ]
   ruby-2.0.0-p353 [ x86_64 ]</p>

<h1>=> &ndash; current</h1>

<h1>=* &ndash; current &amp;&amp; default</h1>

<h1>* &ndash; default</h1>

<p>$</p>

<p>&#8220;`</p>

<p>It&rsquo;s always good to have multiple ways to verify information.</p>

<p>&#8220;` bash</p>

<p>$ ruby &mdash;version
rubinius 2.0.0.n37 (1.9.3 6d611c7a 2014-02-06 JI) [x86_64-darwin12.5.0]</p>

<p>$</p>

<p>&#8220;`</p>

<p>And now, let&rsquo;s do a quick &ldquo;Hello World&rdquo; test drive using the Rubinius
version of <code>irb</code>.</p>

<p>&#8220;` bash</p>

<p>$ irb
rbx-2.2.4 :001 > p &lsquo;Hello World, from Rubinius&rsquo;
&ldquo;Hello World, from Rubinius&rdquo;
 => &ldquo;Hello World, from Rubinius&rdquo;
rbx-2.2.4 :002 > quit</p>

<p>$</p>

<p>&#8220;`</p>

<h3>Post Installation Notes</h3>

<p>The installation script found two outdated Homebrew-installed packages on my system: <code>automake</code> and <code>openssl</code>. It would have been better for me to upgrade Homebrew and related packages <em>before</em> installing Rubinius.</p>

<p>Why install Rubinius? Why do we care about concurrency? These are two questions I expect to explore through my new Rubinius installation.</p>

<h3>Come Hack With Rubinius</h3>

<p>If March 2014 finds you in the Chicago area, you&rsquo;re invited to visit ChicagoRuby for some back-to-back Rubinius action. See <a href="http://www.meetup.com/ChicagoRuby/events/114749352/">http://meetup.com/chicagoruby</a> for details.</p>
]]></content>
  </entry>
  
</feed>
