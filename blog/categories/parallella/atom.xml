<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: parallella | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/parallella/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2015-05-26T23:05:03-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Massively Parallel Parallella]]></title>
    <link href="http://RayHightower.com/blog/2015/05/27/massively-parallel-parallella/"/>
    <updated>2015-05-27T13:15:27-05:00</updated>
    <id>http://RayHightower.com/blog/2015/05/27/massively-parallel-parallella</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/supercomputer-dot-io-logo.png' width='' height='' alt='Resin.io &amp; Parallella' title='Resin.io &amp; Parallella'><span class='caption-text'>Resin.io &amp; Parallella</span></span>
<a href="http://supercomputer.io/">Supercomputer.io</a> is the first technical conference for <a href="http://rayhightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/">Parallella</a>, to be held May 30, 2015 in Tokyo, Japan.</p>

<p>You can participate even if you’re not in Tokyo. Parallella owners around the world will connect their boards via the Internet to create the most efficient supercomputer on the planet. <a href="http://resin.io/">Resin.io</a> has built a special micro-SD-card image (using <a href="https://www.docker.com/">Docker</a>) so adding your Parallella to the mix is relatively quick.</p>

<p>Detailed steps are given below, along with a few <em>gotchas</em>.</p>

<h3>First: Why?</h3>

<p>Some problems are too thorny for a typical computer to solve in a reasonable amount of time. Supercomputers might solve these problems quicker, but they&rsquo;re expensive. Solution: Link a bunch of Parallella computers together via the Internet to amplify our compute power while saving money. This shared computing technique has worked in the past:</p>

<ul>
<li><p>Through <a href="https://folding.stanford.edu/">Stanford Folding@home</a>, computer owners around the world are using excess CPU cycles to search for cures for diseases like Alzheimer’s, Huntington’s, and Parkinson&rsquo;s.</p></li>
<li><p>The <a href="http://setiathome.ssl.berkeley.edu/">SETI@home</a> project uses computers around the world to download and analyze radio telescope data to help with the search for extraterrestrial intelligence.</p></li>
</ul>


<p>The benefits are clear. Let&rsquo;s get started.</p>

<!--more-->


<p><span class='caption-wrapper middle'><img class='caption' src='/images/parallella_perspective.jpg' width='' height='' alt='Parallella: 2 ARM + 16 RISC = 18 cores.' title='Parallella: 2 ARM + 16 RISC = 18 cores.'><span class='caption-text'>Parallella: 2 ARM + 16 RISC = 18 cores.</span></span></p>

<h3>Materials Required</h3>

<p>Here&rsquo;s what you need to participate:</p>

<ul>
<li>Parallella board. You can buy one for about $100 at <a href="http://www.parallella.org/buy/">these retailers</a>.</li>
<li>Ethernet connection to the Internet.</li>
<li>4 GB (or larger) micro-SD card.</li>
</ul>


<h3><em>Gotcha:</em> Headless Parallella</h3>

<p>Something that tripped me up until I learned more: A Parallella configured for Supercomputer.io will run headless. <em>There will be no HDMI output.</em> When my HDMI monitor showed <code>No Signal</code>, I thought that I had broken something. No worries. This is just a headless system.</p>

<p>I don&rsquo;t know if that will change.</p>

<h3>Download the Image</h3>

<p><a href="http://supercomputer.io/">Download the Resin.io image</a> from the Supercomputer.io site. <a href="http://resin.io/">Resin.io</a> has created a special SD-card image (using Docker) for this project. As you can see below, I stored mine in a directory called <code>~/Downloads/Parallella$</code>.</p>

<p>&#8220;` bash
~/Downloads/Parallella$ ls -al
total 2678784
drwxr-xr-x   3 rth  staff         102 May 26 10:53 .
drwx&mdash;-r-x+ 86 rth  staff        2924 May 26 11:00 ..
-rw-r&mdash;&mdash;&ndash;@  1 rth  staff  1371537408 May 26 10:56 resin-supercomputer-0.1.0-0.0.14-Z7010-16.img</p>

<p>~/Downloads/Parallella$</p>

<p>&#8220;`</p>

<h3>Prep for Burning the SD Card</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/micro_sd_plus_adapter.jpg' width='' height='' alt='Micro SD card and adapter.' title='Micro SD card and adapter.'><span class='caption-text'>Micro SD card and adapter.</span></span>
Burning the SD card took about sixteen minutes (once I got the procedure right, as described below). Suggestion: Start the burn process, make sure it&rsquo;s progressing, and then go work on something else. A watched pot never boils.</p>

<p>Insert your SD card into your Mac&rsquo;s SD card reader, and use the Mac OS X <code>diskutil list</code> command to determine the designation of the SD card. If you use portable hard drives with your primary machine, the SD card designation could change from time to time, so it&rsquo;s important to perform this step each time you burn an SD card.</p>

<p>&#8220;` bash
~/Downloads/Parallella$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>960.2 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  959.3 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk2
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        </em>8.0 GB     disk2
   1:               Windows_NTFS Parallella              8.0 GB     disk2s1</p>

<p>~/Downloads/Parallella$</p>

<p>&#8220;`</p>

<p>From this <code>diskutil</code> report, we can see that we want to burn the SD image to <code>/dev/disk2</code>. The other device is the hard drive for my primary machine. Burning the wrong device will destroy data.</p>

<h3>Burning the Card, Skipping the <em>Gotcha</em></h3>

<p>To burn the SD card&hellip;</p>

<ol>
<li>Change into the directory where you downloaded the <code>resin.io</code> image.</li>
<li>Unmount the destination partition on the SD card.</li>
<li>Use the the <code>dd</code> command to copy the <code>resin.io</code> image to the SD card.</li>
</ol>


<p><em>Gotcha alert:</em> The first time I attempted to burn the image, I used a block size of 64k (<code>bs=64k</code>) for the <code>dd</code> operation. Big mistake on my part because the write operation took almost <em>four hours</em>. On my second attempt, I used a 1 megabyte block size (<code>bs=1m</code>) and the write operation finished in a speedy <em>16 minutes</em>. So, learn from my pain and use <code>bs=1m</code>.</p>

<p>Burn your micro-SD card like so:</p>

<p>&#8220;` bash
$ cd [directory containing the resin.io image file]</p>

<p>$ diskutil unmountDisk /dev/disk2</p>

<p>$ sudo dd if=resin-supercomputer-0.1.0-0.0.14-Z7010-16.img of=/dev/disk2 bs=1m
Password:
1308+0 records in
1308+0 records out
1371537408 bytes transferred in 960.001945 secs (1428682 bytes/sec)</p>

<p>$</p>

<p>&#8220;`</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/activity_monitor_resin_image.png' width='' height='' alt='Burn progress.' title='Burn progress.'><span class='caption-text'>Burn progress.</span></span>
If you want to make sure that <code>dd</code> is running properly, use OS X&rsquo;s <code>Activity Monitor</code> utility to monitor burn progress (see the &lsquo;burn progress&rsquo; diagram). Here&rsquo;s a quick run-through of the <code>dd</code> command options:</p>

<ul>
<li><code>sudo</code> gives you <a href="/sudo-disclaimer/">super powers</a>.</li>
<li><code>dd</code> is the &ldquo;copy and convert&rdquo; command. The letters &ldquo;dd&rdquo; have nothing to do with what the tool actually does. It&rsquo;s just a command name. And like so many things in computer science, the name might be based on a pun.</li>
<li><code>if=</code> specifies the input file. You can include the full path, or if the file is in your current directory, you can omit the path as shown in this example.</li>
<li><code>of=</code> specifies the output file. We know that the SD card is located at <code>/dev/disk</code> so that&rsquo;s where the results of this command are headed.  Note that your destination directory may differ from this one.</li>
<li><code>bs=1m</code> specifies the block size used for the destination file. 1 megabyte worked well on my machine.</li>
</ul>


<h3>About the New Resin.io Image</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella_resin_image_files.png' width='' height='' alt='Image files.' title='Image files.'><span class='caption-text'>Image files.</span></span>
The new image will be called <code>boot-parall</code> as shown in the diagram.  Depending on your particular image, your list of files may be the same as mine.</p>

<h3>Boot Parallella with the Resin.io Image</h3>

<p>Once the micro-SD card has been burned, eject it from the Mac and insert it into the Parallella. Then apply power to the Parallella.</p>

<h3>Working Headless</h3>

<p>As mentioned above, a Parallella configured this way will run headless, without HDMI output. So, how do you know if the Resin.io image is working?</p>

<p>First, get a network scanner and use it to locate your Parallella on your local area network. I use an iPad app called <a href="https://itunes.apple.com/us/app/fing-network-scanner/id430921107?mt=8">Fing</a>, but any good network scanner will do. Your Parallella will appear as <code>parallella-hdmi-resin</code>, along with its corresponding IP and MAC addresses.</p>

<p>Ping the IP address given by your network scanning tool like so:</p>

<p>&#8220;` bash
~$ ping 192.168.11.132
PING 192.168.11.132 (192.168.11.132): 56 data bytes
64 bytes from 192.168.11.132: icmp_seq=0 ttl=64 time=4.767 ms
64 bytes from 192.168.11.132: icmp_seq=1 ttl=64 time=3.694 ms
64 bytes from 192.168.11.132: icmp_seq=2 ttl=64 time=4.057 ms
64 bytes from 192.168.11.132: icmp_seq=3 ttl=64 time=3.969 ms
^C
&mdash;&ndash; 192.168.11.132 ping statistics &mdash;&ndash;
4 packets transmitted, 4 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 3.694/4.122/4.767/0.396 ms</p>

<p>~$</p>

<p>&#8220;`</p>

<p>If your Parallella is up, running, and attached to your network, your
output will look similar to what you see above. But if <code>ping</code> can&rsquo;t find
your Parallella, you&rsquo;ll get&hellip;</p>

<p>&#8220;` bash</p>

<p>~$ ping 192.168.11.199
PING 192.168.11.199 (192.168.11.199): 56 data bytes
Request timeout for icmp_seq 0
Request timeout for icmp_seq 1
Request timeout for icmp_seq 2
^C
&mdash;&ndash; 192.168.11.199 ping statistics &mdash;&ndash;
4 packets transmitted, 0 packets received, 100.0% packet loss</p>

<p>~$</p>

<p>&#8220;`</p>

<h3>Connect to Supercomputer.io</h3>

<p>After you have successfully connected your Parallella to your LAN and the Internet, visit <a href="http://supercomputer.io/#/devices/">http://supercomputer.io/#/devices/</a> from a computer other than your Parallella (because the Parallella is headless). This page will tell you when your Parallella has connected to the Supercomputer.io mothership.</p>

<p>To do this, you will need the media access control (MAC) address (also known as the hardware address) for your Parallella&rsquo;s network interface. I used my network scanning tool, Fing, to find the MAC address for the Parallella. You should be able to do the same with your network scanning tool.</p>

<p>Enter your Parallella&rsquo;s MAC address as shown below, and click <code>search</code> to determine whether your device has connected.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/parallella_no_device_yet.png' width='' height='' alt='Supercomputer.io searching for your Parallella.' title='Supercomputer.io searching for your Parallella.'><span class='caption-text'>Supercomputer.io searching for your Parallella.</span></span></p>

<p>Your first connection attempt might not be successful. It takes awhile for the first connection to happen because the Parallella might need to download software updates first.</p>

<p>It took about 30 minutes for Supercomputer.io to recognize my Parallella. The successful connection was cause for celebration:</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/parallella_device_connected.png' width='' height='' alt='Parallella connected w/MAC address and city. Celebrate!' title='Parallella connected w/MAC address and city. Celebrate!'><span class='caption-text'>Parallella connected w/MAC address and city. Celebrate!</span></span></p>

<h3>What&rsquo;s Next?</h3>

<p>I&rsquo;m not sure what&rsquo;s next for Supercomputer.io and Parallella. I would imaging that <code>Status = idle</code> will be replaced by something more interesting, and <code>images processed</code> will eventually be greater than zero.</p>

<p>Engineers at Parallella and Resin.io have done a great job so far. Now, since it&rsquo;s likely that they enjoy suggestions from the peanut gallery, here are a few ideas for them:</p>

<ul>
<li><p>Consider a version of the Resin.io image with HDMI support. Like many in the Parallella community, I&rsquo;m willing to share CPU cycles for the greater good. And I want to see what&rsquo;s running on my Parallella, too.</p></li>
<li><p>Add more metrics to the Supercomputer.io site. It&rsquo;s nice to see the number of cores that have connected to Supercomputer.io. How about a map showing where the different Parallella devices are located? How about a dashboard that shows the number of cores currently in use?</p></li>
</ul>


<p>Hats off to the Parallella and Resin.io teams. Looking forward to more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solar Powered Parallella]]></title>
    <link href="http://RayHightower.com/blog/2014/09/09/solar-powered-parallella/"/>
    <updated>2014-09-09T09:18:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/09/09/solar-powered-parallella</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper middle'><img class='caption' src='/images/parallella_solar.jpg' width='' height='' alt='Give solar power to your Parallella with a few simple components.' title='Give solar power to your Parallella with a few simple components.'><span class='caption-text'>Give solar power to your Parallella with a few simple components.</span></span></p>

<p>This article describes a simple hardware hack: Making the <a href="/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/">Parallella</a> run on solar energy.</p>

<p>Motivation: The fastest computers in the world gulp electricity at an alarming rate. For example, <a href="http://www.top500.org/system/177999">Tianhe-2</a> at the National Super Computer Center in Guangzhou, China uses 17.8 megawatts of energy per year. In dollars, that’s roughly $17 million spent on electricity spent each year, depending on how the electricity is sourced.</p>

<p>Scientists at <a href="http://www.sandia.gov/">Sandia National Laboratories</a> estimate that the earth&rsquo;s surface absorbs enough solar energy in ninety minutes to power every electrical device on the planet for a full year. A year&rsquo;s worth of energy in ninety minutes! Surely we can use some of that energy to power our supercomputers.</p>

<!--more-->


<h3>Observations</h3>

<p>The solar Parallella idea was driven by a few observations:</p>

<ul>
<li><p>Parallella only needs five watts of power, five volts at 1 ampere. The device might spike at startup or during heavy calculations, but not by much.</p></li>
<li><p>USB provides electrical power at five volts, typically less than 2 amperes.</p></li>
<li><p>Cell phone solar chargers are easy to find. These pocket-sized chargers provide power over USB.</p></li>
</ul>


<p>Can a cell phone solar charger be hacked to power Parallella? Yes!</p>

<h3>Building the Hybrid Cable</h3>

<p>Here&rsquo;s how to get started&hellip;</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/parallella_usb_solar.jpg' width='' height='' alt='Making the connections.' title='Making the connections.'><span class='caption-text'>Making the connections.</span></span></p>

<ul>
<li><p>First, get an off-the-shelf solar device capable of providing 5 volts at 2 amperes. Many cell phone solar chargers will do this, but some will only provide 1 ampere of current. You will need 2 amperes. As of this writing, Amazon sells solar cell phone chargers for about $35.00. Note that the model shown in this article combines a photovoltaic panel with a lithium ion battery. Energy provided by the sun can be stored by the battery for later use.</p></li>
<li><p>Cut open a USB cable to expose power (red), ground (black), and signal cables (green and white) as shown in the photo.</p></li>
<li><p>Find an old AC adapter cable that fits the Parallella power connection. Cut it open to expose the power and ground wires as shown in the photo.</p></li>
<li><p>Solder the USB power to the old adapter power wire, and USB ground to the adapter&rsquo;s ground.</p></li>
<li><p>Cover everything with heat shrink tubing or electrical tape. Heat shrink is preferred since it will last longer.</p></li>
</ul>


<p>You&rsquo;re done! Plug everything in and watch your Parallella boot up. Note that this configuration will also power the Parallella&rsquo;s cooling fan.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/parallella_solar_complete.jpg' width='' height='' alt='Parallella running on solar power.' title='Parallella running on solar power.'><span class='caption-text'>Parallella running on solar power.</span></span></p>

<h3>Proof of Concept</h3>

<p>It probably doesn’t make sense to call this a project. It&rsquo;s more of a proof of concept. Scaling up will cost money and time. But the benefits of solar energy, including cost savings and reduced carbon footprint, make this a worthwhile path to pursue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM and Parallella: What a Difference a Shell Makes]]></title>
    <link href="http://RayHightower.com/blog/2014/07/21/rvm-and-parallella-what-a-difference-a-shell-makes/"/>
    <updated>2014-07-21T21:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/21/rvm-and-parallella-what-a-difference-a-shell-makes</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a> is an effective way to manage Ruby versions on Linux or OS X. RVM was working well on my Ubuntu-based <a href="/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/">Parallella</a>, until one day it stopped:</p>

<p>&#8220;` bash
linaro-nano:~> rvm list
rvm: Command not found.
linaro-nano:~></p>

<p><code>``
</code>rvm: Command not found.` Fortunately, <a href="https://twitter.com/theotherzach">Zach Briggs</a> and I were pairing at a joint OpenHack &ndash; ChicagoRuby event when the problem occurred. Zach is an ideal pairing partner; troubleshooting was smooth because he was there. Time to investigate.</p>

<!--more-->


<h3>Explicit Path</h3>

<p>After a few experiments, we discovered that we could run RVM by explicitly specifying the path to the executable:</p>

<p>&#8220;` bash
linaro-nano:~> ~/.rvm/bin/rvm list</p>

<p>rvm rubies</p>

<p>   ruby-2.0.0-p481 [ armv7l ]</p>

<h1>Default ruby not set. Try &lsquo;rvm alias create default <ruby>&rsquo;.</h1>

<h1>=> &ndash; current</h1>

<h1>=* &ndash; current &amp;&amp; default</h1>

<h1>* &ndash; default</h1>

<p>linaro-nano:~></p>

<p>&#8220;`</p>

<p>Therefore, it appeared that the Ubuntu/Linux <code>$PATH</code> variable was being ignored. Google led us to consider the shell in use on the Parallella.</p>

<h3>Which Shell Is In Use?</h3>

<p>The shell is just a program that lets humans talk to the Linux operating system through a command line interface. Several shell programs exist. Linux users tend to prefer one shell or another. The <code>$SHELL</code> environmental variable points to the one in use.</p>

<p>&#8220;` bash
linaro-nano:~> echo $SHELL
/bin/tcsh
linaro-nano:~></p>

<p>&#8220;`</p>

<p>Very interesting. <code>tcsh</code> was the current Parallella shell. I&rsquo;m more accustomed to <code>bash</code>. Could RVM prefer <code>bash</code> too? We changed one line of <code>/etc/passwd</code> to tell the Parallella to start with <code>bash</code> instead of <code>tcsh</code> and rebooted the Parallella.</p>

<p>&#8220;` bash
linaro-nano:~> echo $SHELL
/bin/bash
linaro-nano:~></p>

<p>&#8220;`
&hellip;and now RVM works normally.</p>

<p>&#8220;` bash
linaro-nano:~> rvm list</p>

<p>rvm rubies</p>

<p>   ruby-2.0.0-p481 [ armv7l ]</p>

<h1>Default ruby not set. Try &lsquo;rvm alias create default <ruby>&rsquo;.</h1>

<h1>=> &ndash; current</h1>

<h1>=* &ndash; current &amp;&amp; default</h1>

<h1>* &ndash; default</h1>

<p>linaro-nano:~></p>

<p>&#8220;`</p>

<h3>Consider Fish?</h3>

<p>Right after this exercise, Zach and <a href="http://twitter.com/josh_cheek">Josh Cheek</a> had a Twitter conversation about a shell called <a href="http://fishshell.com/">fish</a>. Something new and shiny to explore!</p>

<h3>Original Plan: Rubinius</h3>

<p>Did I mention that we originally planned to install <a href="/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a> on the Parallella? Where there are goals, there are yaks waiting to be shaved!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallella Quick Start Guide (with gotchas)]]></title>
    <link href="http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/"/>
    <updated>2014-07-07T13:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='/images/parallella_screenshot.png' width='' height='' alt='Parallella screenshot, 1080p.' title='Parallella screenshot, 1080p.'><span class='caption-text'>Parallella screenshot, 1080p.</span></span>
Parallella is a single-board supercomputer smaller than a deck of cards. While today’s fastest laptops contain four processor cores, Parallella has <em>eighteen</em> (2 <a href="http://arm.com/">ARM</a> cores plus an <a href="http://www.adapteva.com/epiphanyiii/">Epiphany</a> chip with 16 <a href="http://en.wikipedia.org/wiki/Reduced_instruction_set_computing">RISC</a> cores). The maker of Parallella, <a href="http://adapteva.com">Adapteva</a>, is on a mission to democratize parallel computing. The company&rsquo;s tag line is <em>Supercomputing for Everyone</em>.</p>

<!--more-->


<p>Everything in this post is based on the <a href="http://www.parallella.org/quick-start/">official quick start guide created by the Parallella team</a>. These instructions are tailored for a Mac running OS X Mavericks (10.9.3) and a Parallella-16 equipped with the Zynq 7010 chip. I ran into some <em>gotchas</em> during my first Parallella experience. The snags (and solutions) are documented here.</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella.jpg' width='' height='' alt='Parallella. Tiny and powerful.' title='Parallella. Tiny and powerful.'><span class='caption-text'>Parallella. Tiny and powerful.</span></span></p>

<h3>Tools Required</h3>

<p>You will need the following items in order to burn an SD card for your
Parallella:</p>

<ul>
<li>Micro-SD card, 16GB or greater.</li>
<li>Desktop or laptop computer with a micro-SD card reader, or an SD-card reader with a micro adapter. These instructions are tailored for a Mac. A Linux or Windows machine will work with minor modifications in the procedure.</li>
<li>High-speed internet connection, for downloading Parallella&rsquo;s Ubuntu
image and related files.</li>
<li>Micro-USB-to-USB adapter, for the keyboard and mouse. Parallella is equipped with two micro-USB ports.</li>
<li>Micro-HDMI to HDMI cable or adapter.</li>
<li>Parallella (of course!)</li>
</ul>


<p>Adapteva sells an accessories kit containing an SD card, power adapter, micro-HDMI to HDMI cable, and USB-to-micro-USB adapter. Unless you already have these items, buying the kit may save you time.</p>

<h3>These Steps Could Break Your Primary Machine</h3>

<p>Since you&rsquo;re experimenting with Parallella, we can assume that you are an advanced user. Your computer is already backed up, or you&rsquo;re running these steps on a test machine. And you know <a href="/sudo-disclaimer/">the power and pitfalls of sudo</a>. Technology evolves rapidly, and everything you read here could change by the time you read it.</p>

<h3>Comparison with Raspberry Pi or Beaglebone Black</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella_fan.jpg' width='' height='' alt='Bits get hot. Use a fan.' title='Bits get hot. Use a fan.'><span class='caption-text'>Bits get hot. Use a fan.</span></span>
How does the Parallella compare with other single-board computers, like the <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> or <a href="/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>? The first difference noticed at boot-time: Parallella runs hot! So hot, in fact, that the unit comes with a heat sink and the recommendation to add a fan. I’ve never needed a fan with a Pi or a ‘Bone.</p>

<p>Of course, the Parallella runs hotter because it has more processing power packed tightly together in limited space. Since Parallella is designed to run tasks in parallel, we can expect certain programs to perform faster than they would on the Pi or &lsquo;Bone. Future posts will explore Parallella&rsquo;s performance using languages designed for concurrency, languages like <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Go</a> and <a href="/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a>. Now, let’s get started with Parallella.</p>

<h3>Getting the Parallella OS</h3>

<p>Parallella runs a customized version of Ubuntu installed on a micro-SD card. Burning the SD card takes a long time, so it makes sense to start that process first.</p>

<p>Download the files that you will need to burn onto the SD card. I&rsquo;m running Mac OS X on my primary machine, and I&rsquo;m configuring a Parallella-16 with a Zynq 7010 and an HDMI display. Therefore, the files needed for this configuration are:</p>

<ul>
<li><a href="http://downloads.parallella.org/ubuntu/dists/trusty/image/ubuntu-14.04-140611.img.gz">Ubuntu 14.04 for Parallella</a> (released June 11, 2014)</li>
<li><a href="http://downloads.parallella.org/boot/linux/kernel-hdmi-default.tgz">Linux kernel with HDMI support</a></li>
<li><a href="https://github.com/parallella/parallella-hw/blob/master/fpga/bitstreams/parallella_e16_hdmi_gpiose_7010.bit.bin?raw=true">Parallella-16 Zynq 7010 with HDMI display</a></li>
</ul>


<p>Unzip the files and place them in a directory that&rsquo;s handy. You&rsquo;ll need them for the next step. With Mac OS X, you can unzip the files by double-clicking them in <code>Finder</code>.</p>

<p>Note: You might need different files depending on the current date (Parallella software is in a rapid state of flux) and your exact equipment. If your configuration is different, you can make the adjustments described in Parallella&rsquo;s official guide.</p>

<h3>Burn the SD Card</h3>

<p>Insert your SD card into your Mac&rsquo;s SD card reader, and use the Mac OS X <code>diskutil list</code> command to determine the designation of the SD card. If you use portable hard drives with your primary machine, the SD card designation could change from time to time, so it&rsquo;s important to perform this step each time you burn a card.</p>

<p>&#8220;` bash</p>

<p>$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                       </em>15.9 GB     disk1
   1:               Windows_NTFS Untitled 1             15.9 GB     disk1s1</p>

<p>$</p>

<p>&#8220;`</p>

<p>From this <code>diskutil</code> report, we can see that we want to burn the SD image to <code>/dev/disk1</code>. The other device is the hard drive for my primary machine. Burning the wrong device means destroying data.</p>

<p>To burn the SD card&hellip;</p>

<ol>
<li>Change into the directory where you downloaded the Ubuntu image.</li>
<li>Unmount the destination partition on the SD card.</li>
<li>Use the the <code>dd</code> command to copy the Ubuntu image to the SD card.</li>
</ol>


<p>To execute the above steps as <code>bash</code> commands, do the following:</p>

<p>&#8220;` bash</p>

<p>$ cd [directory containing the ubuntu image file]</p>

<p>$ diskutil unmountDisk /dev/disk1</p>

<p>$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:</p>

<p>&#8220;`</p>

<p>The <code>dd</code> command takes a <em>long</em> time to run, over 56 minutes on my machine. Here&rsquo;s a quick run-through of the command options:</p>

<ul>
<li><code>sudo</code> gives you <a href="/sudo-disclaimer/">super powers</a>.</li>
<li><code>dd</code> is the &ldquo;copy and convert&rdquo; command. The letters &ldquo;dd&rdquo; have nothing to do with what the tool actually does. It&rsquo;s just a command name. And like so many things in computer science, the name might be based on a pun.</li>
<li><code>if=</code> specifies the input file. You can include the full path, or if the file is in your current directory, you can omit the path as shown in this example.</li>
<li><code>of=</code> specifies the output file. We know that the SD card is located at <code>/dev/disk</code> so that&rsquo;s where the results of this command are headed.  Note that your destination directory may differ from this one.</li>
<li><code>bs=</code> specifies the block size used for the destination file.</li>
</ul>


<h3>About Block Size</h3>

<p>The Mac section of the official Parallella guide recommends a block size of size of 1 megabyte, while the Linux instructions recommend 64 kilobytes (the option <code>bs=64k</code> in the <code>dd</code> command). I initially used <code>bs=1m</code> on my Mac, and I ran into problems. When I used <code>bs=64k</code>, everything worked fine. Note that I eventually traced my problem to something other than block size (details below) but since the 64k setting still works, I&rsquo;ve left it intact. If I find out why Linux and OS X are using different block sizes, I&rsquo;ll post the information here.</p>

<h3>Checking dd Progress</h3>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/dd_progress.png' width='' height='' alt='Activity Monitor' title='Activity Monitor'><span class='caption-text'>Activity Monitor</span></span></p>

<p>Waiting an hour for the <code>dd</code> command to run can be disconcerting because the machine does not give any feedback on progress. No gas gauge, spinning indicator, nothing. How do we know if the write process is working?</p>

<p>Here&rsquo;s how to check progress. Run Apple&rsquo;s <code>Activity Monitor</code>, and look for <code>dd</code> on the list of processes, as shown in the Activity Monitor screenshot. The number of bytes written will increase slowly while <code>dd</code> burns the Ubuntu image onto the SD card. With the current version of Ubuntu, roughly 7.4GB will be written to the SD. At completion, <code>dd</code> will disappear from the Activity Monitor list and you&rsquo;ll see the following at the command line.</p>

<p>&#8220;` bash</p>

<p>$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
121280+0 records in
121280+0 records out
7948206080 bytes transferred in 3363.824531 secs (2362848 bytes/sec)</p>

<p>$</p>

<p>&#8220;`</p>

<p>As you can see from the report, it took 3363.824531 seconds (just over 56 minutes) for <code>dd</code> to burn the Ubuntu image onto the SD card. That&rsquo;s a long time to wait with zero feedback. Activity Monitor will tell you what&rsquo;s going on.</p>

<h3>Confirm Partitions</h3>

<p>To confirm that the partitions have been created and that Ubuntu has been written to the SD card, use <code>diskutil list</code> again.</p>

<p>&#8220;` bash</p>

<p>$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        </em>15.9 GB    disk1
   1:                 DOS_FAT_32 BOOT                    134.2 MB   disk1s1
   2:                      Linux                         7.3 GB     disk1s2</p>

<p>$</p>

<p>&#8220;`</p>

<p>As expected, <code>/dev/disk0</code> remains unchanged. We want it that way because that&rsquo;s where our primary machine&rsquo;s operating system resides. <code>/dev/disk1</code> (your actual SD card designation may be different) is the target disk we&rsquo;re after. Two new partitions are on the SD card, a FAT32 partition named <code>BOOT</code> and a Linux partition.</p>

<p>Next we need to copy some supporting files to the new <code>BOOT</code> partition.</p>

<h3>Copying Additional Files to the SD Card</h3>

<p>Now that Ubuntu resides on the SD card, it&rsquo;s time to add the files that support HDMI video and the FPGAs. Here&rsquo;s how.</p>

<p>The additional files will need to be copied to <code>/BOOT</code> on the SD card. While it might make sense to reach the <code>BOOT</code> partition as <code>/dev/disk1</code>, you will actually reach it via <code>/Volumes/BOOT</code>.</p>

<p>We target <code>/dev/disk1</code> when burning the Ubuntu image, but to copy the supporting files we target <code>/Volumes/BOOT</code>. Both designations point to the same place, the SD card. Why the name switch?</p>

<p>I don&rsquo;t know why two different designations are used for the same SD card. I only know that it works. You can expect to see an update posted here if I find an explanation. Or if you have an answer, feel free to post in the comments below.</p>

<p>Before we copy over the files, let&rsquo;s see what&rsquo;s on the <code>BOOT</code> partition on the SD card.</p>

<p>&#8220;` bash</p>

<p>~$ cd /Volumes/BOOT/</p>

<p>/Volumes/BOOT$ ls -al
total 12
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .
drwxrwxrwt@ 4 root  admin   136 Jul  5 23:44 ..
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .Trashes
-rwxrwxrwx  1 rth   staff  4096 Jul  5 23:44 ._.Trashes
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .fseventsd</p>

<p>/Volumes/BOOT$</p>

<p>&#8220;`</p>

<h3>Gotcha #1: The FPGA Bitstream File</h3>

<p>First, change into the directory where you stored the additional Parallella files, and copy the FPGA bitstream file to <code>/Volumes/BOOT</code>.</p>

<p>&#8220;` bash</p>

<p>$ cp parallella_e16_hdmi_gpiose_7010.bit.bin /Volumes/BOOT/</p>

<p>$ cd /Volumes/BOOT/</p>

<p>$ mv parallella_e16_hdmi_gpiose_7010.bit.bin parallella.bit.bin</p>

<p>$</p>

<p>&#8220;`</p>

<p>First gotcha: I made the mistake of simply copying the <code>parallella_e16_hdmi_gpiose_7010.bit.bin</code> file without renaming it to <code>parallella.bit.bin</code>. Parallella will only boot when it sees a file with this filename on the SD card&rsquo;s <code>BOOT</code> partition. The original file name will probably change as the software gets updated. With each change, we will need to make sure that the file is renamed <code>parallella.bit.bin</code> on the Parallella.</p>

<p>Obvious in hindsight, but it took me awhile to track that one down!</p>

<h3>Copy the Last Two Files</h3>

<p>Two files were decompressed from <code>kernel-hdmi-default.tgz</code>: <code>devicetree.dtb</code> and <code>uImage</code>. Change into the directory where the files were decompressed, and copy them to <code>/Volumes/BOOT</code>.</p>

<p>&#8220;` bash</p>

<p>$ cp devicetree.dtb /Volumes/BOOT/</p>

<p>$ cp uImage /Volumes/BOOT/</p>

<p>$</p>

<p>&#8220;`</p>

<p>Here’s what the BOOT partition should look like when you’re done..</p>

<p>&#8220;` bash</p>

<p>/Volumes/BOOT$ ls -al
total 12853
drwxrwxrwx@ 1 rth   staff     1024 Jul  6 12:14 .
drwxrwxrwt@ 4 root  admin      136 Jul  6 12:11 ..
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff      512 Jul  6 12:11 .Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:11 .<em>.Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>devicetree.dtb
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:14 .<em>parallella.bit.bin
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>uImage
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .fseventsd
-rwxrwxrwx@ 1 rth   staff     8607 Jul  6 12:13 devicetree.dtb
-rwxrwxrwx@ 1 rth   staff  2083744 Jul  6 12:14 parallella.bit.bin
-rwxrwxrwx@ 1 rth   staff  4468792 Jul  6 12:13 uImage</p>

<p>/Volumes/BOOT$</p>

<p>&#8220;`</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/eject_boot.png' width='' height='' alt='Eject the SD card.' title='Eject the SD card.'><span class='caption-text'>Eject the SD card.</span></span></p>

<h3>Eject the SD Card, Insert in Parallella</h3>

<p>Now you&rsquo;re ready to eject the SD card from the Mac and insert it in the Parallella. Plug in the HDMI cable, keyboard, mouse, and Ethernet connection. Power up the Parallella, and welcome to the next <em>gotcha</em>.</p>

<h3>Gotcha #2: Powered USB Required</h3>

<p>Parallella booted to a beautiful GUI, but the system would not respond to the keyboard or mouse. After swapping a few keyboard/mouse combinations, I finally tried a powered USB hub. The powered hub worked.</p>

<p>Through trial and error I learned that the Parallella can handle a single keyboard plugged into the micro-USB port. However, if two devices are plugged in via USB, a powered hub is required. A passive USB hub will not work. A combination keyboard, one with both a keyboard and a trackpad, will also need a powered USB hub.</p>

<h3>Default Login Credentials</h3>

<p>Default login credentials for Parallella are&hellip;</p>

<ul>
<li>username = linaro</li>
<li>password = linaro</li>
</ul>


<h3>SSH, Vim, Git, etc.</h3>

<p>You can SSH into the Parallella from the network&hellip;</p>

<p>&#8220;` bash</p>

<p>~$ ssh <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x6c;&#105;&#x6e;&#x61;&#x72;&#x6f;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#49;&#49;&#x2e;&#49;&#51;&#51;">&#108;&#x69;&#110;&#x61;&#114;&#x6f;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#49;&#46;&#49;&#x33;&#x33;</a>
<a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#108;&#x69;&#110;&#97;&#114;&#111;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#46;&#49;&#49;&#x2e;&#49;&#51;&#51;">&#108;&#x69;&#x6e;&#x61;&#x72;&#111;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#49;&#46;&#x31;&#51;&#51;</a>&rsquo;s password:
Welcome to Linaro 14.04 (GNU/Linux 3.12.0-g0bc9c3a-dirty armv7l)</p>

<ul>
<li>Documentation:  <a href="https://wiki.linaro.org/">https://wiki.linaro.org/</a>
Last login: Sun Jul  6 17:34:17 2014 from wisdomgroup-mbp13
linaro-nano:~></li>
</ul>


<p>&#8220;`</p>

<p>&hellip; Vim is operational&hellip;</p>

<p>&#8220;` bash</p>

<p>linaro-nano:~> which vim
/usr/bin/vim
linaro-nano:~> vim &mdash;version
VIM &ndash; Vi IMproved 7.4 (2013 Aug 10, compiled Jan  2 2014 19:49:14)
linaro-nano:~></p>

<p>&#8220;`</p>

<p>&hellip; and Git works fine.</p>

<p>&#8220;` bash</p>

<p>linaro-nano:~> which git
/usr/bin/git
linaro-nano:~> git &mdash;version
git version 1.9.1
linaro-nano:~></p>

<p>&#8220;`</p>

<h3>Scrot for Screenshots</h3>

<p>If you want to take a screenshot of the Parallella display, use <code>scrot</code>.  It comes with the Ubuntu installation. Type <code>scrot</code> at the command line and hit enter. Five seconds later, the entire screen will be captured and stored in a file called <code>[time stamp]_1920x1080_scrot.png</code> in the current directory.</p>

<h3>Conclusion</h3>

<p>After waiting a year for Parallella to arrive, I&rsquo;m excited to have the device up and running. Future posts will explore the &ldquo;why?&rdquo; behind parallel computing. Thanks Adapteva for helping to democratize supercomputing. Awesome times are ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Portable Hack for Parallella]]></title>
    <link href="http://RayHightower.com/blog/2013/11/10/a-portable-hack-for-parallella/"/>
    <updated>2013-11-10T23:05:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/10/a-portable-hack-for-parallella</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper left'><img class='caption' src='/images/parallella-portable.png' width='' height='' alt='Portability for Parallella-sized devices.' title='Portability for Parallella-sized devices.'><span class='caption-text'>Portability for Parallella-sized devices.</span></span>
<a href="/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">Beaglebone Black</a>, <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, and <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a> are three small, powerful Linux-based computers. But in order to make these devices truly portable, we need a way to carry a monitor and keyboard along. This article describes one hack that works.</p>

<h3>Inspiration in a Suitcase</h3>

<p>The HP 5036 Microprocessor Lab gave me my first exposure to assembler language. I was eighteen, working my first software internship, and loving every minute of it. When I devised ways to complete my <em>regular work</em> faster than management expected, I had some time on my hands. So I spent time learning assembler with the HP 5036.</p>

<!--more-->


<p><span class='caption-wrapper'><img class='caption' src='/images/hp-5036.png' width='' height='' alt='HP 5036 Microprocessor Lab' title='HP 5036 Microprocessor Lab'><span class='caption-text'>HP 5036 Microprocessor Lab</span></span></p>

<p>The entire 5036 fits in a suitcase&hellip; how cool is that! Here&rsquo;s how the 5036 works:</p>

<ol>
<li>Start by writing assembler-level code by hand on paper.</li>
<li>Grab the reference book for the microprocessor running on the
board, Intel 8080.</li>
<li>For each assembler-level command, find the corresponding 2-digit
hexidecimal operation code.</li>
<li>Key the op code into the 5036 by hand.</li>
<li>Run the program.</li>
</ol>


<p>Working with the 5036 was addictive in a positive way. In a subsequent job, where I wrote assembler to drive hardware devices, I was ready.</p>

<h3>Portability Needed</h3>

<p>Fast forward a few decades. We now have the Raspberry Pi, BeagleBone Black, and Parallella. Wonderful devices with one flaw in common: No portability. That&rsquo;s when I had a flashback to my days with the 5036.</p>

<p>I bought a $35 technician box from Home Depot and I ripped out the insides. Micro Center had 720p LCD monitors on sale for $90, so I bought one of those. I didn&rsquo;t want to spend the extra bucks for a 1080p LCD because you never know how something like this might work out! Finally, I topped everything off with a $25 keyboard/trackpad combo from Amazon.  The result appears in the photo at the top of this article. Special thanks to Ericka [last name unknown] from Home Depot who gave me tons of ideas on how to securely fasten the monitor to the case.</p>

<h3>Why?</h3>

<p>Why did I spend the time and money to assemble this kit? It&rsquo;s all about learning. Devs learn more when we interact with other devs &ndash; people who are learning some of the same things that we&rsquo;re wrestling with. And sometimes the things we need to learn are too new for books.</p>

<p>By carrying my Raspberry Pi, BeagleBone Black, and Parallella with me in a portable unit, I can share my experiences with other devs and learn more in the process. Everybody wins when that happens.</p>

<h3>Thanks SCNA!</h3>

<p>The organizers of <a href="http://scna.softwarecraftsmanship.org/">Software Craftsmanship North America (SCNA)</a> gave me the opportunity to present this story as a lightning talk at the conference. Slides are here:</p>

<center><script async class="speakerdeck-embed" data-id="b3558fd02cac0131cfc62a9baba32394" data-ratio="1.29456384323641" src="//speakerdeck.com/assets/embed.js"></script></center>


<p>Thank you SCNA! As I shared with the other devs at SCNA, I will gladly post my mistakes and <em>gotchas</em> here for people who want to build a unit like this. Let&rsquo;s build!</p>
]]></content>
  </entry>
  
</feed>
