<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Parallella | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/parallella/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-07-07T23:22:36-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parallella Quick Start Guide (with gotchas)]]></title>
    <link href="http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/"/>
    <updated>2014-07-07T13:31:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/07/parallella-quick-start-guide-with-gotchas</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper center'><img class='caption' src='/images/parallella_screenshot.png' width='' height='' alt='Parallella screenshot, 1080p.' title='Parallella screenshot, 1080p.'><span class='caption-text'>Parallella screenshot, 1080p.</span></span>
Parallella is a single-board supercomputer smaller than a deck of cards. While today’s fastest laptops contain four processor cores, Parallella has <em>eighteen</em> (2 <a href="http://arm.com/">ARM</a> plus 16 <a href="http://en.wikipedia.org/wiki/Field-programmable_gate_array">FPGA</a>). <a href="http://adapteva.com">Adapteva</a>, maker of Parallella, is on a mission to democratize parallel computing. The company&rsquo;s tag line is <em>Supercomputing for Everyone</em>.</p>

<!--more-->


<p>Everything in this post is based on the <a href="http://www.parallella.org/quick-start/">official quick start guide created by the Parallella team</a>. These instructions are tailored for a Mac running OS X Mavericks (10.9.3) and a Parallella-16 equipped with the Zynq 7010 chip. I ran into some <em>gotchas</em> during my first Parallella experience. The snags (and solutions) are documented here.</p>

<h3>Tools Required</h3>

<p>You will need the following items in order to burn an SD card for your
Parallella:</p>

<ul>
<li>Micro-SD card, 16GB or greater.</li>
<li>Desktop or laptop computer with a micro-SD card reader, or an SD-card reader with a micro adapter. These instructions are tailored for a Mac. A Linux or Windows machine will work with minor modifications in the procedure.</li>
<li>High-speed internet connection, for downloading Parallella&rsquo;s Ubuntu
image and related files.</li>
<li>Micro-USB-to-USB adapter, for the keyboard and mouse. Parallella is equipped with two micro-USB ports.</li>
<li>Micro-HDMI to HDMI cable or adapter.</li>
<li>Parallella (of course!)</li>
</ul>


<p>Adapteva sells an accessories kit containing an SD card, power adapter, micro-HDMI to HDMI cable, and USB-to-micro-USB adapter. Unless you already have these items, buying the kit may save you time.</p>

<h3>These Steps Could Break Your Primary Machine</h3>

<p>Since you&rsquo;re experimenting with Parallella, we can assume that you are an advanced user. Your computer is already backed up, or you&rsquo;re running these steps on a test machine. And you know <a href="/sudo-disclaimer/">the power and pitfalls of sudo</a>. Technology evolves rapidly, and everything you read here could change by the time you read it.</p>

<h3>Comparison with Raspberry Pi or Beaglebone Black</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/parallella_fan.jpg' width='' height='' alt='Hot stuff. Use a fan.' title='Hot stuff. Use a fan.'><span class='caption-text'>Hot stuff. Use a fan.</span></span>
How does the Parallella compare with other single-board computers, like the <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a> or <a href="/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>? The first difference noticed at boot-time: Parallella runs hot! So hot, in fact, that the unit comes with a heat sink and the recommendation to add a fan. I’ve never needed a fan with a Pi or a ‘Bone.</p>

<p>Of course, the Parallella runs hotter because it has more processing power packed tightly together in limited space. Since Parallella is designed to run tasks in parallel, we can expect certain programs to perform faster than they would on the Pi or &lsquo;Bone. Future posts will cover performance comparisons and experiments with <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Go and other languages</a>. Now, let’s get started with Parallella.</p>

<h3>Getting the Parallella OS</h3>

<p>Parallella runs a customized version of Ubuntu installed on a micro-SD card. Burning the SD card takes a long time, so it makes sense to start that process first.</p>

<p>Download the files that you will need to burn onto the SD card. I&rsquo;m running Mac OS X on my primary machine, and I&rsquo;m configuring a Parallella-16 with a Zynq 7010 and an HDMI display. Therefore, the files needed for this configuration are:</p>

<ul>
<li><a href="http://downloads.parallella.org/ubuntu/dists/trusty/image/ubuntu-14.04-140611.img.gz">Ubuntu 14.04 for Parallella</a> (released June 11, 2014)</li>
<li><a href="http://downloads.parallella.org/boot/linux/kernel-hdmi-default.tgz">Linux kernel with HDMI support</a></li>
<li><a href="https://github.com/parallella/parallella-hw/blob/master/fpga/bitstreams/parallella_e16_hdmi_gpiose_7010.bit.bin?raw=true">Parallella-16 Zynq 7010 with HDMI display</a></li>
</ul>


<p>Unzip the files and place them in a directory that&rsquo;s handy. You&rsquo;ll need them for the next step. With Mac OS X, you can unzip the files by double-clicking them in <code>Finder</code>.</p>

<p>Note: You might need different files depending on the current date (Parallella software is in a rapid state of flux) and your exact equipment. If your configuration is different, you can make the adjustments described in Parallella&rsquo;s official guide.</p>

<h3>Burn the SD Card</h3>

<p>Insert your SD card into your Mac&rsquo;s SD card reader, and use the Mac OS X <code>diskutil list</code> command to determine the designation of the SD card. If you use portable hard drives with your primary machine, the SD card designation could change from time to time, so it&rsquo;s important to perform this step each time you burn a card.</p>

<p>```bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                       </em>15.9 GB     disk1
   1:               Windows_NTFS Untitled 1             15.9 GB     disk1s1</p>

<p>$
```</p>

<p>From this <code>diskutil</code> report, we can see that we want to burn the SD image to <code>/dev/disk1</code>. The other device is the hard drive for my primary machine. Burning the wrong device means destroying data.</p>

<p>To burn the SD card, change into the directory where you downloaded the Ubuntu image and use the <code>dd</code> command as follows&hellip;</p>

<p>```bash
$ cd [directory containing the ubuntu image file]</p>

<p>$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
```</p>

<p>The <code>dd</code> command takes a <em>long</em> time to run, over 56 minutes on my machine. Here&rsquo;s a quick run-through of the command options:</p>

<ul>
<li><code>sudo</code> gives you <a href="/sudo-disclaimer/">super powers</a>.</li>
<li><code>dd</code> is the &ldquo;copy and convert&rdquo; command. The letters &ldquo;dd&rdquo; have nothing to do with what the tool actually does. It&rsquo;s just a command name. And like so many things in computer science, the name might be based on a pun.</li>
<li><code>if=</code> specifies the input file. You can include the full path, or if the file is in your current directory, you can omit the path as shown in this example.</li>
<li><code>of=</code> specifies the output file. We know that the SD card is located at <code>/dev/disk</code> so that&rsquo;s where the results of this command are headed.  Note that your destination directory may differ from this one.</li>
<li><code>bs=</code> specifies the block size used for the destination file.</li>
</ul>


<h3>About Block Size</h3>

<p>The Mac section of the official Parallella guide recommends a block size of size of 1 megabyte, while the Linux instructions recommend 64 kilobytes (the option <code>bs=64k</code> in the <code>dd</code> command). I initially used <code>bs=1m</code> on my Mac, and I ran into problems. When I used <code>bs=64k</code>, everything worked fine. Note that I eventually traced my problem to something other than block size (details below) but since the 64k setting still works, I&rsquo;ve left it intact. If I find out why Linux and OS X are using different block sizes, I&rsquo;ll post the information here.</p>

<h3>Checking dd Progress</h3>

<p><span class='caption-wrapper center'><img class='caption' src='/images/dd_progress.png' width='' height='' alt='Activity Monitor' title='Activity Monitor'><span class='caption-text'>Activity Monitor</span></span>
Waiting an hour for the <code>dd</code> command to run can be disconcerting because the machine does not give any feedback on progress. No gas gauge, spinning indicator, nothing. How do we know if the write process is working?</p>

<p>Here&rsquo;s how to check progress. Run Apple&rsquo;s <code>Activity Monitor</code>, and look for <code>dd</code> on the list of processes (see diagram). The number of bytes written will increase slowly while <code>dd</code> burns the Ubuntu image onto the SD card. With the current version of Ubuntu, roughly 7.4GB will be written to the SD. At completion, <code>dd</code> will disappear from the Activity Monitor list and you&rsquo;ll see the following at the command line.</p>

<p>```bash
$ sudo dd if=ubuntu-14.04-140611.img of=/dev/disk1 bs=64k
Password:
121280+0 records in
121280+0 records out
7948206080 bytes transferred in 3363.824531 secs (2362848 bytes/sec)</p>

<p>$</p>

<p>```</p>

<p>As you can see from the report, it took 3363.824531 seconds (just over 56 minutes) for <code>dd</code> to burn the Ubuntu image onto the SD card. That&rsquo;s a long time to wait with zero feedback. Activity Monitor will tell you what&rsquo;s going on.</p>

<h3>Confirm Partitions</h3>

<p>To confirm that the partitions have been created and that Ubuntu has been written to the SD card, use <code>diskutil list</code> again.</p>

<p>```bash
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        <em>500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS MacSSD                  499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        </em>15.9 GB    disk1
   1:                 DOS_FAT_32 BOOT                    134.2 MB   disk1s1
   2:                      Linux                         7.3 GB     disk1s2</p>

<p>$
```</p>

<p>As expected, <code>/dev/disk0</code> remains unchanged. We want it that way because that&rsquo;s where our primary machine&rsquo;s operating system resides. <code>/dev/disk1</code> (your actual SD card designation may be different) is the target disk we&rsquo;re after. Two new partitions are on the SD card, a Fat32 partition called <code>BOOT</code> and a Linux partition.</p>

<p>Next we need to copy some supporting files to the new <code>BOOT</code> partition.</p>

<h3>Copying Additional Files to the SD Card</h3>

<p>Now that Ubuntu resides on the SD card, it&rsquo;s time to add the files that support HDMI video and the FPGAs. Here&rsquo;s how.</p>

<p>The additional files will need to be copied to <code>/BOOT</code> on the SD card. While it might make sense to reach the <code>BOOT</code> partition as <code>/dev/disk1</code>, you will actually reach it via <code>/Volumes/BOOT</code>.</p>

<p>Before we copy over the files, let&rsquo;s see what&rsquo;s on the <code>BOOT</code> partition on the SD card.</p>

<p>```bash
~$ cd /Volumes/BOOT/</p>

<p>/Volumes/BOOT$ ls -al
total 12
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .
drwxrwxrwt@ 4 root  admin   136 Jul  5 23:44 ..
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff   512 Jul  5 23:44 .Trashes
-rwxrwxrwx  1 rth   staff  4096 Jul  5 23:44 ._.Trashes
drwxrwxrwx  1 rth   staff   512 Jul  5 23:44 .fseventsd</p>

<p>/Volumes/BOOT$
```</p>

<h3>Gotcha #1: The FPGA Bitstream File</h3>

<p>First, change into the directory where you stored the additional Parallella files, and copy the FPGA bitstream file to <code>/Volumes/BOOT</code>.</p>

<p>```bash</p>

<p>$ cp parallella_e16_hdmi_gpiose_7010.bit.bin /Volumes/BOOT/</p>

<p>$ mv parallella_e16_hdmi_gpiose_7010.bit.bin parallella.bit.bin</p>

<p>$</p>

<p><code>``
First gotcha: I made the mistake of simply copying the</code>parallella_e16_hdmi_gpiose_7010.bit.bin<code>file without renaming it to</code>parallella.bit.bin<code>. Parallella will only boot when it sees a file with this filename on the SD card's</code>BOOT<code>partition. The original file name will probably change as the software gets updated. With each change, we will need to make sure that the file is renamed</code>parallella.bit.bin` on the Parallella.</p>

<p>Obvious in hindsight, but it took me awhile to track that one down!</p>

<h3>Copy the Last Two Files</h3>

<p>Two files were decompressed from <code>kernel-hdmi-default.tgz</code>. Those should also be copied to <code>/Volumes/BOOT</code>.</p>

<p>```bash
$ cp devicetree.dtb /Volumes/BOOT/</p>

<p>$ cp uImage /Volumes/BOOT/</p>

<p>$
```</p>

<p>Here’s what the BOOT partition should look like when you’re done..</p>

<p>```bash
/Volumes/BOOT$ ls -al
total 12853
drwxrwxrwx@ 1 rth   staff     1024 Jul  6 12:14 .
drwxrwxrwt@ 4 root  admin      136 Jul  6 12:11 ..
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .Spotlight-V100
drwxrwxrwx@ 1 rth   staff      512 Jul  6 12:11 .Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:11 .<em>.Trashes
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>devicetree.dtb
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:14 .<em>parallella_e16_hdmi_gpiose_7010.bit.bin
-rwxrwxrwx  1 rth   staff     4096 Jul  6 12:13 .</em>uImage
drwxrwxrwx  1 rth   staff      512 Jul  6 12:11 .fseventsd
-rwxrwxrwx@ 1 rth   staff     8607 Jul  6 12:13 devicetree.dtb
-rwxrwxrwx@ 1 rth   staff  2083744 Jul  6 12:14 parallella_e16_hdmi_gpiose_7010.bit.bin
-rwxrwxrwx@ 1 rth   staff  4468792 Jul  6 12:13 uImage</p>

<p>/Volumes/BOOT$
```</p>

<p><span class='caption-wrapper right'><img class='caption' src='/images/eject_boot.png' width='' height='' alt='Eject the SD card.' title='Eject the SD card.'><span class='caption-text'>Eject the SD card.</span></span></p>

<h3>Eject the SD Card, Insert in Parallella</h3>

<p>Now you&rsquo;re ready to eject the SD card from the Mac and insert it in the Parallella. Plug in the HDMI cable, keyboard, mouse, and Ethernet connection. Power up the Parallella, and welcome to the next <em>gotcha</em>.</p>

<h3>Gotcha #2: Powered USB Required</h3>

<p>Parallella booted to a beautiful GUI, but the system would not respond to the keyboard or mouse. After swapping a few keyboard/mouse combinations, I finally tried a powered USB hub. The powered hub worked.</p>

<p>Through trial and error I learned that the Parallella can handle a single keyboard plugged into the micro-USB port. However, if two devices are plugged in via USB, a powered hub is required. A passibve USB hub will not work. A combination keyboard, one with both a keyboard and a trackpad, will also need a powered USB hub.</p>

<h3>Default Login Credentials</h3>

<p>Default login credentials for Parallella are&hellip;</p>

<ul>
<li>username = linaro</li>
<li>password = linaro</li>
</ul>


<h3>SSH, Vim, Git, etc.</h3>

<p>You can SSH into the Parallella from the network&hellip;</p>

<p>```bash
~$ ssh <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6c;&#x69;&#110;&#x61;&#114;&#111;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#46;&#49;&#49;&#46;&#49;&#x33;&#x33;">&#108;&#x69;&#x6e;&#97;&#114;&#x6f;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#x31;&#x31;&#x2e;&#49;&#x33;&#x33;</a>
<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#108;&#105;&#110;&#97;&#x72;&#111;&#64;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#56;&#x2e;&#49;&#49;&#x2e;&#x31;&#x33;&#51;">&#x6c;&#x69;&#x6e;&#x61;&#114;&#111;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#49;&#49;&#46;&#x31;&#51;&#x33;</a>&rsquo;s password:
Welcome to Linaro 14.04 (GNU/Linux 3.12.0-g0bc9c3a-dirty armv7l)</p>

<ul>
<li>Documentation:  <a href="https://wiki.linaro.org/">https://wiki.linaro.org/</a>
Last login: Sun Jul  6 17:34:17 2014 from wisdomgroup-mbp13
linaro-nano:~>
```</li>
</ul>


<p>&hellip; Vim is operational&hellip;</p>

<p><code>bash
linaro-nano:~&gt; which vim
/usr/bin/vim
linaro-nano:~&gt; vim --version
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan  2 2014 19:49:14)
linaro-nano:~&gt;
</code></p>

<p>&hellip; and Git works fine.</p>

<p><code>bash
linaro-nano:~&gt; which git
/usr/bin/git
linaro-nano:~&gt; git --version
git version 1.9.1
linaro-nano:~&gt;
</code></p>

<h3>Scrot for Screenshots</h3>

<p>If you want to take a screenshot of the Parallella display, use <code>scrot</code>.  It comes with the Ubuntu installation. Type <code>scrot</code> at the command line and hit enter. Five seconds later, the entire screen will be captured and stored in a file called <code>[time stamp]_1920x1080_scrot.png</code> in the current directory.</p>

<h3>Conclusion</h3>

<p>After waiting a year for Parallella to arrive, I&rsquo;m excited to have the device up and running. Future posts will explore the &ldquo;why?&rdquo; behind parallel computing. Thanks Adapteva for helping to democratize supercomputing. Awesome times are ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Portable Hack for Parallella]]></title>
    <link href="http://RayHightower.com/blog/2013/11/10/a-portable-hack-for-parallella/"/>
    <updated>2013-11-10T23:05:00-06:00</updated>
    <id>http://RayHightower.com/blog/2013/11/10/a-portable-hack-for-parallella</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper left'><img class='caption' src='/images/parallella-portable.png' width='' height='' alt='Portability for Parallella-sized devices.' title='Portability for Parallella-sized devices.'><span class='caption-text'>Portability for Parallella-sized devices.</span></span>
<a href="/blog/2013/05/22/beaglebone-black-running-ruby-on-rails/">Beaglebone Black</a>, <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspberry Pi</a>, and <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a> are three small, powerful Linux-based computers. But in order to make these devices truly portable, we need a way to carry a monitor and keyboard along. This article describes one hack that works.</p>

<h3>Inspiration in a Suitcase</h3>

<p>The HP 5036 Microprocessor Lab gave me my first exposure to assembler language. I was eighteen, working my first software internship, and loving every minute of it. When I devised ways to complete my <em>regular work</em> faster than management expected, I had some time on my hands. So I spent time learning assembler with the HP 5036.</p>

<!--more-->


<p><span class='caption-wrapper'><img class='caption' src='/images/hp-5036.png' width='' height='' alt='HP 5036 Microprocessor Lab' title='HP 5036 Microprocessor Lab'><span class='caption-text'>HP 5036 Microprocessor Lab</span></span></p>

<p>The entire 5036 fits in a suitcase&hellip; how cool is that! Here&rsquo;s how the 5036 works:</p>

<ol>
<li>Start by writing assembler-level code by hand on paper.</li>
<li>Grab the reference book for the microprocessor running on the
board, Intel 8080.</li>
<li>For each assembler-level command, find the corresponding 2-digit
hexidecimal operation code.</li>
<li>Key the op code into the 5036 by hand.</li>
<li>Run the program.</li>
</ol>


<p>Working with the 5036 was addictive in a positive way. In a subsequent job, where I wrote assembler to drive hardware devices, I was ready.</p>

<h3>Portability Needed</h3>

<p>Fast forward a few decades. We now have the Raspberry Pi, BeagleBone Black, and Parallella. Wonderful devices with one flaw in common: No portability. That&rsquo;s when I had a flashback to my days with the 5036.</p>

<p>I bought a $35 technician box from Home Depot and I ripped out the insides. Micro Center had 720p LCD monitors on sale for $90, so I bought one of those. I didn&rsquo;t want to spend the extra bucks for a 1080p LCD because you never know how something like this might work out! Finally, I topped everything off with a $25 keyboard/trackpad combo from Amazon.  The result appears in the photo at the top of this article. Special thanks to Ericka [last name unknown] from Home Depot who gave me tons of ideas on how to securely fasten the monitor to the case.</p>

<h3>Why?</h3>

<p>Why did I spend the time and money to assemble this kit? It&rsquo;s all about learning. Devs learn more when we interact with other devs &ndash; people who are learning some of the same things that we&rsquo;re wrestling with. And sometimes the things we need to learn are too new for books.</p>

<p>By carrying my Raspberry Pi, BeagleBone Black, and Parallella with me in a portable unit, I can share my experiences with other devs and learn more in the process. Everybody wins when that happens.</p>

<h3>Thanks SCNA!</h3>

<p>The organizers of <a href="http://scna.softwarecraftsmanship.org/">Software Craftsmanship North America (SCNA)</a> gave me the opportunity to present this story as a lightning talk at the conference. Slides are here:</p>

<center><script async class="speakerdeck-embed" data-id="b3558fd02cac0131cfc62a9baba32394" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>Thank you SCNA! As I shared with the other devs at SCNA, I will gladly post my mistakes and <em>gotchas</em> here for people who want to build a unit like this. Let&rsquo;s build!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prep for Parallella's 64 Cores: Installing Go on Mac OS X]]></title>
    <link href="http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/"/>
    <updated>2013-06-22T12:58:00-05:00</updated>
    <id>http://RayHightower.com/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x</id>
    <content type="html"><![CDATA[<p><img src="http://RayHightower.com/images/parallella.jpg" width="450" height="257" alt="Parallella 64-core supercomputer" title="Parallella 64-core supercomputer" align="right" imgcap="Parallella Board">
The idea of owning a 64-core parallel system for two hundred dollars (yes, $200.00) is exciting. <a href="http://www.parallella.org/introduction/">Parallella</a> is working to make that happen, perhaps as early as August 2013. To prepare for that day, I&rsquo;ve decided to introduce myself to the Go language.</p>

<!--more-->


<h3>What is Go?</h3>

<p><a href="http://golang.org">The Go language</a> is designed for parallel systems. Why does Go exist? One developer sums it up this way:</p>

<blockquote><p>Go was created at Google, by Google, for Google-size problems.<br/>~Dave Astels</p></blockquote>

<p>Google writes software that runs on thousands of machines in parallel. As the number of concurrent operations increases, new challenges are encountered. Google addressed those challenges by creating Go.</p>

<h3>Why Does a Rubyist Learn Go?</h3>

<p>The team at <a href="http://wisdomgroup.com">WisdomGroup</a> writes web and mobile apps, mainly in Ruby. So why am I learning Go?</p>

<p>Because the best developers are polyglot. When we learn a new language, we cause ourselves to see old problems in new ways and we strengthen our ability to solve new problems. It&rsquo;s like cross-training for  athletes. In the end, we become better developers.</p>

<h3>How to Install Go on Mac OS X</h3>

<ol>
<li><a href="https://code.google.com/p/go/downloads/list">Download the binary of Go that matches your system</a> <i>but don't install it yet</i>. You will need to complete the rest of these steps before installation. For my 2010 i5-based 15-inch MacBook Pro, I chose <code>go1.1.1.darwin-amd64.pkg</code>. I was concerned about the reference to <code>amd64</code> in the name. But the description includes <code>Mac OS X (x86 64-bit)</code>, and the binary worked for me.</li>
<br/>
<li>If you are upgrading from a previous version of Go, you will need to remove the old Go directory. You can do this while the new binary is downloading in the background:</li>

```bash
$ rm -rf /usr/local/go
```

<li>Define the <code>GOROOT</code> and <code>GOPATH</code> environmental variables. My system uses <code>~/.bash_profile</code> to define environmental variables, so I added the following lines to the end of that file:

```bash
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GOPATH=~/Code/gocode
```
Note: I'm using the default <code>GOROOT</code> variable, but your <code>GOPATH</code> may differ from mine. I store all of my source code in a subdirectory of home:<code>~/Code</code>. My complete Go directory structure is given below. By looking at my structure, you can adjust these steps to fit your system.</li>
<br/>
<li>Tell your terminal session to recognize the new environmental variables. You can either restart terminal, or if your environmental variables are in <code>~/.bash_profile</code> like mine, you can do the following:</li>

```bash
$ source ~/.bash_profile
```
<li>Run the package installation program, <code>go1.1.1.darwin-amd64.pkg</code>, that was downloaded in Step 1.</li>
</ol>


<p>Now, let&rsquo;s Go for a test drive.</p>

<h3>Creating a Go Workspace</h3>

<p>Before you can run a Go program on your system, you have to create a Go workspace. A workspace is a directory structure that contains source code and binaries that a Go program needs in order to compile and execute.</p>

<p>We can examine the Go Workspace on my system with the Unix <code>tree</code> command:</p>

<p>```bash
~/Code/gocode$ tree
.
└── src</p>

<pre><code>└── github.com
    └── rayhightower
        └── hello
            └── hello.go
</code></pre>

<p>4 directories, 1 file</p>

<p>~/Code/gocode$
```</p>

<p>Here&rsquo;s a brief description of the directories:</p>

<ul>
<li>Code = root directory for all source code on my system. Yours may differ.</li>
<li>gocode = where I store all of the Go code on my system. I&rsquo;m following the structure recommended by the Go documentation. I may alter this as I learn more about the language.</li>
<li>src = source code</li>
<li>github.com = directory named after the place where I store repos</li>
<li>rayhightower = my GitHub profile name</li>
<li>hello = directory named for our first Go application</li>
<li>hello.go = the Go source file for our <code>Hello World</code> program</li>
</ul>


<p>All structure below the <code>gocode</code> directory is mandated by Go.</p>

<h3>Writing &lsquo;Hello World!&rsquo; in Go</h3>

<p>Google&rsquo;s official installation instructions include a simple &lsquo;Hello World&rsquo; program for testing the installation. A slightly modified version appears below:</p>

<p>```go
package main</p>

<p>import &ldquo;fmt&rdquo;</p>

<p>func main() {</p>

<pre><code>fmt.Printf("\n****** Hey Parallella enthusiasts: Learn Go! ******\n")
</code></pre>

<p>}
```</p>

<h3>Compiling and Running</h3>

<p>We drop the code into a file called <code>hello.go</code> in the <code>hello</code> directory. To compile the program:</p>

<p>```bash
~/Code/gocode/src/github.com/rayhightower/hello$ go install</p>

<p>~/Code/gocode/src/github.com/rayhightower/hello$
<code>``
If the Go compiler responds with a blank prompt (like above) then the program compiled successfully and a</code>bin<code>directory has been created inside the Go workspace. Run the</code>tree<code>command from the</code>gocode` directory to see how the structure has changed:</p>

<p>```bash
~/Code/gocode$ tree
.
├── bin
│   └── hello
└── src</p>

<pre><code>└── github.com
    └── rayhightower
        └── hello
            └── hello.go
</code></pre>

<p>5 directories, 2 files</p>

<p>~/Code/gocode$
```</p>

<p>The newly created <code>bin/</code> directory contains our <code>hello</code> executable. And now, let&rsquo;s cut the suspense and <em>run the program</em>. To do so, change into the <code>bin/</code> directory and type <code>./hello</code>.</p>

<p>```bash
~/Code/gocode/src/github.com/rayhightower/hello$ cd ~/Code/gocode/bin</p>

<p>~/Code/gocode/bin$ ./hello</p>

<p><strong><strong><strong> Hey Parallella enthusiasts: Learn Go! </strong></strong></strong></p>

<p>~/Code/gocode/bin$
```
Success!</p>

<h3>It&rsquo;s Not Official, But It Makes Sense</h3>

<p>As of this writing, Parallella does not officially support the Go language. So why go through all of this trouble? Because&hellip;</p>

<ul>
<li>A 64-core Parallella is just too cool to pass up. And it&rsquo;s open source.</li>
<li>Go is designed for parallel systems. And it&rsquo;s open source.</li>
<li>Open source devs are working on a Go compiler for Parallella right now. If you&rsquo;re reading this, and you&rsquo;re one of the devs, thank you!</li>
</ul>


<p>The Go-Parallella match makes sense. It&rsquo;s always good to skate where the puck is going.</p>

<h3>Next Steps</h3>

<p>Now it&rsquo;s time to explore the Go language. The real adventure begins when the 64-core Parallella arrives. Looking forward to it!</p>

<h3>Acknowledgements</h3>

<p>I was inspired to explore Go by <a href="https://twitter.com/blakesmith">Blake Smith&rsquo;s</a> presentation at <a href="http://www.meetup.com/ChicagoSC/events/120658422/">8th Light</a>. <a href="http://twitter.com/wondible">Justin Love</a> introduced me to Parallella last month at ChicagoRuby.</p>
]]></content>
  </entry>
  
</feed>
