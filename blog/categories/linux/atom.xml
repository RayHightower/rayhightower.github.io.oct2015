<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2015-05-25T21:31:50-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using rlwrap with MIT's Scheme REPL]]></title>
    <link href="http://RayHightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl/"/>
    <updated>2015-03-19T17:02:11-05:00</updated>
    <id>http://RayHightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl</id>
    <content type="html"><![CDATA[<p>Users of the Linux or OS X command line know that they can hit the up arrow to view the previously executed command. However, this behavior is missing from the <code>mit-scheme</code> read-evaluate-print-loop (REPL). <code>mit-scheme</code> is the language used in <a href="/blog/2015/02/18/sicp-study-group/">SICP</a>.</p>

<p>For example, hitting the up arrow in the Scheme REPL gives us this non-useful result: <code>^[[A</code>. The previous command is not repeated.</p>

<p>How do we add up-arrow functionality to the <code>mit-scheme</code> REPL? By using <code>rlwrap</code>.</p>

<!--more-->


<h3>Installing rlwrap</h3>

<p>On Mac OS X with <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>, first update Homebrew with <code>$ brew update</code>.</p>

<p>Then install <code>rlwrap</code>.</p>

<p>&#8220;` bash</p>

<p>$ brew install rlwrap
==> Downloading <a href="https://homebrew.bintray.com/bottles/rlwrap-0.42.yosemite.bottle.tar.gz">https://homebrew.bintray.com/bottles/rlwrap-0.42.yosemite.bottle.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> Pouring rlwrap-0.42.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/rlwrap/0.42: 29 files, 312K</p>

<p>&#8220;`</p>

<p>You can verify the <code>rlwrap</code> installation as follows.</p>

<p>&#8220;` bash</p>

<p>$ which rlwrap
/usr/local/bin/rlwrap</p>

<p>&#8220;`</p>

<h3>Using rlwrap</h3>

<p>To use <code>rlwrap</code> with <code>scheme</code> do the following.</p>

<p>&#8220;` bash</p>

<p>$ rlwrap scheme</p>

<p>&#8220;`</p>

<h3>Add an Alias to ~/.bash_profile</h3>

<p>To speed things up a bit, we can add an <code>alias</code> to <code>~/.bash_profile</code>.</p>

<p>&#8220;` bash</p>

<h1>for rlwrap &amp; scheme support. Details: <a href="http://rayhightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl/">http://rayhightower.com/blog/2015/03/19/using-rlwrap-with-mit-scheme-repl/</a></h1>

<p>alias sicp=&lsquo;rlwrap scheme&rsquo;</p>

<p>&#8220;`</p>

<p>So now when we type <code>sicp</code> at the command line&hellip;</p>

<p><code>`` bash
$ sicp
MIT/GNU Scheme running under OS X
Type</code>^C&#8217; (control-C) followed by `H&#8217; to obtain information about interrupts.</p>

<p>Copyright &copy; 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>

<p>Image saved on Saturday May 17, 2014 at 2:39:25 AM
  Release 9.2 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118 || Edwin 3.116</p>

<p>1 ]=></p>

<p>&#8220;`
Exactly what we expect.</p>

<h3>Conclusion</h3>

<p>And now we have it. The up-arrow behavior that we enjoy at the command line is now in the Scheme REPL. Big savings in time, and better for learning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 2 Model B Quad Core]]></title>
    <link href="http://RayHightower.com/blog/2015/02/27/raspberry-pi-2-model-b-quad-core/"/>
    <updated>2015-02-27T21:04:11-06:00</updated>
    <id>http://RayHightower.com/blog/2015/02/27/raspberry-pi-2-model-b-quad-core</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/raspberry_pi_2_model_b.jpg' width='' height='' alt='Raspberry Pi 2 Model B' title='Raspberry Pi 2 Model B'><span class='caption-text'>Raspberry Pi 2 Model B</span></span>
The <a href="http://www.raspberrypi.org/">Raspberry Pi Foundation</a> has upped their entry in the single-board computer competition. Raspberry Pi 2 Model B boasts a quad core ARM CPU and 1GB of RAM. More important: Benchmarks show that the board is 6x faster than the previous model. And the performance bump has been achieved while the price remains low: Roughly $45.</p>

<p>Getting the board up and running is easier, too. You can buy a pre-built Linux image on micro SD. Or you can <a href="http://www.raspberrypi.org/downloads/">download the New Out Of the Box (NOOBS) image</a> yourself. Depending on the speed of your internet connection, you can be up in running in less than an hour.</p>

<!--more-->


<h3>Easier Than Before</h3>

<p>Special note about the NOOBS image: You don&rsquo;t need a special utility to burn an SD card like before. The steps are:</p>

<ul>
<li>Download the <a href="http://www.raspberrypi.org/downloads/">NOOBS image</a> and unzip it.</li>
<li>Format a micro SD card that&rsquo;s at lease 4GB in size.</li>
<li>Drag the unzipped NOOBS files to the micro SD card.</li>
<li>Insert the micro SD card into the Raspeberry Pi, apply power, and watch it boot.</li>
</ul>


<p>Having done things <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">the old way</a>, I was surprised that the process was so simple this time. Hats off to the Raspberry Pi Foundation for a great installation experience.</p>

<h3>Login Information</h3>

<p>After the device boots, you will need login credentials. These have not changed from the previous version:</p>

<p>&#8220;` bash</p>

<p>raspberripi login: pi
Password: raspberry</p>

<p>&#8220;`</p>

<p>Note that the cursor will not move while you type the password.</p>

<p>Next, start the X Window environment.</p>

<p>&#8220;` bash
$ startx</p>

<p>&#8220;`
And your desktop will look something like this.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/raspberry_pi_2_model_b_ruby.jpg' width='' height='' alt='Screenshot: Raspberry Pi 2 Model B' title='Screenshot: Raspberry Pi 2 Model B'><span class='caption-text'>Screenshot: Raspberry Pi 2 Model B</span></span></p>

<h3>Running Ruby, Rails</h3>

<p>This incarnation of Raspberry Pi comes with Ruby 1.9.3 pre-installed. Of course, if you want to manage multiple versions of Ruby, <a href="/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM is a great way to go</a>.</p>

<p>To install RVM, first run <code>gpg</code> to verify that you will get an uncorrupted (or un-tampored with) version of RVM.</p>

<p>&#8220;` bash</p>

<p>$ gpg &mdash;keyserver hkp://keys.gnupg.net &mdash;recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</p>

<p>$</p>

<p>&#8220;`</p>

<p>Next, install RVM.</p>

<p>&#8220;` bash
$ \curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable</p>

<p>$</p>

<p>&#8220;`</p>

<p>And finally, let the current terminal session know that RVM is installed
by typing the following at the command line.</p>

<p>&#8220;` bash</p>

<p>$ source /home/pi/.rvm/scripts/rvm</p>

<p>$</p>

<p>&#8220;`</p>

<p>You can verify that RVM is installed by checking its version number like so&hellip;</p>

<p>&#8220;` bash</p>

<p>$ rvm &mdash;version
rvm 1.26.10 (master) by Wayne E. Seguin <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#119;&#97;&#121;&#x6e;&#101;&#101;&#115;&#101;&#x67;&#117;&#x69;&#x6e;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#119;&#97;&#x79;&#110;&#x65;&#101;&#x73;&#x65;&#x67;&#x75;&#105;&#x6e;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a>, Michal Papis <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#109;&#x70;&#x61;&#112;&#105;&#x73;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x6d;&#x70;&#97;&#112;&#105;&#x73;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a> [<a href="https://rvm.io/">https://rvm.io/</a>]</p>

<p>$</p>

<p>&#8220;`</p>

<h3>Installing Ruby Versions</h3>

<p>To install the latest stable version of Ruby&hellip;</p>

<p>&#8220;` bash</p>

<p>$ rvm install ruby</p>

<p>$</p>

<p>&#8220;`</p>

<p>RVM will download dependencies as part of the installation process. From there, you can create RVM gemsets and <code>gem install rails</code> or any other libraries you may need. More documentation can be found at <a href="http://rvm.io">http://rvm.io</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenROV Assembly Challenges]]></title>
    <link href="http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges/"/>
    <updated>2014-08-19T16:44:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/08/19/openrov-assembly-challenges</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/openrov_rth.jpg' width='' height='' alt='OpenROV fully assembled.' title='OpenROV fully assembled.'><span class='caption-text'>OpenROV fully assembled.</span></span>
I know this problem can be solved. I just haven‚Äôt figured it out yet, and I need help from the <a href="http://openrov.com/">OpenROV</a> community to do so.</p>

<p><em>Update: The OpenROV community delivered. Solution: <a href="/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>

<h3>Parts That Work</h3>

<p>Software image updates on the Beaglebone Black work flawlessly thanks to scripts written by <a href="https://github.com/BrianAdams">Brian Adams</a> and <a href="https://github.com/codewithpassion">Dominick Fretz</a>. The cockpit software shows a real-time image from the camera, the LED lights are super-bright, and the lasers hold steady at 10cm apart. My fully assembled OpenROV passes the water submersion test. Yes, it‚Äôs waterproof, thanks to O-rings and silicon-based lubricant!</p>

<p>What about the motors? The motors work, almost. Could it be the
electronic speed control (ESC) settings, calibration, or less than
perfect soldering? That&rsquo;s where I need help.</p>

<!--more-->


<h3>Summary of Symptoms</h3>

<p>With the cockpit software running and attached to the OpenROV:</p>

<ul>
<li>If I turn on any of the three ESCs, two of the motors (vertical and port) start running at full blast. The starboard motor remains stationary.</li>
<li>While the V and P motors continue to run at full blast, the starboard motor responds to the cockpit slider controls as expected: +1 makes S run full blast on one direction, -1 sends S full blast in the other direction, and 0 stops the S motor completely. During this exercise, V and P continue at full blast.</li>
<li>Turning off the ESC stops the V and P motors.</li>
<li>When I turn on any of the ESCs, the camera servo jumps slightly, about 10 degrees. And then the V and P motors run full blast.</li>
</ul>


<p>When the cockpit software is not running (and the Google Chrome browser is completely closed):</p>

<ul>
<li>Turning on an ESC has no effect on the motors.</li>
<li>The camera servo jumps slightly, about 10 degrees, as it did with the cockpit software running. But the motors remain stationary.</li>
</ul>


<p>Interesting behavior!</p>

<h3>Double-Checking the ESC Settings</h3>

<p><span class='caption-wrapper right'><img class='caption' src='/images/esc_program_card.jpg' width='' height='' alt='ESC Program Card' title='ESC Program Card'><span class='caption-text'>ESC Program Card</span></span>
During troubleshooting, my first step was to double-check the electronic speed controller (ESC) settings. Setting the ESCs with the beep-and-button-push method was time consuming. And I was concerned that I may have made a mistake in counting the beeps.</p>

<p>Solution: I bought an ESC program card. Amazon sells them for less than fifteen dollars, well worth the price when you consider the peace of mind that the card brings. The program card shows each ESC setting with a clear 7-segment LED display, much easier than counting beeps!</p>

<p>According to the program card, all of the ESC settings are correct.</p>

<h3>Using a Power Supply Instead of Batteries</h3>

<p>All of the time spent troubleshooting drained the OpenROV batteries. So I devised a way to apply power directly to the OpenROV without batteries.</p>

<p><span class='caption-wrapper middle'><img class='caption' src='/images/openrov_power_supply.jpg' width='' height='' alt='Directly connected to power supply.' title='Directly connected to power supply.'><span class='caption-text'>Directly connected to power supply.</span></span></p>

<p>The photo reveals the random condition of my work surface, so here&rsquo;s a verbal description of this hack:</p>

<ul>
<li>In the background, a power supply set to 12 volts</li>
<li><code>+</code> lead (red) connected to the <code>+</code> leads of the battery containers, via a wire acting as a Y-connector.</li>
<li><code>-</code> lead (black) connected to a ground terminal on the OpenROV controller board through a black jumper cable</li>
</ul>


<p>I find that this hack works best if I connect the 12 volt setup first while the Topside Adapter is powered off. Applying power (via USB) to the Topside Adapter turns the entire assembly on.</p>

<p>If you&rsquo;re reading this section and you know a better way for me to connect the power supply, please advise in the comments section below.</p>

<h3>Advice Welcome</h3>

<p>I&rsquo;m not sure where to look next to solve the challenge with the motors. Maybe I skipped a step somewhere during assembly? Advice welcome!</p>

<p><em>Update: As noted at the beginning of this article, this problem has been solved. Solution: <a href="/blog/2014/08/21/esc-programming-and-calibration-for-openrov/">ESC Programming and Calibration for OpenROV</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxBarbados is Global]]></title>
    <link href="http://RayHightower.com/blog/2014/07/25/linuxbarbados-is-global/"/>
    <updated>2014-07-25T15:36:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/25/linuxbarbados-is-global</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='/images/LinuxBarbados-tux-logo_300.png' width='' height='' alt='' title=''><span class='caption-text'></span></span>
<a href="http://linuxbarbados.org">LinuxBarbados</a> is a user group for open source enthusiasts. The group meets monthly, offering solid knowledge for anyone who wants to ramp up their open source skills. For example, yesterday‚Äôs meeting featured a presentation on <a href="http://xbmc.org/">XBMC</a> by Michael Layne. The presenter dug deep into the tool, offering tips on how to write plugins in C++ or Python.</p>

<!--more-->


<h3>Global Reach</h3>

<p>The group is based in Barbados on the campus of the <a href="http://www.cavehill.uwi.edu/">University of the West Indies (UWI) at Cave Hill</a>. Enthusiasts who don‚Äôt live in Barbados can participate <em>live</em> online. So far the group has used Google Hangout for video. Other video solutions will be considered as the group continues to grow.</p>

<h3>Next Steps</h3>

<p>Organizers <a href="http://www.meetup.com/LinuxBarbados/members/143194822/">Maurice Beckles</a> and <a href="http://www.meetup.com/LinuxBarbados/members/153574612/">Michael Layne</a> have exciting plans for the group. Take a look at the LinuxBarbados calendar, and join <a href="http://linuxbarbados.org">LinuxBarbados</a> online if you want to hear about future events.</p>

<p>Whether you live in the Caribbean or in Antarctica, we look forward to seeing you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM and Parallella: What a Difference a Shell Makes]]></title>
    <link href="http://RayHightower.com/blog/2014/07/21/rvm-and-parallella-what-a-difference-a-shell-makes/"/>
    <updated>2014-07-21T21:46:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/07/21/rvm-and-parallella-what-a-difference-a-shell-makes</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/16/upgrading-ruby-with-rvm/">RVM</a> is an effective way to manage Ruby versions on Linux or OS X. RVM was working well on my Ubuntu-based <a href="/blog/2014/07/07/parallella-quick-start-guide-with-gotchas/">Parallella</a>, until one day it stopped:</p>

<p>&#8220;` bash
linaro-nano:~> rvm list
rvm: Command not found.
linaro-nano:~></p>

<p><code>``
</code>rvm: Command not found.` Fortunately, <a href="https://twitter.com/theotherzach">Zach Briggs</a> and I were pairing at a joint OpenHack &ndash; ChicagoRuby event when the problem occurred. Zach is an ideal pairing partner; troubleshooting was smooth because he was there. Time to investigate.</p>

<!--more-->


<h3>Explicit Path</h3>

<p>After a few experiments, we discovered that we could run RVM by explicitly specifying the path to the executable:</p>

<p>&#8220;` bash
linaro-nano:~> ~/.rvm/bin/rvm list</p>

<p>rvm rubies</p>

<p>   ruby-2.0.0-p481 [ armv7l ]</p>

<h1>Default ruby not set. Try &lsquo;rvm alias create default <ruby>&rsquo;.</h1>

<h1>=> &ndash; current</h1>

<h1>=* &ndash; current &amp;&amp; default</h1>

<h1>* &ndash; default</h1>

<p>linaro-nano:~></p>

<p>&#8220;`</p>

<p>Therefore, it appeared that the Ubuntu/Linux <code>$PATH</code> variable was being ignored. Google led us to consider the shell in use on the Parallella.</p>

<h3>Which Shell Is In Use?</h3>

<p>The shell is just a program that lets humans talk to the Linux operating system through a command line interface. Several shell programs exist. Linux users tend to prefer one shell or another. The <code>$SHELL</code> environmental variable points to the one in use.</p>

<p>&#8220;` bash
linaro-nano:~> echo $SHELL
/bin/tcsh
linaro-nano:~></p>

<p>&#8220;`</p>

<p>Very interesting. <code>tcsh</code> was the current Parallella shell. I&rsquo;m more accustomed to <code>bash</code>. Could RVM prefer <code>bash</code> too? We changed one line of <code>/etc/passwd</code> to tell the Parallella to start with <code>bash</code> instead of <code>tcsh</code> and rebooted the Parallella.</p>

<p>&#8220;` bash
linaro-nano:~> echo $SHELL
/bin/bash
linaro-nano:~></p>

<p>&#8220;`
&hellip;and now RVM works normally.</p>

<p>&#8220;` bash
linaro-nano:~> rvm list</p>

<p>rvm rubies</p>

<p>   ruby-2.0.0-p481 [ armv7l ]</p>

<h1>Default ruby not set. Try &lsquo;rvm alias create default <ruby>&rsquo;.</h1>

<h1>=> &ndash; current</h1>

<h1>=* &ndash; current &amp;&amp; default</h1>

<h1>* &ndash; default</h1>

<p>linaro-nano:~></p>

<p>&#8220;`</p>

<h3>Consider Fish?</h3>

<p>Right after this exercise, Zach and <a href="http://twitter.com/josh_cheek">Josh Cheek</a> had a Twitter conversation about a shell called <a href="http://fishshell.com/">fish</a>. Something new and shiny to explore!</p>

<h3>Original Plan: Rubinius</h3>

<p>Did I mention that we originally planned to install <a href="/blog/2014/02/06/installing-rubinius-using-rvm/">Rubinius</a> on the Parallella? Where there are goals, there are yaks waiting to be shaved!</p>
]]></content>
  </entry>
  
</feed>
