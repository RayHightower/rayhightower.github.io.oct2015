<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Education | RayHightower.com]]></title>
  <link href="http://RayHightower.com/blog/categories/education/atom.xml" rel="self"/>
  <link href="http://RayHightower.com/"/>
  <updated>2014-04-14T20:36:45-05:00</updated>
  <id>http://RayHightower.com/</id>
  <author>
    <name><![CDATA[Raymond T. Hightower - Chicago Ruby on Rails & iOS Developer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recursion and Memoization]]></title>
    <link href="http://RayHightower.com/blog/2014/04/12/recursion-and-memoization/"/>
    <updated>2014-04-12T10:48:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/12/recursion-and-memoization</id>
    <content type="html"><![CDATA[<blockquote><p>To iterate is human, to recurse divine.
&nbsp;<br/>
~ L. Peter Deutsch</p></blockquote>

<p>Recursion is available in many high-level languages, including Ruby. Recursive solutions can be joyfully elegant. At the same time, the pursuit of elegance can lead to unexpected performance pitfalls.</p>

<p>Fortunately, we can use optimization techniques to address performance problems before they occur. Memoization is one technique in our arsenal.</p>

<!--more-->


<h3>Before Memoization</h3>

<p>Memoization was designed to solve a particular kind of problem. Consider a method called <code>fibo(n)</code> that calculates the <em>nth</em> number of the <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci</a> sequence.</p>

<p>```ruby</p>

<h1>Calculate the nth Fibonacci number, f(n).</h1>

<p>def fibo (n)
  if n &lt;= 1</p>

<pre><code>return n
</code></pre>

<p>  else</p>

<pre><code>value = fibo(n-1) + fibo(n-2)
return value
</code></pre>

<p>  end
end</p>

<h1>Display the Fibonacci sequence.</h1>

<p>(1..40).each do |number|
  puts &ldquo;fibo(#{number}) = #{fibo(number)}&rdquo;
end
```</p>

<p>The example runs, but performance slows down as <em>n</em> gets larger. Why? Because this method re-calculates all preceeding Fibonacci numbers every time it calculates a new <code>fibo(n)</code>. When we calculate Fibonacci numbers manually, we know better. Humans are smart enough to refer to earlier work. But the <code>fibo(n)</code> does not manage time very well.</p>

<p>Is it possible for the <code>fibo(n)</code> method to remember the results of earlier calculations so that it can avoid doing work that is already done? Yes, through <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>.</p>

<h3>Memoization</h3>

<p>Memoization means recording the results of earlier calculations so that we don&rsquo;t have to repeat the calculations later. If our code depends on the results of earlier calculations, and if the same calculations are performed over-and-over again, then it makes sense to store interim results (jot results down on a &lsquo;memo&rsquo; = memoization) so that we can avoid repeating the math.</p>

<p>The Fibonacci example can be improved through memoization as follows.</p>

<ul>
<li>Create a place to store temporary results.</li>
<li>Before performing a calculation, find out if the calculation has
already been done. If so, use the stored result.</li>
<li>If this is our first time calculating a particular <code>fibo(n)</code>, store
the results for future use.</li>
</ul>


<p>Here&rsquo;s how memoization is implemented in the Fibonacci example:</p>

<p>```ruby</p>

<h1>Fibonacci numbers WITH memoization.</h1>

<h1>Initialize the memoization array.</h1>

<p>@scratchpad = []
@max_fibo_size = 50
(1..@max_fibo_size).each do |i|
  @scratchpad[i] = :notcalculated
end</p>

<h1>Calculate the nth Fibonacci number, f(n).</h1>

<p>def fibo (n)
  if n > @max_fibo_size</p>

<pre><code>return "n must be #{@max_fibo_size} or less."
</code></pre>

<p>  elsif n &lt;= 1</p>

<pre><code>return n
</code></pre>

<p>  elsif @scratchpad[n] != :notcalculated</p>

<pre><code>return @scratchpad[n]
</code></pre>

<p>  else</p>

<pre><code>@scratchpad[n] = fibo(n-1) + fibo(n-2)
return @scratchpad[n]
</code></pre>

<p>  end
end</p>

<h1>Display the Fibonacci sequence.</h1>

<p>(1..50).each do |number|
  puts &ldquo;fibo(#{number}) = #{fibo(number)}&rdquo;
end
```</p>

<p>Walking through the code&hellip; First we create a memoization array, a place to store the pre-calculated values. In this example, <code>@scratchpad[]</code> serves as our memoization array.</p>

<p>The <code>fibo(n)</code> method is similar to the one in the earlier example, with a few subtle differences. First, we need to determine whether we&rsquo;ve already calculated a particular value. Since we initialized all elements of the <code>@scratchpad</code> array with the <code>:notcalculated</code> symbol, it&rsquo;s easy to figure out where work needs to be done. If a Fibonacci number <code>fibo(n)</code> has already been calculated, we return the value stored at <code>@scratchpad[n]</code>. Otherwise, we calculate the new <code>fibo(n)</code> and store that value at <code>@scratchpad[n]</code> for later use.</p>

<h3>Performance Comparison</h3>

<p>The performance of the two programs is compared in this 1-minute video.</p>

<center><iframe src="http://RayHightower.com//player.vimeo.com/video/91841948" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center>


<p>As the video shows, memoization is a performance booster.</p>

<h3>Sample Code</h3>

<p>Sample code related to this article can be found on <a href="https://github.com/RayHightower/fibonacci">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Open Source?]]></title>
    <link href="http://RayHightower.com/blog/2014/04/05/why-open-source/"/>
    <updated>2014-04-05T00:40:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/04/05/why-open-source</id>
    <content type="html"><![CDATA[<p>As members of the open source community, we have internalized the benefits of open source. Sometimes, knowing a topic so well can hinder us from explaining it to people who need to understand our work: Clients, customers, and employers. They need to understand us because they pay us. Understanding helps to build trust.</p>

<p>The topic <a href="/blog/2014/02/22/what-is-open-source/">What is Open Source</a> is covered in earlier post by that title. This presentation covers some of the &ldquo;whys&rdquo; of open source in terms that matter to the people we serve: Clients, customers, and employers.</p>

<!--more-->


<center><script async class="speakerdeck-embed" data-id="e20291c09eb00131918d4a0f4a2b8270" data-ratio="1.29456384323641" src="http://RayHightower.com//speakerdeck.com/assets/embed.js"></script></center>


<p>This presentation was delivered at the <a href="http://flourishconf.com/">Flourish 2014</a> conference at the University of Illinois at Chicago. I am grateful to the Flourish organizers and to UIC for inviting me to speak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flourish Open Source Conference at UIC]]></title>
    <link href="http://RayHightower.com/blog/2014/03/31/flourish-open-source-conference-at-uic/"/>
    <updated>2014-03-31T23:42:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/03/31/flourish-open-source-conference-at-uic</id>
    <content type="html"><![CDATA[<p><a href="http://flourishconf.com">Flourish</a> is an open source conference to be held at the University of Illinois at Chicago on Saturday, April 5, 2014. The conference is run by university students and tickets are free.</p>

<p>Why go to Flourish? Because&hellip;</p>

<!--more-->


<ul>
<li>You like open source.</li>
<li>You want to know more about open source.</li>
<li>You want to meet people who are passionate about open source.</li>
<li>All (or some combination) of the above.</li>
</ul>


<h3>Not Just Software</h3>

<p>Linux may be the best known open source project, but open source is not just about software. At Flourish 2009 a speaker mentioned a funny little circuit board called “Arduino” during one of the presentations. I turned to my neighbor in the audience, and I asked “What’s an Arduino?”</p>

<p>My neighbor pulled an Arduino out of his backpack and showed it to me. Wow. Open source extends to hardware, too! Since then, the Arduino has become part of the <a href="http://www.windycityrails.org/youth/">WindyCityRails Youth Program</a>. Beyond microcontrollers, single-board Linux machines like the <a href="/blog/2012/12/03/ruby-on-raspberry-pi/">Raspeberry Pi</a>, <a href="/blog/2014/01/02/beaglebone-black-ubuntu-part-1/">Beaglebone Black</a>, and <a href="/blog/2013/06/22/preparing-for-parallella-64-cores-installing-go-on-mac-os-x/">Parallella</a> have joined the open source hardware ranks.</p>

<h3>See You There</h3>

<p>Thank you, Flourish organizers, for inviting me to speak this year. UIC is where I first learned about open source, Linux, and the web. My appreciation for UIC extends beyond my CS degree.</p>

<p>Great things happen when like-minded people come together to exchange ideas. I look forward to seeing you at Flourish 2014!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How .gitignore Works]]></title>
    <link href="http://RayHightower.com/blog/2014/03/25/how-gitignore-works/"/>
    <updated>2014-03-25T18:20:00-05:00</updated>
    <id>http://RayHightower.com/blog/2014/03/25/how-gitignore-works</id>
    <content type="html"><![CDATA[<p>Earlier today I ran into a Git issue within a RubyMotion project. I added a directory to the project&rsquo;s <code>.gitignore</code> file, but Git seemed to ignore my ignore. Expressed more clearly, Git continued to track a directory that I explicitly told it to ignore.</p>

<p>What?</p>

<p>Either there was a bug in Git, or my understanding of <code>.gitignore</code> was incomplete. It was time for me to dig in and learn more about <code>.gitignore</code>.</p>

<!--more-->


<h3>What I Learned About .gitignore</h3>

<p>The root cause of my problem: Once Git has begun tracking a file or directory, adding it to <code>.gitignore</code> changes nothing. Git will continue to track the file unless we explicitly tell Git to stop tracking the file.</p>

<p>```bash
$ git rm &mdash;cached [filename]</p>

<p>$
```</p>

<p>Or, if you want to stop tracking an entire directory (like me in this case)&hellip;</p>

<p>```bash
$ git rm -r &mdash;cached [directoryname]</p>

<p>$
```</p>

<p>The <code>-r</code> flag will tell Git to stop tracking all of the sub-directories and files within <code>directoryname</code>, recursively.</p>

<p>Git was behaving exactly as designed.</p>

<h3>Penalty</h3>

<p>I should have known this a long time ago. My penalty: A public admission :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing MacVim on OS X Mavericks]]></title>
    <link href="http://RayHightower.com/blog/2014/03/04/fixing-macvim-on-osx-mavericks/"/>
    <updated>2014-03-04T14:48:00-06:00</updated>
    <id>http://RayHightower.com/blog/2014/03/04/fixing-macvim-on-osx-mavericks</id>
    <content type="html"><![CDATA[<p>Experience told me to delay upgrading to OS X Mavericks for as long as possible because the upgrade would likely break my dev environment. Sure enough, the upgrade broke <a href="/blog/2013/01/12/why-i-use-vim/">MacVim</a>.</p>

<p>```bash
~$ which mvim</p>

<p>~$
```</p>

<p>The &lsquo;nix <code>which</code> command returned a null response when asked about MacVim. Not cool, Mavericks!</p>

<!--more-->


<p>Fortunately, I’m running <a href="/blog/2014/02/12/homebrew-fundamentals/">Homebrew</a>. After the standard <code>brew doctor</code> and <code>brew update</code>, the following resolved the MacVim problem:</p>

<p>```bash
~$ brew uninstall macvim
Uninstalling /usr/local/Cellar/macvim/7.4-70&hellip;</p>

<p>~$
```</p>

<p>followed by…</p>

<p>```bash
~$ brew install macvim
==> Downloading <a href="https://github.com/b4winckler/macvim/archive/snapshot-72.tar.gz">https://github.com/b4winckler/macvim/archive/snapshot-72.tar.gz</a></p>

<h6>################################################################## 100.0%</h6>

<p>==> ./configure &mdash;with-features=huge &mdash;enable-multibyte &mdash;with-macarchs=x86_64 &mdash;enable-perlinterp &mdash;enable-rubyinterp &mdash;enable-tcli
==> make
==> Caveats
.app bundles were installed.
Run <code>brew linkapps</code> to symlink these to /Applications.
==> Summary
🍺  /usr/local/Cellar/macvim/7.4-72: 1799 files, 28M, built in 37 seconds</p>

<p>~$
```</p>

<p>And now…</p>

<p>```bash
~$ which mvim
/usr/local/bin/mvim</p>

<p>~$
```</p>

<p>Whew. Homebrew saves the day again!</p>
]]></content>
  </entry>
  
</feed>
